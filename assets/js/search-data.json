{"0": {
    "doc": "3D Modeling",
    "title": "3D Modeling",
    "content": "For this part of the tutorial, you will begin using a 3D Modeling called Blender, a software that is commonly used by 3D graphics artists to create animated films (see CHARGE and Sprite Fright). The Photogrammetry part was mostly automated, with you tuning a few knobs to adjust settings. Once you hit the start button, the computer does all of the hard work. However, there are often imperfections with the output model. The model might contain artifacts such as: floating meshes, holes, background noises, etc. This is when Blender comes to the rescue! We can use Blender to post-edit the model and clean up the artifacts. ",
    "url": "https://docs.arenaxr.org/content/overview/3d-modeling.html",
    "relUrl": "/content/overview/3d-modeling.html"
  },"1": {
    "doc": "3D Modeling",
    "title": "Import your model",
    "content": "To visualize your model, first locate your model save directory and import it into Blender (File -&gt; Import -&gt; .obj). After importing it you should see a model with no texture overlay. This is due to the Viewport Shading mode defaults to Solid (focused on geometry features). You can toggle between Wireframe / Solid / Material Preview / Rendered mode at the top right corner, as highlighted in the figure below. ",
    "url": "https://docs.arenaxr.org/content/overview/3d-modeling.html#import-your-model",
    "relUrl": "/content/overview/3d-modeling.html#import-your-model"
  },"2": {
    "doc": "3D Modeling",
    "title": "UV Mapping",
    "content": "One important thing to understand is the process called UV Mapping. It involves projecting 2D images onto 3D models to create texture mapping, one of the necessary steps for us to see textures on the mesh. We are not going to dive into the details, but visualizing the 3D model to 2D texture image correspondence would be helpful to comprehend the idea. To visualize UV mapping, first click UV Editing tab on the top, second select the texture image to view by clicking your texture image in the drop down menu on the left panel, third select Edit Mode for the mesh. Your interface should look similar to the one shown below. Now, select any region in the mesh surface, observe how the corresponding region in the texture map is highlighted as you select different regions on the mesh. ",
    "url": "https://docs.arenaxr.org/content/overview/3d-modeling.html#uv-mapping",
    "relUrl": "/content/overview/3d-modeling.html#uv-mapping"
  },"3": {
    "doc": "3D Modeling",
    "title": "Model Cleanup - Removing Incorrect Geometry",
    "content": "From the model visualization we can clearly see that the sky is mapped at the wrong depth, and removing the sky will make the model cleaner and more accurate. The simple way to remove unwanted geometry components is to select and delete triangle vertices / edges / faces. We can do this by going into the Modeling tab and enabling Edit Mode. Note that if you want to select through the entire 3D volume, not limiting to visible faces, you can turn on the X-Ray option. After selecting the items you want to remove, you can hit x on the keyboard to delete them. This shows a side by side comparison of the effect of cleaning up the geometry. goal . At this stage, you should understand the basic usage of Blender and be able to import and clean up your photogrammetry model. ",
    "url": "https://docs.arenaxr.org/content/overview/3d-modeling.html#model-cleanup---removing-incorrect-geometry",
    "relUrl": "/content/overview/3d-modeling.html#model-cleanup---removing-incorrect-geometry"
  },"4": {
    "doc": "Advanced Example",
    "title": "Advanced Example - EVEN more functionality!",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/python/tutorial/advanced.html#advanced-example---even-more-functionality",
    "relUrl": "/content/python/tutorial/advanced.html#advanced-example---even-more-functionality"
  },"5": {
    "doc": "Advanced Example",
    "title": "User management",
    "content": "An arena-py Scene keep tracks of all incoming and outgoing users. Users are stored as camera objects. Get a list of all users in a scene like so: . scene.get_user_list() # returns [Camera(object_id=\"camera_1234556789_Edward\"), Camera(object_id=\"camera_987654321_Ed\"), ...] . Scenes also have special user callbacks. user_join_callback is called whenever a user is found by the library: . def user_join_callback(scene, cam, msg): # do stuff here # cam is Camera object pass scene.user_join_callback = user_join_callback . ",
    "url": "https://docs.arenaxr.org/content/python/tutorial/advanced.html#user-management",
    "relUrl": "/content/python/tutorial/advanced.html#user-management"
  },"6": {
    "doc": "Advanced Example",
    "title": "Printing objects/looking at JSON",
    "content": "All objects are printed as JSON/python dictionaries. So to make sure your JSON is formatted correctly, . print(cam) # will print as a dict print(scene.update_object(box, position=Position(1,1,1))) # will print what was published as a dict . ",
    "url": "https://docs.arenaxr.org/content/python/tutorial/advanced.html#printing-objectslooking-at-json",
    "relUrl": "/content/python/tutorial/advanced.html#printing-objectslooking-at-json"
  },"7": {
    "doc": "Advanced Example",
    "title": "Objects get automatically updated",
    "content": "You can leverage the fact that Objects in arena-py get automatically updated to do some cool things! Lets make a camera tracer program that traces the movement of users in a scene. ",
    "url": "https://docs.arenaxr.org/content/python/tutorial/advanced.html#objects-get-automatically-updated",
    "relUrl": "/content/python/tutorial/advanced.html#objects-get-automatically-updated"
  },"8": {
    "doc": "Advanced Example",
    "title": "Camera Tracer",
    "content": "Lets start by creating a helper class that stores the camera and the previous position of the camera: . class CameraState(Object): def __init__(self, camera): self.camera = camera self.prev_pos = None self.line_color = Color( random.randint(0,255), random.randint(0,255), random.randint(0,255) ) @property def curr_pos(self): # camera position is not static, it is constantly changing and will be updated in real-time return self.camera.data.position @property def displacement(self): if self.prev_pos: # Position attributes have a distance_to method that returns the distance to another Position return self.prev_pos.distance_to(self.curr_pos) else: return 0 . Then, lets maintain a list of all camera states in a scene: . cam_states = [] # called whenever a user is found by the library def user_join_callback(scene, cam, msg): global cam_states cam_state = CameraState(cam) cam_states += [cam_state] . ",
    "url": "https://docs.arenaxr.org/content/python/tutorial/advanced.html#camera-tracer",
    "relUrl": "/content/python/tutorial/advanced.html#camera-tracer"
  },"9": {
    "doc": "Advanced Example",
    "title": "Object Time to Live (TTL)",
    "content": "The ttl attribute of an object can set the amount of time (in seconds) that an object will stay in the scene until it is automatically deleted by the browser client. line = ThickLine( color=\"#123456\", path=(Position(0,0,0), Position(10,10,10)), ttl=3 # live for 3 seconds ) . ",
    "url": "https://docs.arenaxr.org/content/python/tutorial/advanced.html#object-time-to-live-ttl",
    "relUrl": "/content/python/tutorial/advanced.html#object-time-to-live-ttl"
  },"10": {
    "doc": "Advanced Example",
    "title": "Camera Tracer",
    "content": "Lastly, lets have a loop that checks if a camera has displaced a certain distance, then draw a line that lasts for 3 seconds if it did: . MIN_DISPLACEMENT = 0.5 LINE_TTL = 5 @scene.run_forever(interval_ms=200) def line_follow(): for cam_state in cam_states: if cam_state.displacement &gt;= MIN_DISPLACEMENT: line = ThickLine( color=cam_state.line_color, path=(cam_state.prev_pos, cam_state.curr_pos), lineWidth=3, ttl=LINE_TTL ) scene.add_object(line) # the camera's position gets automatically updated by arena-py! cam_state.prev_pos = cam_state.curr_pos . ",
    "url": "https://docs.arenaxr.org/content/python/tutorial/advanced.html#camera-tracer-1",
    "relUrl": "/content/python/tutorial/advanced.html#camera-tracer-1"
  },"11": {
    "doc": "Advanced Example",
    "title": "Appendix",
    "content": "from arena import * import random MIN_DISPLACEMENT = 0.5 LINE_TTL = 5 class CameraState(Object): def __init__(self, camera): self.camera = camera self.prev_pos = None self.line_color = Color( random.randint(0,255), random.randint(0,255), random.randint(0,255) ) @property def curr_pos(self): # camera position is not static, it is constantly changing and will be updated in real-time return self.camera.data.position @property def displacement(self): if self.prev_pos: # Position attributes have a distance_to method that returns the distance to another Position return self.prev_pos.distance_to(self.curr_pos) else: return 0 cam_states = [] # called whenever a user is found by the library def user_join_callback(scene, cam, msg): global cam_states cam_state = CameraState(cam) cam_states += [cam_state] scene = Scene(host=\"arenaxr.org\", scene=\"example\") scene.user_join_callback = user_join_callback @scene.run_forever(interval_ms=200) def line_follow(): for cam_state in cam_states: if cam_state.displacement &gt;= MIN_DISPLACEMENT: line = ThickLine( color=cam_state.line_color, path=(cam_state.prev_pos, cam_state.curr_pos), lineWidth=3, ttl=LINE_TTL ) scene.add_object(line) # the camera's position gets automatically updated by arena-py! cam_state.prev_pos = cam_state.curr_pos scene.run_tasks() . ",
    "url": "https://docs.arenaxr.org/content/python/tutorial/advanced.html#appendix",
    "relUrl": "/content/python/tutorial/advanced.html#appendix"
  },"12": {
    "doc": "Advanced Example",
    "title": "Advanced Example",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/python/tutorial/advanced.html",
    "relUrl": "/content/python/tutorial/advanced.html"
  },"13": {
    "doc": "ATLAS and Anchoring to Reality",
    "title": "ATLAS and Anchoring Scenes",
    "content": "ARENA provides several mechanisms to help streamline the management and sharing of anchor data as well as simplifying the process of combining multiple tracking technologies into a uniform coordinate system. ARENA scenes can be registered and discovered by the Atlas service. Atlas is an essential ARENA service that allows users to find nearby content based on coarse location and supports managing the data needed to link Scene content with the physical world. Atlas operates in a hierarchical manner much like the Internet’s Domain Name Service (DNS), but using a mixture of GPS coordinates, UUIDs and Scenes instead of domain names. UUID markers can be embedded into QR codes,BLE beacons or other digital markers (WiFi, LTE tower, etc). Atlas can also provide absolute and/or local coordinates for markers that are associated with scenes. For example, a user could scan a QR code or read a BLE beacon which provides a UUID that maps to a GPS coordinate along with any Scenes that contain that GPS coordinate. Atlas stores a GPS location for each Scene along with a 3D bounding polygon. The GPS location is typically assigned to the origin of the Scene’s local coordinate system. A user can perform follow-up queries to Atlas for assets that fall within each Scene. For example, a Scene might contain a number of Apriltags (low bit-density tracking markers) that have GPS coordinates as well as local coordinates referenced from the Scene’s origin. It is worth noting that a Scene’s address can be used to form a URL for virtual environments that have no physical location.Since Atlas is a public facing entity that needs administrative management, ARENA also supports the ability to store location data within a Scene by attaching real-world properties to objects. { \"object_id\": \"abox\", \"persist\": true, \"type\": \"object\", \"action\": \"create\", \"data\": { \"object_type\": \"box\", \"depth\": 1, \"height\": 1, \"width\": 1, \"position\": { \"x\": 1, \"y\": 1, \"z\": 1 }, \"rotation\": { \"x\": 0, \"y\": 0, \"z\": 0, \"w\": 1 }, \"armarker\": { \"lat\": 40.4432, \"lon\": 79.9428, \"markerid\": \"1\", \"markertype\": \"apriltag_36h11\", \"size\": 150, \"ele\": 200 } } } . Figure 1. Example Box Object with an ARMarker. Figure 1 shows an example of how a box object in a scene can have an AR marker property attached to it. This simplifies the common case where a developer builds a local scene and wants a quick way to manage beacon data annotations for localization systems. ARmarkers can be set as static or dynamic to determine if clients should use them for relocalization or if clients should provide location information for the tag. Our current client can decode AprilTags in browsers that allow camera access (e.g. Mozilla WebXR Viewer and Chrome). If the client decodes a static tag, it uses the location data to compute the pose of the device’s camera. If the tag is dynamic (and the client has a confident fix on its location), it publishes its estimate of the tag location to that object. In this way, multiple users in a space can update and share the location of dynamic tags. Since these tags are attached to objects, this naturally updates the object positions and is reflected across all users and programs. User cameras and rigs can also be updated by external tracking systems. For example, a Python agent can convert OptiTrack motion capture objects into ARENA position updates. If you target those outputs to specific user cameras or objects, they are automatically localized within the scene. This seamlessly works side-by-side with devices that use optical tags or even UWB localization. We have a number of helper applications that leverage different localization systems to help build tag maps (e.g. OptiTrack can be used to calibrate AprilTags within a shared space). This is another example where the implicitly networked nature of all objects dramatically simplifies merging data from multiple sensing modalities . note . Additional information on anchoring ARENA Scenes in the miXed Reality (XR) Section for a quick taste of XR in ARENA. ",
    "url": "https://docs.arenaxr.org/content/architecture/anchoring.html#atlas-and-anchoring-scenes",
    "relUrl": "/content/architecture/anchoring.html#atlas-and-anchoring-scenes"
  },"14": {
    "doc": "ATLAS and Anchoring to Reality",
    "title": "ATLAS and Anchoring to Reality",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/architecture/anchoring.html",
    "relUrl": "/content/architecture/anchoring.html"
  },"15": {
    "doc": "Animated Faces",
    "title": "Performance Driven Animated Faces",
    "content": "Here are some notes gathered to understand how to understand and create facial animations for the ARENA with blendshapes and other model formats. ",
    "url": "https://docs.arenaxr.org/content/3d-content/animated-faces.html#performance-driven-animated-faces",
    "relUrl": "/content/3d-content/animated-faces.html#performance-driven-animated-faces"
  },"16": {
    "doc": "Animated Faces",
    "title": "Overview",
    "content": ". | Practice and Theory of Blendshape Facial Models [1]. It’s a good starting point, with a nice overview of how blendshape works. | . ",
    "url": "https://docs.arenaxr.org/content/3d-content/animated-faces.html#overview",
    "relUrl": "/content/3d-content/animated-faces.html#overview"
  },"17": {
    "doc": "Animated Faces",
    "title": "Blendshapes",
    "content": ". | Blend Shape Interpolation and FACS for Realistic Avatar [2] (Facial Action Coding) | Face Scan App (developers) | Face Cap App (product) | . ",
    "url": "https://docs.arenaxr.org/content/3d-content/animated-faces.html#blendshapes",
    "relUrl": "/content/3d-content/animated-faces.html#blendshapes"
  },"18": {
    "doc": "Animated Faces",
    "title": "Exporting",
    "content": "How do we get models into the ARENA? . | Models are ASCII FBX with text file for the rigging sequence. | Convert ASCII FBX -&gt; Binary FBX with: https://www.autodesk.com/developer-network/platform-technologies/fbx-converter-archives. | AutoDesk FAILED?! Use this instead: https://overbits.herokuapp.com/fbxgltf/. | Convert Binary FBX to GLTF with blendshape animations: https://github.com/facebookincubator/FBX2glTF. | . ",
    "url": "https://docs.arenaxr.org/content/3d-content/animated-faces.html#exporting",
    "relUrl": "/content/3d-content/animated-faces.html#exporting"
  },"19": {
    "doc": "Animated Faces",
    "title": "Retargeting",
    "content": "How do we go from landmarks to expressions? . | Feature points based facial animation retargeting [3] | Facial Landmark Detection: A Literature Survey [4] | . ",
    "url": "https://docs.arenaxr.org/content/3d-content/animated-faces.html#retargeting",
    "relUrl": "/content/3d-content/animated-faces.html#retargeting"
  },"20": {
    "doc": "Animated Faces",
    "title": "FLAME",
    "content": ". | Faces Learned with an Articulated Model and Expressions: https://flame.is.tue.mpg.de/ | Early Hao Li project on using ML to do face rigging. | Very cool web demo: https://flame.is.tue.mpg.de/interactivemodelviewer.html | . ",
    "url": "https://docs.arenaxr.org/content/3d-content/animated-faces.html#flame",
    "relUrl": "/content/3d-content/animated-faces.html#flame"
  },"21": {
    "doc": "Animated Faces",
    "title": "References",
    "content": "[1] Lewis, J.P., Anjyo, K., Rhee, T., Zhang, M., Pighin, F.H., &amp; Deng, Z. (2014). Practice and Theory of Blendshape Facial Models. Eurographics. [2] Alkawaz, M.H., Mohamad, D.B., Basori, A.H., &amp; Saba, T. (2015). Blend Shape Interpolation and FACS for Realistic Avatar. 3D Research, 6, 1-10. [3] Dutreve, L., Meyer, A., &amp; Bouakaz, S. (2008). Feature points based facial animation retargeting. Virtual Reality Software and Technology. [4] Wu, Y., &amp; Ji, Q. (2018). Facial Landmark Detection: A Literature Survey. International Journal of Computer Vision, 127, 115-142. ",
    "url": "https://docs.arenaxr.org/content/3d-content/animated-faces.html#references",
    "relUrl": "/content/3d-content/animated-faces.html#references"
  },"22": {
    "doc": "Animated Faces",
    "title": "Animated Faces",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/3d-content/animated-faces.html",
    "relUrl": "/content/3d-content/animated-faces.html"
  },"23": {
    "doc": "Animated Models",
    "title": "Animated Models",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/3d-content/animated-models.html",
    "relUrl": "/content/3d-content/animated-models.html"
  },"24": {
    "doc": "Animated Models",
    "title": "Animate (rotation)",
    "content": "Animate rotation of the already drawn cube. Raw Message . { \"object_id\": \"cube_1\", \"action\": \"update\", \"type\": \"object\", \"data\": { \"animation\": { \"property\": \"rotation\", \"to\": \"0 360 0\", \"loop\": true, \"dur\": 10000 } } } . Python . cube.update(data='{\"animation\": {\"property\":\"rotation\", \"to\":\"0 360 0\", \"loop\":\"true\", \"dur\":10000}}') . other animations are available that resemble the \"data\": {\"animation\": { \"property\": ... }} blob above: see A-Frame Animation documentation for more examples . ",
    "url": "https://docs.arenaxr.org/content/3d-content/animated-models.html#animate-rotation",
    "relUrl": "/content/3d-content/animated-models.html#animate-rotation"
  },"25": {
    "doc": "Animation Mixer",
    "title": "Animation Mixer",
    "content": "A list of available animations can usually be found by inspecting the model file or its documentation. All animations will play by default. To play only a specific set of animations, use wildcards: animation-mixer=’clip: run_*’. More properties at A-Frame Extras Animation. ",
    "url": "https://docs.arenaxr.org/content/schemas/message/animation-mixer.html#animation-mixer",
    "relUrl": "/content/schemas/message/animation-mixer.html#animation-mixer"
  },"26": {
    "doc": "Animation Mixer",
    "title": "Animation Mixer Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | clampWhenFinished | boolean | False | If true, halts the animation at the last frame. | No | . | clip | string | '*' | Name of the animation clip(s) to play. Accepts wildcards. | Yes | . | crossFadeDuration | number | 0 | Duration of cross-fades between clips, in seconds. | No | . | duration | number | 0 | Duration of the animation, in seconds (0 = auto). | No | . | loop | string; One of: ['once', 'repeat', 'pingpong'] | 'repeat' | In repeat and pingpong modes, the clip plays once plus the specified number of repetitions. For pingpong, every second clip plays in reverse. | No | . | repetitions | string | '' | Number of times to play the clip, in addition to the first play (empty string = Infinity). Repetitions are ignored for loop: once. | No | . | startAt | number | 0 | Sets the start of an animation to a specific time (in milliseconds). This is useful when you need to jump to an exact time in an animation. The input parameter will be scaled by the mixer’s timeScale. | No | . | timeScale | number | 1 | Scaling factor for playback speed. A value of 0 causes the animation to pause. Negative values cause the animation to play backwards. | No | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/animation-mixer.html#animation-mixer-attributes",
    "relUrl": "/content/schemas/message/animation-mixer.html#animation-mixer-attributes"
  },"27": {
    "doc": "Animation Mixer",
    "title": "Animation Mixer",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/animation-mixer.html",
    "relUrl": "/content/schemas/message/animation-mixer.html"
  },"28": {
    "doc": "Animations and Morph Targets",
    "title": "Animations and Morph Targets",
    "content": "In this section, you will be learning how to add and export a custom animation for your 3D model. note . You do not have to follow this tutorial exactly. If you have another way to animate, feel free to do so! . You should have an object like below. Please make sure you have the Object Data Properties tab selected on the leftmost vertical menu bar . Add a shape key using the “+” sign in the Shape Keys list. This will make a shape key called “Basis,” which is the initial state of your animation. This should just be the unchanged 3D model that you scanned. Now, add a new shape key, which will act as the animation trigger. Rename this to something you can recognize. We are making our model blink, so we will call our shape key “blink”. Now type “TAB” to enter Edit Mode. This mode lets you edit the mesh of your scanned model! . Select a couple vertices of your model that you want to manipulate for your animation. You can also select edges by typing “2”, or faces by typing “3”. Return to editing vertices by typing “1”. We will select the upper two vertices of our model’s eye. Next, enable Proportional Editing. This will make it so that your transformations will also affect the surrounding vertices/edges/faces. Next, type “g” so that you can move your vertices. “r” will rotate and “s” will scale! After typing “g”, “r”, or “s”, you can type “x”, “y”, or “z” to move/rotate/scale along a certain axis, which can be helpful. If you do not see the gray Proportional Editing circle (like the gray circle above), please use the scroll wheel or swipe down/up with two fingers on your trackpad to adjust the size of the Proportional Editing circle. We will move our two selected points down. We will also move the lower three points up. Same for the other side! . Feel free to edit and animate your model as you please! Be creative here! When you are finished, press “TAB” again to exit Edit Model, returning to Object Mode. You will notice that your shape key has a Value parameter. When you move this parameter, you will see that your model slowly animates to your edited model, corresponding to the value of Value! . Now we will animate the shape key to form our animation! Drag up the animation timeline at the bottom. Set the End to a reasonable number of frames. ARENA renders at 60 frames per second, so we will make our End 60 frames + 1 = 61 frames for one second of animation. The end number of frames is up to you. Move the blue bar to frame 1, and then click the filled in circle next to the Value parameter. This will add an animation keyframe at frame 1, with the Value set to 0! . Then, drag the blue slider to 1 minus the final frame. Now, click on the filled in diamond next to the Value parameter. This will add a final keyframe with the Value set to 1! . Now, when you press the Space Bar, Blender should play your animation. Starting at the original model, and over time, animating it to your edited model! . Now, you have created an animation in Blender. Let’s export our model for the web! Select File -&gt; Export -&gt; glTF 2.0 (.glb/.gltf) and save your model as a .glb. GLTF is a 3D model file format that is web-friendly, and GLB is a binary version of GLTF! . Save it to a safe location. Now, let’s view your model on the web to see the animation in action. Go to https://gltf-viewer.donmccurdy.com/ and drag your model in. The “Morph Targets” dropdown should have your animation(s)! . goal . Make a cool animation (or multiple) for your scanned model and export it as a .glb for usage in ARENA in the next section! . [Optional] See: . | YouTube: Creating Shape Keys in Blender 2.80 | YouTube: Blender 2.8 Shapekeys and Morphing | . ",
    "url": "https://docs.arenaxr.org/content/overview/animation-morph.html",
    "relUrl": "/content/overview/animation-morph.html"
  },"29": {
    "doc": "arena.attributes.animation",
    "title": "\narena.attributes.animation    ",
    "content": "class Animation(arena.attributes.attribute.Attribute): Animation attribute class to manage its properties in the ARENA: Animate and tween values. More properties at https://aframe.io/docs/1.5.0/components/animation.html A-Frame Animation component. Easing properties are detailed at https://easings.net easings.net. Usage: animation=Animation(...) . Parameters . | bool autoplay: Whether or not the animation should autoplay. Should be specified if the animation is defined for the animation-timeline component (currently not supported). Defaults to 'True' (optional) | float delay: How long (milliseconds) to wait before starting. (optional) | str dir: Which dir to go from from to to. Allows [normal, alternate, reverse] Defaults to 'normal' (optional) | float dur: How long (milliseconds) each cycle of the animation is. Defaults to '1000' (optional) | str easing: Easing function of animation. To ease in, ease out, ease in and out. See easings.net for more. Allows [easeInQuad, easeInCubic, easeInQuart, easeInQuint, easeInSine, easeInExpo, easeInCirc, easeInBack, easeInElastic, easeOutQuad, easeOutCubic, easeOutQuart, easeOutQuint, easeOutSine, easeOutExpo, easeOutCirc, easeOutBack, easeOutElastic, easeInOutQuad, easeInOutCubic, easeInOutQuart, easeInOutQuint, easeInOutSine, easeInOutExpo, easeInOutCirc, easeInOutBack, easeInOutElastic, linear] Defaults to 'easeInQuad' (optional) | float elasticity: How much to bounce (higher is stronger). Defaults to '400' (optional) | bool enabled: If disabled, animation will stop and startEvents will not trigger animation start. Defaults to 'True' (optional) | str from: Initial value at start of animation. If not specified, the current property value of the entity will be used (will be sampled on each animation start). It is best to specify a from value when possible for stability. (optional) | bool isRawProperty: Flag to animate an arbitrary object property outside of A-Frame components for better performance. If set to true, for example, we can set property to like components.material.material.opacity. If property starts with components or object3D, this will be inferred to true. (optional) | str loop: How many times the animation should repeat. If the value is true, the animation will repeat infinitely. (optional) | list[str] pauseEvents: Comma-separated list of events to listen to trigger pause. Can be resumed with resumeEvents. (optional) | str property: Property to animate. Can be a component name, a dot-delimited property of a component (e.g., material.color), or a plain attribute. (optional) | list[str] resumeEvents: Comma-separated list of events to listen to trigger resume after pausing. (optional) | bool round: Whether to round values. (optional) | list[str] startEvents: Comma-separated list of events to listen to trigger a restart and play. Animation will not autoplay if specified. startEvents will restart the animation, use pauseEvents to resume it. If there are other animation components on the entity animating the same property, those animations will be automatically paused to not conflict. (optional) | str to: Target value at end of animation. (optional) | str type: Right now only supports color for tweening isRawProperty color XYZ/RGB vector values. (optional) | . Animation(**kwargs) Inherited Members . arena.base_object.BaseObject add json_encode json ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/animation.html",
    "relUrl": "/content/python-api/attributes/animation.html"
  },"30": {
    "doc": "arena.attributes.animation",
    "title": "arena.attributes.animation",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/animation.html",
    "relUrl": "/content/python-api/attributes/animation.html"
  },"31": {
    "doc": "Animation",
    "title": "Animation",
    "content": "Animate and tween values. More properties at A-Frame Animation component. Easing properties are detailed at easings.net. ",
    "url": "https://docs.arenaxr.org/content/schemas/message/animation.html#animation",
    "relUrl": "/content/schemas/message/animation.html#animation"
  },"32": {
    "doc": "Animation",
    "title": "Animation Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | autoplay | boolean | True | Whether or not the animation should autoplay. Should be specified if the animation is defined for the animation-timeline component (currently not supported). | No | . | delay | number | 0 | How long (milliseconds) to wait before starting. | No | . | dir | string; One of: ['normal', 'alternate', 'reverse'] | 'normal' | Which dir to go from from to to. | No | . | dur | number | 1000 | How long (milliseconds) each cycle of the animation is. | No | . | easing | string; One of: ['easeInQuad', 'easeInCubic', 'easeInQuart', 'easeInQuint', 'easeInSine', 'easeInExpo', 'easeInCirc', 'easeInBack', 'easeInElastic', 'easeOutQuad', 'easeOutCubic', 'easeOutQuart', 'easeOutQuint', 'easeOutSine', 'easeOutExpo', 'easeOutCirc', 'easeOutBack', 'easeOutElastic', 'easeInOutQuad', 'easeInOutCubic', 'easeInOutQuart', 'easeInOutQuint', 'easeInOutSine', 'easeInOutExpo', 'easeInOutCirc', 'easeInOutBack', 'easeInOutElastic', 'linear'] | 'easeInQuad' | Easing function of animation. To ease in, ease out, ease in and out. See easings.net for more. | No | . | elasticity | number | 400 | How much to bounce (higher is stronger). | No | . | enabled | boolean | True | If disabled, animation will stop and startEvents will not trigger animation start. | No | . | from | string | '' | Initial value at start of animation. If not specified, the current property value of the entity will be used (will be sampled on each animation start). It is best to specify a from value when possible for stability. | No | . | isRawProperty | boolean | False | Flag to animate an arbitrary object property outside of A-Frame components for better performance. If set to true, for example, we can set property to like components.material.material.opacity. If property starts with components or object3D, this will be inferred to true. | No | . | loop | string | '0' | How many times the animation should repeat. If the value is true, the animation will repeat infinitely. | No | . | pauseEvents | array | [] | Comma-separated list of events to listen to trigger pause. Can be resumed with resumeEvents. | No | . | property | string |   | Property to animate. Can be a component name, a dot-delimited property of a component (e.g., material.color), or a plain attribute. | No | . | resumeEvents | array | [] | Comma-separated list of events to listen to trigger resume after pausing. | No | . | round | boolean | False | Whether to round values. | No | . | startEvents | array | [] | Comma-separated list of events to listen to trigger a restart and play. Animation will not autoplay if specified. startEvents will restart the animation, use pauseEvents to resume it. If there are other animation components on the entity animating the same property, those animations will be automatically paused to not conflict. | No | . | to | string | '' | Target value at end of animation. | No | . | type | string | '' | Right now only supports color for tweening isRawProperty color XYZ/RGB vector values. | No | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/animation.html#animation-attributes",
    "relUrl": "/content/schemas/message/animation.html#animation-attributes"
  },"33": {
    "doc": "Animation",
    "title": "Animation",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/animation.html",
    "relUrl": "/content/schemas/message/animation.html"
  },"34": {
    "doc": "arena.attributes.animation_mixer",
    "title": "\narena.attributes.animation_mixer    ",
    "content": "class AnimationMixer(arena.attributes.animation.Animation): AnimationMixer attribute class to manage its properties in the ARENA: A list of available animations can usually be found by inspecting the model file or its documentation. All animations will play by default. To play only a specific set of animations, use wildcards: animation-mixer='clip: run_*'. More properties at https://github.com/n5ro/aframe-extras/tree/master/src/loaders#animation A-Frame Extras Animation. Usage: animation_mixer=AnimationMixer(...) . Parameters . | bool clampWhenFinished: If true, halts the animation at the last frame. (optional) | str clip: Name of the animation clip(s) to play. Accepts wildcards. Defaults to '*' (optional) | float crossFadeDuration: Duration of cross-fades between clips, in seconds. (optional) | float duration: Duration of the animation, in seconds (0 = auto). (optional) | str loop: In repeat and pingpong modes, the clip plays once plus the specified number of repetitions. For pingpong, every second clip plays in reverse. Allows [once, repeat, pingpong] Defaults to 'repeat' (optional) | str repetitions: Number of times to play the clip, in addition to the first play (empty string = Infinity). Repetitions are ignored for loop: once. (optional) | float startAt: Sets the start of an animation to a specific time (in milliseconds). This is useful when you need to jump to an exact time in an animation. The input parameter will be scaled by the mixer's timeScale. (optional) | float timeScale: Scaling factor for playback speed. A value of 0 causes the animation to pause. Negative values cause the animation to play backwards. Defaults to '1' (optional) | . AnimationMixer(**kwargs) Inherited Members . arena.base_object.BaseObject add json_encode json ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/animation_mixer.html",
    "relUrl": "/content/python-api/attributes/animation_mixer.html"
  },"35": {
    "doc": "arena.attributes.animation_mixer",
    "title": "arena.attributes.animation_mixer",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/animation_mixer.html",
    "relUrl": "/content/python-api/attributes/animation_mixer.html"
  },"36": {
    "doc": "Animations and Morphs",
    "title": "Animations and GLTF Morphs in arena-py",
    "content": "Dispatching and running animations and GLTF 3D Morphs. ",
    "url": "https://docs.arenaxr.org/content/python/animations.html#animations-and-gltf-morphs-in-arena-py",
    "relUrl": "/content/python/animations.html#animations-and-gltf-morphs-in-arena-py"
  },"37": {
    "doc": "Animations and Morphs",
    "title": "Animations",
    "content": "Dispatching Animations . You can add animations to objects that will run when scene.run_animations(...) is called: . obj = Box() obj.dispatch_animation( Animation( property=\"rotation\", start=(0,0,0), end=(0,180,0), easing=\"linear\", dur=1000 ) ) scene.run_animations(obj) # this will cause the animation to be run . You can also dispatch multiple Animations: . obj = Box() obj.dispatch_animation( [ Animation( property=\"rotation\", start=(0,0,0), end=(0,180,0), easing=\"linear\", dur=1000 ), Animation( property=\"position\", start=(0,0,-5), end=(0,0,-10), easing=\"linear\", dur=1000 ) ] ) scene.run_animations(obj) # this will cause all the dispatched animations to be run. Note that the tweening of these properties occur browser-clientside. For the position property example above, at the point halfway through the animation duration, the Position property will not be updated to (0, 0, -7.5) internally. Instead, it will update to its end position at the end of the animation duration. This final position update may also change if in the middle of the duration, the position property is separately updated or if a second animation is dispatched that also changes position. Animation vs AnimationMixer . AnimationMixers are special animations specific to a 3D model. These can be run the same way as regular Animations. See the Animation component. xr_logo.dispatch_animation( AnimationMixer(clip=\"*\", loop=\"repeat\") ) scene.run_animations(xr_logo) # this will cause the 3D model to play its animations . Permanent Animations . Sometimes you want Animations to be associated with the object. You can do this by adding the Animation as an Attribute to the Object: . # this makes it such that xr_logo will ALWAYS play the animation when someone joins # your ARENA scene, since the animation is now associated with that object: xr_logo.update_attributes( animation_mixer=AnimationMixer( clip=\"*\", loop=\"repeat\" ) ) . ",
    "url": "https://docs.arenaxr.org/content/python/animations.html#animations",
    "relUrl": "/content/python/animations.html#animations"
  },"38": {
    "doc": "Animations and Morphs",
    "title": "GLTF Morphs",
    "content": "Morph and update_morph . GLTF morphs can be created with the Morph class, and can be added to an object with the update_morph method: . # create list of Morphs open_eye_morph = [Morph(morphtarget=\"eyeTop\",value=0.0), Morph(morphtarget=\"eyeBottom\",value=0.0)] xr_logo.update_morph(open_eye_morph) # accepts Morphs and lists of Morph . ",
    "url": "https://docs.arenaxr.org/content/python/animations.html#gltf-morphs",
    "relUrl": "/content/python/animations.html#gltf-morphs"
  },"39": {
    "doc": "Animations and Morphs",
    "title": "Animations and Morphs",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/python/animations.html",
    "relUrl": "/content/python/animations.html"
  },"40": {
    "doc": "ARENA A-Frame Components",
    "title": "ARENA Specific A-Frame Components",
    "content": "These are the A-Frame components added to support ARENA core functionality. ",
    "url": "https://docs.arenaxr.org/content/schemas/arena-aframe-components.html#arena-specific-a-frame-components",
    "relUrl": "/content/schemas/arena-aframe-components.html#arena-specific-a-frame-components"
  },"41": {
    "doc": "ARENA A-Frame Components",
    "title": "Components",
    "content": "arena-camera Tracking camera movement in real time. Emits camera pose change and VIO change events. arena-hand Tracking Hand controller movement in real time. arena-user Another user&#39;s camera in the ARENA. Handles Jitsi and display name updates. armarker ARMarker Component. Supports ARMarkers in a scene . attribution Attribution Component. Saves attribution data in any entity. The following properties can be saved. If extractAssetExtras=true (default), the attribution system attempts to extract data automatically from the model (requires models with authorship metadata; e.g. models downloaded from sketchfab have these data) . build3d-mqtt-object Create an observer to listen for changes made locally in the A-Frame Inspector and publish them to MQTT. build3d-mqtt-scene Create an observer to listen for changes made locally in the A-Frame Inspector and publish them to MQTT. click-listener Keep track of mouse events and publish corresponding events . collision-listener Listen for collisions, callback on event. Requires Physics for A-Frame VR . gesture-detector Detect multi-finger touch gestures. Publish events accordingly. Based off 8th Wall&#39;s gesture-detector . goto-url Load new URL when object is clicked . impulse One physics feature is applying an impulse to an object to set it in motion. This happens in conjunction with an event. Requires Physics for A-Frame VR . jitsi-video Apply a jitsi video to a geometry Jitsi video source can be defined using a jitsiId or (ARENA/Jitsi) display name . landmark Component-System of teleport destination Landmarks . load-scene Load scene from persistence. material-extras Allows to set extra material properties, namely texture colorspace, whether to render the material&#39;s color and render order. The properties set here access directly Three.js material. Implements a timeout scheme in lack of better management of the timing/events causing properties to not be available. network-latency Publish with qos of 2 for network graph to update latency . pcd-model Load Point Cloud Data (PCD) models using three.js example loader Point Cloud Data is a file format for Point Cloud Library. https://wikipedia.org/wiki/Point_Cloud_Library . press-and-move Press and move camera; User camera movement with the mouse. Based off wasd controls . screenshareable Screenshare-able Component. Allows an object to be screenshared upon . textinput Opens an HTML prompt when clicked. Sends text input as an event on MQTT . threejs-scene Load a THREE.js scene. THREE.js scene format is an almost direct serialization of the THREE.js objects, and can be THREE.js version-specific; you can see THREE.js version in the JS console once you open ARENA For a move portable format, using glTF is preferred. ttl Time To Live (TTL) component. When applied to an entity, the entity will remove itself from DOM after the specified number of seconds. Update is allowed, which will reset the timer to start from that moment. video-control Adds a video to an entity and controls its playback. ",
    "url": "https://docs.arenaxr.org/content/schemas/arena-aframe-components.html#components",
    "relUrl": "/content/schemas/arena-aframe-components.html#components"
  },"42": {
    "doc": "ARENA A-Frame Components",
    "title": "Functions",
    "content": "jitsiStatsLocalCallback(e) Called when Jitsi local stats are updated, used to save local status for stats-monitor. ",
    "url": "https://docs.arenaxr.org/content/schemas/arena-aframe-components.html#functions",
    "relUrl": "/content/schemas/arena-aframe-components.html#functions"
  },"43": {
    "doc": "ARENA A-Frame Components",
    "title": "arena-camera",
    "content": "Tracking camera movement in real time. Emits camera pose change and VIO change events. Properties . | Name | Type | Description | . | enabled | boolean | Indicates whether camera tracking is enabled. | . | vioEnabled | boolean | Indicates whether to publish VIO on every tick (if true). | . | displayName | string | User display name (used to publish camera data). | . | color | string | Head text color. | . | rotation | Array.&lt;number&gt; | Last camera rotation value. | . | position | Array.&lt;number&gt; | Last camera position value. | . | vioRotation | Array.&lt;number&gt; | Last VIO rotation value. | . | vioPosition | Array.&lt;number&gt; | Last VIO position value. | . | showStats | boolean | Display camera position on the screen. | . ",
    "url": "https://docs.arenaxr.org/content/schemas/arena-aframe-components.html#arena-camera",
    "relUrl": "/content/schemas/arena-aframe-components.html#arena-camera"
  },"44": {
    "doc": "ARENA A-Frame Components",
    "title": "arena-hand",
    "content": "Tracking Hand controller movement in real time. Properties . | Name | Type | Description | . | enabled | boolean | Controller enabled. | . | hand | string | Controller hand. | . ",
    "url": "https://docs.arenaxr.org/content/schemas/arena-aframe-components.html#arena-hand",
    "relUrl": "/content/schemas/arena-aframe-components.html#arena-hand"
  },"45": {
    "doc": "ARENA A-Frame Components",
    "title": "arena-user",
    "content": "Another user’s camera in the ARENA. Handles Jitsi and display name updates. Properties . | Name | Type | Default | Description | . | [color] | color | white | The color for the user’s name text. | . | [headModelPath] | string | &quot;/static/models/avatars/robobit.glb&quot; | Path to user head model | . | [presence] | string |   | type of presence for user | . | [jitsiId] | string |   | User jitsi id. | . | [displayName] | string |   | User display name. | . | [hasAudio] | boolean | false | Whether the user has audio on. | . | [hasVideo] | boolean | false | Whether the user has video on. | . ",
    "url": "https://docs.arenaxr.org/content/schemas/arena-aframe-components.html#arena-user",
    "relUrl": "/content/schemas/arena-aframe-components.html#arena-user"
  },"46": {
    "doc": "ARENA A-Frame Components",
    "title": "armarker",
    "content": "ARMarker Component. Supports ARMarkers in a scene . Properties . | Name | Type | Default | Description | . | [markertype] | string | &quot;apriltag_36h11&quot; | The marker type. One of ‘apriltag_36h11’, ‘lightanchor’, ‘uwb’ | . | [dynamic] | boolean | false | Whether tag is a static and used to for camera relocalization, or dynamically changes position | . | [publish] | boolean | false | Publish tag detections. | . | [markerid] | string |   | Marker id. Typically an integer (e.g. for AprilTag 36h11 family, an integer in the range [0, 586]) | . | [size] | number | 150 | Size of the marker (assumed to be a square), if applicable (mm). | . | [url] | string |   | A URL associated with the marker. | . | [lat] | number | 0 | Marker latitude. | . | [long] | number | 0 | Marker longitude. | . | [ele] | number | 0 | Marker elevation. | . ",
    "url": "https://docs.arenaxr.org/content/schemas/arena-aframe-components.html#armarker",
    "relUrl": "/content/schemas/arena-aframe-components.html#armarker"
  },"47": {
    "doc": "ARENA A-Frame Components",
    "title": "attribution",
    "content": "Attribution Component. Saves attribution data in any entity. The following properties can be saved. If extractAssetExtras=true (default), the attribution system attempts to extract data automatically from the model (requires models with authorship metadata; e.g. models downloaded from sketchfab have these data) . Properties . | Name | Type | Default | Description | . | [author] | string | &quot;Unknown&quot; | Author name; e.g. “Vaptor-Studio” | . | [authorURL] | string |   | Author homepage/profile; e.g. https://sketchfab.com/VapTor | . | [license] | string | &quot;Unknown&quot; | License summary/short name; e.g. “CC-BY-4.0”. | . | [licenseURL] | string |   | License URL; e.g. http://creativecommons.org/licenses/by/4.0/ | . | [source] | string | &quot;Unknown&quot; | Model source e.g. “Sketchfab”. | . | [sourceURL] | string |   | Model source URL; e.g. https://sketchfab.com/models/2135501583704537907645bf723685e7 | . | [title] | string | &quot;No Title&quot; | Model title; e.g. “Spinosaurus”. | . | id | string |   | The entity id in the scene; automatically filled in on component init | . | [extractAssetExtras] | boolean | true | Extract attribution info from asset extras; will override attribution info given (default: true) | . ",
    "url": "https://docs.arenaxr.org/content/schemas/arena-aframe-components.html#attribution",
    "relUrl": "/content/schemas/arena-aframe-components.html#attribution"
  },"48": {
    "doc": "ARENA A-Frame Components",
    "title": "build3d-mqtt-object",
    "content": "Create an observer to listen for changes made locally in the A-Frame Inspector and publish them to MQTT. ",
    "url": "https://docs.arenaxr.org/content/schemas/arena-aframe-components.html#build3d-mqtt-object",
    "relUrl": "/content/schemas/arena-aframe-components.html#build3d-mqtt-object"
  },"49": {
    "doc": "ARENA A-Frame Components",
    "title": "build3d-mqtt-scene",
    "content": "Create an observer to listen for changes made locally in the A-Frame Inspector and publish them to MQTT. ",
    "url": "https://docs.arenaxr.org/content/schemas/arena-aframe-components.html#build3d-mqtt-scene",
    "relUrl": "/content/schemas/arena-aframe-components.html#build3d-mqtt-scene"
  },"50": {
    "doc": "ARENA A-Frame Components",
    "title": "click-listener",
    "content": "Keep track of mouse events and publish corresponding events . Todo . | Consolidate event listeners (they are very similar) | . ",
    "url": "https://docs.arenaxr.org/content/schemas/arena-aframe-components.html#click-listener",
    "relUrl": "/content/schemas/arena-aframe-components.html#click-listener"
  },"51": {
    "doc": "ARENA A-Frame Components",
    "title": "collision-listener",
    "content": "Listen for collisions, callback on event. Requires Physics for A-Frame VR . Requires: module:&#x27;aframe-physics-system&#x27; . ",
    "url": "https://docs.arenaxr.org/content/schemas/arena-aframe-components.html#collision-listener",
    "relUrl": "/content/schemas/arena-aframe-components.html#collision-listener"
  },"52": {
    "doc": "ARENA A-Frame Components",
    "title": "gesture-detector",
    "content": "Detect multi-finger touch gestures. Publish events accordingly. Based off 8th Wall’s gesture-detector . ",
    "url": "https://docs.arenaxr.org/content/schemas/arena-aframe-components.html#gesture-detector",
    "relUrl": "/content/schemas/arena-aframe-components.html#gesture-detector"
  },"53": {
    "doc": "ARENA A-Frame Components",
    "title": "goto-url",
    "content": "Load new URL when object is clicked . Properties . | Name | Type | Default | Description | . | on | string |   | A case-sensitive string representing the event type to listen for, e.g. ‘mousedown’, ‘mouseup’ | . | url | string |   | The destination url e.g. https://example.com | . | [dest] | string | &quot;sametab&quot; | Where to open the URL; one of ‘popup’, ‘newtab’, ‘sametab’ | . ",
    "url": "https://docs.arenaxr.org/content/schemas/arena-aframe-components.html#goto-url",
    "relUrl": "/content/schemas/arena-aframe-components.html#goto-url"
  },"54": {
    "doc": "ARENA A-Frame Components",
    "title": "impulse",
    "content": "One physics feature is applying an impulse to an object to set it in motion. This happens in conjunction with an event. Requires Physics for A-Frame VR . Requires: module:aframe-physics-system . ",
    "url": "https://docs.arenaxr.org/content/schemas/arena-aframe-components.html#impulse",
    "relUrl": "/content/schemas/arena-aframe-components.html#impulse"
  },"55": {
    "doc": "ARENA A-Frame Components",
    "title": "jitsi-video",
    "content": "Apply a jitsi video to a geometry Jitsi video source can be defined using a jitsiId or (ARENA/Jitsi) display name . Properties . | Name | Type | Description | . | [jitsiId] | string | JitsiId of the video source; If defined will override displayName | . | [displayName] | string | ARENA or Jitsi display name of the video source; Will be ignored if jitsiId is given. Editing this property requires reload | . ",
    "url": "https://docs.arenaxr.org/content/schemas/arena-aframe-components.html#jitsi-video",
    "relUrl": "/content/schemas/arena-aframe-components.html#jitsi-video"
  },"56": {
    "doc": "ARENA A-Frame Components",
    "title": "landmark",
    "content": "Component-System of teleport destination Landmarks . Properties . | Name | Type | Default | Description | . | [randomRadiusMin] | number | 0 | Min for a random range to teleport to. Max must &gt; 0 | . | [randomRadiusMax] | number | 0 | Max for a random range to teleport to. | . | [offsetPosition] | THREE.Vector3 | {0,1.6,0} | vector3 {x,y,z} to use as static teleport offset | . | [constrainToNavMesh] | string | &quot;&#x27;false&#x27;&quot; | Teleports here should snap to navmesh. [‘false’, ‘any’, ‘coplanar’] | . | [startingPosition] | boolean | false | True: use as a random scene load-in position | . | [lookAtLandmark] | boolean | true | True: After teleporting, user should rotate @ landmark | . | label | string | &quot;&#x27;&#x27;&quot; | Display label for Landmarks UI menu | . ",
    "url": "https://docs.arenaxr.org/content/schemas/arena-aframe-components.html#landmark",
    "relUrl": "/content/schemas/arena-aframe-components.html#landmark"
  },"57": {
    "doc": "ARENA A-Frame Components",
    "title": "load-scene",
    "content": "Load scene from persistence. Todo . | this component is currently not used and probably needs to be updated | . ",
    "url": "https://docs.arenaxr.org/content/schemas/arena-aframe-components.html#load-scene",
    "relUrl": "/content/schemas/arena-aframe-components.html#load-scene"
  },"58": {
    "doc": "ARENA A-Frame Components",
    "title": "material-extras",
    "content": "Allows to set extra material properties, namely texture colorspace, whether to render the material’s color and render order. The properties set here access directly Three.js material. Implements a timeout scheme in lack of better management of the timing/events causing properties to not be available. Properties . | Name | Type | Default | Description | . | [overrideSrc] | string | &quot;&#x27;&#x27;&quot; | Overrides the material in all meshes of an object (e.g. a basic shape or a GLTF). | . | [colorSpace] | string | &quot;SRGBColorSpace&quot; | The material colorspace; See Three.js material. | . | [colorWrite] | boolean | true | Whether to render the material’s color. See Three.js material. | . | [renderOrder] | number | 1 | This value allows the default rendering order of scene graph objects to be overridden. See Three.js Object3D.renderOrder. | . | [transparentOccluder] | boolean | false | If true, will set colorWrite=false and renderOrder=0 to make the material a transparent occluder. | . ",
    "url": "https://docs.arenaxr.org/content/schemas/arena-aframe-components.html#material-extras",
    "relUrl": "/content/schemas/arena-aframe-components.html#material-extras"
  },"59": {
    "doc": "ARENA A-Frame Components",
    "title": "network-latency",
    "content": "Publish with qos of 2 for network graph to update latency . Properties . | Name | Type | Default | Description | . | UPDATE_INTERVAL_MS | number | 10000 | Interval to send the periodic pings (ms) | . ",
    "url": "https://docs.arenaxr.org/content/schemas/arena-aframe-components.html#network-latency",
    "relUrl": "/content/schemas/arena-aframe-components.html#network-latency"
  },"60": {
    "doc": "ARENA A-Frame Components",
    "title": "pcd-model",
    "content": "Load Point Cloud Data (PCD) models using three.js example loader Point Cloud Data is a file format for Point Cloud Library. https://wikipedia.org/wiki/Point_Cloud_Library . ",
    "url": "https://docs.arenaxr.org/content/schemas/arena-aframe-components.html#pcd-model",
    "relUrl": "/content/schemas/arena-aframe-components.html#pcd-model"
  },"61": {
    "doc": "ARENA A-Frame Components",
    "title": "press-and-move",
    "content": "Press and move camera; User camera movement with the mouse. Based off wasd controls . Properties . | Name | Type | Default | Description | . | [acceleration] | number | 30 | Movement acceleration. | . | [enabled] | boolean | true | Is the camera movement component enabled. | . | [fly] | boolean | true | Is the camera at a fixed height (fly=false) or not (fly=true) | . ",
    "url": "https://docs.arenaxr.org/content/schemas/arena-aframe-components.html#press-and-move",
    "relUrl": "/content/schemas/arena-aframe-components.html#press-and-move"
  },"62": {
    "doc": "ARENA A-Frame Components",
    "title": "screenshareable",
    "content": "Screenshare-able Component. Allows an object to be screenshared upon . ",
    "url": "https://docs.arenaxr.org/content/schemas/arena-aframe-components.html#screenshareable",
    "relUrl": "/content/schemas/arena-aframe-components.html#screenshareable"
  },"63": {
    "doc": "ARENA A-Frame Components",
    "title": "textinput",
    "content": "Opens an HTML prompt when clicked. Sends text input as an event on MQTT . Properties . | Name | Type | Default | Description | . | [on] | string | &quot;mousedown&quot; | A case-sensitive string representing the event type to listen for, e.g. ‘mousedown’, ‘mouseup’ | . | [title] | string | &quot;Text Input&quot; | The prompt title | . | [label] | string | &quot;Input text below (max is 140 characters)&quot; | Text prompt label | . | [placeholder] | string | &quot;Type here&quot; | Text input place holder | . ",
    "url": "https://docs.arenaxr.org/content/schemas/arena-aframe-components.html#textinput",
    "relUrl": "/content/schemas/arena-aframe-components.html#textinput"
  },"64": {
    "doc": "ARENA A-Frame Components",
    "title": "threejs-scene",
    "content": "Load a THREE.js scene. THREE.js scene format is an almost direct serialization of the THREE.js objects, and can be THREE.js version-specific; you can see THREE.js version in the JS console once you open ARENA For a move portable format, using glTF is preferred. Properties . | Name | Type | Description | . | url | string | the three.js scene to load | . ",
    "url": "https://docs.arenaxr.org/content/schemas/arena-aframe-components.html#threejs-scene",
    "relUrl": "/content/schemas/arena-aframe-components.html#threejs-scene"
  },"65": {
    "doc": "ARENA A-Frame Components",
    "title": "ttl",
    "content": "Time To Live (TTL) component. When applied to an entity, the entity will remove itself from DOM after the specified number of seconds. Update is allowed, which will reset the timer to start from that moment. Properties . | Name | Type | Description | . | seconds | number | Seconds until entity is removed | . | expireAt | object | Expiration time Date object | . ",
    "url": "https://docs.arenaxr.org/content/schemas/arena-aframe-components.html#ttl",
    "relUrl": "/content/schemas/arena-aframe-components.html#ttl"
  },"66": {
    "doc": "ARENA A-Frame Components",
    "title": "video-control",
    "content": "Adds a video to an entity and controls its playback. Properties . | Name | Type | Default | Description | . | video_object | string |   | the object id of the element where to display the video | . | video_path | string |   | path/url to the video | . | [frame_object] | string |   | path/url to the keyframe to display | . | [anyone_clicks] | boolean | true | anyone clicks | . | [video_loop] | boolean | true | video loop | . | [autoplay] | boolean | false | video autoplays on load | . | [volume] | number | 1 | video sound volume | . ",
    "url": "https://docs.arenaxr.org/content/schemas/arena-aframe-components.html#video-control",
    "relUrl": "/content/schemas/arena-aframe-components.html#video-control"
  },"67": {
    "doc": "ARENA A-Frame Components",
    "title": "jitsiStatsLocalCallback(e)",
    "content": "Called when Jitsi local stats are updated, used to save local status for stats-monitor. Kind: global function . | Param | Type | Description | . | e | Object | event object; e.detail contains the callback arguments | . ",
    "url": "https://docs.arenaxr.org/content/schemas/arena-aframe-components.html#jitsistatslocalcallbacke",
    "relUrl": "/content/schemas/arena-aframe-components.html#jitsistatslocalcallbacke"
  },"68": {
    "doc": "ARENA A-Frame Components",
    "title": "ARENA A-Frame Components",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/arena-aframe-components.html",
    "relUrl": "/content/schemas/arena-aframe-components.html"
  },"69": {
    "doc": "ARENA A-Frame Systems",
    "title": "ARENA Specific A-Frame Systems",
    "content": "These are the A-Frame systems added to support ARENA core functionality. ",
    "url": "https://docs.arenaxr.org/content/schemas/arena-aframe-systems.html#arena-specific-a-frame-systems",
    "relUrl": "/content/schemas/arena-aframe-systems.html#arena-specific-a-frame-systems"
  },"70": {
    "doc": "ARENA A-Frame Systems",
    "title": "Systems",
    "content": "attribution-system Attribution Component/System. Add attribution message to any entity. Tries to extract author, license, source and title (assuming format used in sketchfab downloaded models) . Looks for authorship metadata in both asset.extras (sketchfab models) and scene.extra (manually added attributes in blender). If both asset.extras and scene.extra exist, gives preference to asset.extras. screenshareable Screenshare-able System. Allows an object to be screenshared upon . ",
    "url": "https://docs.arenaxr.org/content/schemas/arena-aframe-systems.html#systems",
    "relUrl": "/content/schemas/arena-aframe-systems.html#systems"
  },"71": {
    "doc": "ARENA A-Frame Systems",
    "title": "attribution-system",
    "content": "Attribution Component/System. Add attribution message to any entity. Tries to extract author, license, source and title (assuming format used in sketchfab downloaded models) . Looks for authorship metadata in both asset.extras (sketchfab models) and scene.extra (manually added attributes in blender). If both asset.extras and scene.extra exist, gives preference to asset.extras. Example (Sketchfab downloaded model attributes - asset.extra) . author: \"AuthorName (url-link-to-author)\" license: \"CC-BY-4.0 (url-link-to-license)\" source: \"url-link-to-model-website\" title: \"Model Title\" . | attribution-system . | registerComponent(el) ⏏ | unregisterComponent(el) ⏏ | getAttributionTable() ⇒ string ⏏ | extractAttributionFromGltfAsset(el, gltfComponent) ⏏ | parseExtrasAttributes(extras) ⇒ object ⏏ | parseAttribute(extras, attribution, attribute) ⇒ boolean ⏏ | . | . registerComponent(el) ⏏ . Register an attribution component with the system . Kind: Exported function . | Param | Type | Description | . | el | object | The attribution a-frame element to register. | . unregisterComponent(el) ⏏ . Unregister an attribution component . Kind: Exported function . | Param | Type | Description | . | el | object | The attribution a-frame element. | . getAttributionTable() ⇒ string ⏏ . Collect all attribution components and return an HTML table with credits . Kind: Exported function Returns: string - - an HTML table with the scene credits Example (Query the system for an HTML table of credits:) . document.querySelector(\"a-scene\").systems[\"attribution\"].getAttributionTable(); . extractAttributionFromGltfAsset(el, gltfComponent) ⏏ . Extract author, license, source and title assuming sketchfab format: author: “AuthorName (url-link-to-author)” license: “CC-BY-4.0 (url-link-to-license)” source: “url-link-to-model-website” title: “Model Title” . It will try to get exttributes from gltf’s asset.extras (sketchfab) and scene.userData (blender) If both are found, data will be merged with preference to properties in asset.extras . Kind: Exported function . | Param | Type | Description | . | el | object | the aframe element to set the attribution | . | gltfComponent | object | the GLTF model to extract properties from | . parseExtrasAttributes(extras) ⇒ object ⏏ . Parse author, license, source and title attributes. Kind: Exported function Returns: object - - a dictionary with the author, license, source and title parsed . | Param | Type | Description | . | extras | object | the source for the attribute data (asset.extras or scene.userData) | . parseAttribute(extras, attribution, attribute) ⇒ boolean ⏏ . Parse attribute given as parameter. Tries to find the attribute and add it to ‘attribution’ dictionary . Kind: Exported function Returns: boolean - - true/false if it could find the attribute . | Param | Type | Description | . | extras | object | the source for the attribute data | . | attribution | object | the destination attribute dictionary | . | attribute | string | which attribute to parse | . ",
    "url": "https://docs.arenaxr.org/content/schemas/arena-aframe-systems.html#attribution-system",
    "relUrl": "/content/schemas/arena-aframe-systems.html#attribution-system"
  },"72": {
    "doc": "ARENA A-Frame Systems",
    "title": "screenshareable",
    "content": "Screenshare-able System. Allows an object to be screenshared upon . ",
    "url": "https://docs.arenaxr.org/content/schemas/arena-aframe-systems.html#screenshareable",
    "relUrl": "/content/schemas/arena-aframe-systems.html#screenshareable"
  },"73": {
    "doc": "ARENA A-Frame Systems",
    "title": "ARENA A-Frame Systems",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/arena-aframe-systems.html",
    "relUrl": "/content/schemas/arena-aframe-systems.html"
  },"74": {
    "doc": "Program",
    "title": "Program",
    "content": "Program . All wire objects have a set of basic attributes {object_id, action, type, persist, data}. The data attribute defines the object-specific attributes . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/arena-program.html#program",
    "relUrl": "/content/schemas/message/arena-program.html#program"
  },"75": {
    "doc": "Program",
    "title": "Program Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | object_id | string |   | Object identifier; Must be a valid UUID. | Yes | . | action | string; One of: ['create', 'delete', 'update'] | 'create' | Message action create, update, delete. | Yes | . | persist | boolean | True | Persist this object in the database. | Yes | . | type | string; Must be: program | 'program' | ARENA program data | Yes | . | data | program |   | Object data payload; Program config data. | Yes | . Program Data Attributes . | Attribute | Type | Default | Description | Required | . | name | string |   | Name of the program in the format namespace/program-name. | Yes | . | affinity | string; One of: ['client', 'none'] | 'client' | Indicates the module affinity (client=client’s runtime; none or empty=any suitable/available runtime). | No | . | instantiate | string; One of: ['single', 'client'] | 'client' | Single instance of the program (=single), or let every client create a program instance (=client). Per client instance will create new uuid for each program. | Yes | . | filename | string |   | Filename of the entry binary. | Yes | . | filetype | string; One of: ['WA', 'PY'] | 'WA' | Type of the program (WA=WASM or PY=Python). | Yes | . | parent | string | 'pytest' | Request the orchestrator to deploy to this runtime (can be a runtime name or UUID); usually left blank. | Yes | . | args | array |   | Command-line arguments (passed in argv). Supports variables: ${scene}, ${mqtth}, ${cameraid}, ${username}, ${runtimeid}, ${moduleid}, ${query-string-key}. | No | . | env | array | ['MID=${moduleid}', 'SCENE=${scene}', 'NAMESPACE=${namespace}', 'MQTTH=${mqtth}', 'REALM=realm'] | Environment variables. Supports variables: ${scene}, ${namespace}, ${mqtth}, ${cameraid}, ${username}, ${runtimeid}, ${moduleid}, ${query-string-key}. | Yes | . | channels | array | [{'path': '/ch/${scene}', 'type': 'pubsub', 'mode': 'rw', 'params': {'topic': 'realm/s/${scene}'}}] | Channels describe files representing access to IO from pubsub and client sockets (possibly more in the future; currently only supported for WASM programs). | No | . | run_info | object |   | Program execution info, added at runtime. | No | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/arena-program.html#program-attributes",
    "relUrl": "/content/schemas/message/arena-program.html#program-attributes"
  },"76": {
    "doc": "Program",
    "title": "Program",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/arena-program.html",
    "relUrl": "/content/schemas/message/arena-program.html"
  },"77": {
    "doc": "Scene Config",
    "title": "Scene Config",
    "content": "Scene Config . All wire objects have a set of basic attributes {object_id, action, type, persist, data}. The data attribute defines the object-specific attributes . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/arena-scene-options.html#scene-config",
    "relUrl": "/content/schemas/message/arena-scene-options.html#scene-config"
  },"78": {
    "doc": "Scene Config",
    "title": "Scene Config Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | object_id | string | 'scene-options' | A uuid or otherwise unique identifier for this object. | Yes | . | persist | boolean | True | Persist this object in the database. | Yes | . | type | string; Must be: scene-options | 'scene-options' | ARENA scene options | Yes | . | action | string; One of: ['create', 'delete', 'update'] | 'create' | Message action create, update, delete. | Yes | . | data | Scene Config data |   | Scene Config Data | Yes | . Scene Config Data Attributes . | Attribute | Type | Default | Description | Required | . | env-presets | env-presets |   | A-Frame Environment presets. | Yes | . | renderer-settings | renderer-settings |   | These settings are fed into three.js WebGLRenderer properties. | No | . | scene-options | scene-options |   | ARENA Scene Options. | Yes | . | post-processing | post-processing |   | These effects are enabled in desktop and XR views. | No | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/arena-scene-options.html#scene-config-attributes",
    "relUrl": "/content/schemas/message/arena-scene-options.html#scene-config-attributes"
  },"79": {
    "doc": "Scene Config",
    "title": "Scene Config",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/arena-scene-options.html",
    "relUrl": "/content/schemas/message/arena-scene-options.html"
  },"80": {
    "doc": "User Avatar",
    "title": "User Avatar",
    "content": "Another user’s camera in the ARENA. Handles Jitsi and display name updates. ",
    "url": "https://docs.arenaxr.org/content/schemas/message/arena-user.html#user-avatar",
    "relUrl": "/content/schemas/message/arena-user.html#user-avatar"
  },"81": {
    "doc": "User Avatar",
    "title": "User Avatar Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | displayName | string | '' | User display name. | Yes | . | color | string | 'white' | The color for the user’s name text. | Yes | . | headModelPath | string | '/static/models/avatars/robobit.glb' | Path to user avatar head model. | Yes | . | presence | string; One of: ['Standard', 'Portal'] | 'Standard' | Type of presence for user. | No | . | jitsiId | string | '' | User Jitsi ID. | No | . | hasAudio | bool | False | Whether the user has audio on. | No | . | hasVideo | bool | False | Whether the user has video on. | No | . | hasAvatar | bool | False | Whether the user has facial feature capture on. | No | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/arena-user.html#user-avatar-attributes",
    "relUrl": "/content/schemas/message/arena-user.html#user-avatar-attributes"
  },"82": {
    "doc": "User Avatar",
    "title": "User Avatar",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/arena-user.html",
    "relUrl": "/content/schemas/message/arena-user.html"
  },"83": {
    "doc": "Python API",
    "title": "\narena    ",
    "content": "arena-py . Draw objects and run programs in the ARENA using Python! . ",
    "url": "https://docs.arenaxr.org/content/python-api/arena.html",
    "relUrl": "/content/python-api/arena.html"
  },"84": {
    "doc": "Python API",
    "title": "Python API",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/arena.html",
    "relUrl": "/content/python-api/arena.html"
  },"85": {
    "doc": "arena.arena_mqtt",
    "title": "\narena.arena_mqtt    ",
    "content": "class ArenaMQTT: Wrapper around Paho MQTT client and EventLoop. ArenaMQTT( web_host=&#39;arenaxr.org&#39;, realm=&#39;realm&#39;, network_latency_interval=10000, on_msg_callback=None, end_program_callback=None, video=False, debug=False, **kwargs) scene = None device = None auth = None debug username remote_auth_token mqttc_id config_url config_data mqtt_host subscribe_topic latency_topic ignore_topic mqttc can_publish on_msg_callback end_program_callback event_loop mqtt_connect_evt msg_queue def generate_client_id(self): Returns a random 6 digit id . def network_latency_update(self): Update client latency in $NETWORK/latency . def run_once(self, func=None, **kwargs): Runs a user-defined function on startup . def run_after_interval(self, func=None, interval_ms=1000, **kwargs): Runs a user-defined function after a interval_ms milliseconds . def run_async(self, func=None, **kwargs): Runs a user defined aynscio function . def run_forever(self, func=None, interval_ms=1000, **kwargs): Runs a function every interval_ms milliseconds . def run_tasks(self): Run event loop . def stop_tasks(self): Stop event loop . async def sleep(self, interval_ms): Public function for sleeping in async functions . def on_connect(self, client, userdata, flags, rc): Paho MQTT client on_connect callback . def on_message(self, client, userdata, msg): async def process_message(self): def on_disconnect(self, client, userdata, rc): Paho MQTT client on_disconnect callback . def disconnect(self): Disconnects Paho MQTT client . def message_callback_add(self, sub, callback): Subscribes to new topic and adds callback . def message_callback_remove(self, sub): Unsubscribes to topic and removes callback . def rcv_queue_len(self): Return receive queue length . def pub_queue_len(self): Return publish queue length . def client_id(self): Return client id . ",
    "url": "https://docs.arenaxr.org/content/python-api/arena_mqtt.html",
    "relUrl": "/content/python-api/arena_mqtt.html"
  },"86": {
    "doc": "arena.arena_mqtt",
    "title": "arena.arena_mqtt",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/arena_mqtt.html",
    "relUrl": "/content/python-api/arena_mqtt.html"
  },"87": {
    "doc": "arena.objects.arena_object",
    "title": "\narena.objects.arena_object    ",
    "content": "class Object(arena.base_object.BaseObject): Object class. Defines a generic object in the ARENA. Object(evt_handler=None, update_handler=None, **kwargs) type = &#39;object&#39; object_type = &#39;entity&#39; all_objects = {} evt_handler update_handler animations delayed_prop_tasks def update_attributes(self, evt_handler=None, update_handler=None, **kwargs): def dispatch_animation(self, animation): def remove_animation_at_index(self, idx): def clear_animations(self): clickable def json_preprocess(self, **kwargs): def json_postprocess(self, json_payload, json_data): def json(self, **kwargs): @classmethod def get(cls, object_id): @classmethod def add(cls, obj): @classmethod def remove(cls, obj): @classmethod def exists(cls, object_id): Inherited Members . arena.base_object.BaseObject json_encode ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/arena_object.html",
    "relUrl": "/content/python-api/objects/arena_object.html"
  },"88": {
    "doc": "arena.objects.arena_object",
    "title": "arena.objects.arena_object",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/arena_object.html",
    "relUrl": "/content/python-api/objects/arena_object.html"
  },"89": {
    "doc": "arena.scripts.arena_py_permissions",
    "title": "\narena.scripts.arena_py_permissions    ",
    "content": "def main(): ",
    "url": "https://docs.arenaxr.org/content/python-api/scripts/arena_py_permissions.html",
    "relUrl": "/content/python-api/scripts/arena_py_permissions.html"
  },"90": {
    "doc": "arena.scripts.arena_py_permissions",
    "title": "arena.scripts.arena_py_permissions",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/scripts/arena_py_permissions.html",
    "relUrl": "/content/python-api/scripts/arena_py_permissions.html"
  },"91": {
    "doc": "arena.scripts.arena_py_pub",
    "title": "\narena.scripts.arena_py_pub    ",
    "content": "arena-py-pub: Helper script for ARENA MQTT CLI publish . def main(): ",
    "url": "https://docs.arenaxr.org/content/python-api/scripts/arena_py_pub.html",
    "relUrl": "/content/python-api/scripts/arena_py_pub.html"
  },"92": {
    "doc": "arena.scripts.arena_py_pub",
    "title": "arena.scripts.arena_py_pub",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/scripts/arena_py_pub.html",
    "relUrl": "/content/python-api/scripts/arena_py_pub.html"
  },"93": {
    "doc": "arena.scripts.arena_py_signout",
    "title": "\narena.scripts.arena_py_signout    ",
    "content": "def main(): ",
    "url": "https://docs.arenaxr.org/content/python-api/scripts/arena_py_signout.html",
    "relUrl": "/content/python-api/scripts/arena_py_signout.html"
  },"94": {
    "doc": "arena.scripts.arena_py_signout",
    "title": "arena.scripts.arena_py_signout",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/scripts/arena_py_signout.html",
    "relUrl": "/content/python-api/scripts/arena_py_signout.html"
  },"95": {
    "doc": "arena.scripts.arena_py_sub",
    "title": "\narena.scripts.arena_py_sub    ",
    "content": "arena-py-sub: Helper script for ARENA MQTT CLI subscribe . def main(): ",
    "url": "https://docs.arenaxr.org/content/python-api/scripts/arena_py_sub.html",
    "relUrl": "/content/python-api/scripts/arena_py_sub.html"
  },"96": {
    "doc": "arena.scripts.arena_py_sub",
    "title": "arena.scripts.arena_py_sub",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/scripts/arena_py_sub.html",
    "relUrl": "/content/python-api/scripts/arena_py_sub.html"
  },"97": {
    "doc": "arena.scripts.arena_py_token",
    "title": "\narena.scripts.arena_py_token    ",
    "content": "def main(): ",
    "url": "https://docs.arenaxr.org/content/python-api/scripts/arena_py_token.html",
    "relUrl": "/content/python-api/scripts/arena_py_token.html"
  },"98": {
    "doc": "arena.scripts.arena_py_token",
    "title": "arena.scripts.arena_py_token",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/scripts/arena_py_token.html",
    "relUrl": "/content/python-api/scripts/arena_py_token.html"
  },"99": {
    "doc": "arena.utils.arena_telemetry",
    "title": "\narena.utils.arena_telemetry    ",
    "content": "The ArenaTelemetry generates traces, metrics, and logs using OpenTelemetry (OTEL). It can export using OTEL's protocol (OTLP), send JSON OTEL spans to MQTT, or to the console. The :envvar:ARENA_TELEMETRY environment variable enables the telemetry. The :envvar:OTLP_ENDPOINT environment variable defines the OTLP endpoint when OTLP is used. TRACE_TOPIC_DFT = &#39;realm/ns/scene/t/traces&#39; class MQTTSpanExporter(opentelemetry.sdk.trace.export.SpanExporter): Implementation of SpanExporter that sends spans to MQTT . MQTTSpanExporter( topic: Optional[str] = &#39;realm/ns/scene/t/traces&#39;, service_name: Optional[str] = None, formatter: Callable[[opentelemetry.sdk.trace.ReadableSpan], str] = &lt;function MQTTSpanExporter.&lt;lambda&gt;&gt;) publish publish_flush topic formatter service_name def export( self, spans: Sequence[opentelemetry.sdk.trace.ReadableSpan]) -&gt; opentelemetry.sdk.trace.export.SpanExportResult: Exports a batch of telemetry data. Args: spans: The list of opentelemetry.trace.Span objects to be exported . Returns: The result of the export . def force_flush(self, timeout_millis: int = 30000) -&gt; bool: Hint to ensure that the export of any spans the exporter has received prior to the call to ForceFlush SHOULD be completed as soon as possible, preferably before returning from this method. def shutdown(self) -&gt; None: Shuts down the exporter. Called when the SDK is shut down. class ArenaTelemetry: Implementation of ARENA telemetry. According to :envvar:ARENA_TELEMETRY, exports using OTLP, send JSON OTEL spans to MQTT, or to the console. ArenaTelemetry(name=&#39;./scripts/pdoc/make-pdoc.py&#39;, id=None) Return an ArenaTelemetry using given service name and id Provides utility calls that wrap open telemetry functionality to start spans, log events, and other. Creates a parent span for all the spans related to the program. Args: name: name of the service used with the telemetry backend id: additional id used with the telemetry backend . parent_span: opentelemetry.sdk.trace.Span = None tracer parent_span_ctx def exit(self, error_msg=None): Record exit status on error . def start_span(self, name, **kwargs): Wrapper to otel start_as_current_span; force context to be parent span . def start_process_msg_span(self, obj_id, action, **kwargs): Wrapper to otel start_as_current_span to start a process message span; force context to be parent span . def start_publish_span(self, obj_id, action, type, **kwargs): Wrapper to otel start_as_current_span to start a process message span; force context to be parent span . def add_event(self, name, span=None, print_msg=True, **kwargs): Add event to given or current span . def set_error(self, error_msg, span=None, print_msg=True): Set error on given or current span . ",
    "url": "https://docs.arenaxr.org/content/python-api/utils/arena_telemetry.html",
    "relUrl": "/content/python-api/utils/arena_telemetry.html"
  },"100": {
    "doc": "arena.utils.arena_telemetry",
    "title": "arena.utils.arena_telemetry",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/utils/arena_telemetry.html",
    "relUrl": "/content/python-api/utils/arena_telemetry.html"
  },"101": {
    "doc": "ARENAUI Button Panel",
    "title": "ARENAUI Button Panel",
    "content": "ARENAUI element which displays a vertical or horizontal panel of buttons. All wire objects have a set of basic attributes {object_id, action, type, persist, data}. The data attribute defines the object-specific attributes . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/arenaui-button-panel.html#arenaui-button-panel",
    "relUrl": "/content/schemas/message/arenaui-button-panel.html#arenaui-button-panel"
  },"102": {
    "doc": "ARENAUI Button Panel",
    "title": "ARENAUI Button Panel Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | object_id | string |   | A uuid or otherwise unique identifier for this object. | Yes | . | persist | boolean | True | Persist this object in the database. | Yes | . | type | string; Must be: object | 'object' | AFrame 3D Object | Yes | . | action | string; One of: ['create', 'delete', 'update'] | 'create' | Message action create, update, delete. | Yes | . | ttl | integer |   | When applied to an entity, the entity will remove itself from DOM after the specified number of seconds. Update is allowed, which will reset the timer to start from that moment. | No | . | data | ARENAUI Button Panel data |   | Button Panel Data | Yes | . ARENAUI Button Panel Data Attributes . | Attribute | Type | Default | Description | Required | . | object_type | string; Must be: arenaui-button-panel | arenaui-button-panel | 3D object type. | Yes | . | buttons | array | [{'name': 'Option 1'}, {'name': 'Option 2'}] | Buttons | Yes | . | title | string | '' | Title to display above buttons (optional). | Yes | . | vertical | boolean | False | Vertical button layout | Yes | . | font | string; One of: ['Roboto', 'Roboto-Mono'] | 'Roboto' | Font to use for button text. | No | . | theme | string; One of: ['light', 'dark'] | 'light' | Color Theme | No | . | materialSides | string; One of: ['both', 'front'] | 'both' | Which sides display the rendered UI material | No | . | parent | string |   | Parent’s object_id. Child objects inherit attributes of their parent, for example scale and translation. | No | . | position | position |   | 3D object position. | Yes | . | rotation | rotation |   | 3D object rotation in quaternion representation; Right-handed coordinate system. Euler degrees are deprecated in wire message format. | Yes | . | scale | scale |   | 3D object scale. | No | . | animation | animation |   | Animate and tween values. | No | . | armarker | armarker |   | A location marker (such as an AprilTag, a lightAnchor, or an UWB tag), used to anchor scenes, or scene objects, in the real world. | No | . | click-listener | click-listener |   | Object will listen for mouse events like clicks. | No | . | box-collision-listener | box-collision-listener |   | Listen for bounding-box collisions with user camera and hands. Must be applied to an object or model with geometric mesh. Collisions are determined by course bounding-box overlaps. | No | . | collision-listener | string |   | Name of the collision-listener, default can be empty string. Collisions trigger click events. | No | . | blip | blip |   | When the object is created or deleted, it will animate in/out of the scene instead of appearing/disappearing instantly. Must have a geometric mesh. | No | . | static-body | static-body |   | A fixed-position or animated object. Other objects may collide with static bodies, but static bodies themselves are unaffected by gravity and collisions. | No | . | dynamic-body | dynamic-body |   | A freely-moving object. Dynamic bodies have mass, collide with other objects, bounce or slow during collisions, and fall if gravity is enabled. | No | . | goto-landmark | goto-landmark |   | Teleports user to the landmark with the given name. Requires click-listener. | No | . | goto-url | goto-url |   | Load new URL when object is clicked. Requires click-listener. | No | . | hide-on-enter-ar | boolean; Must be: True | True | Hide object when entering AR. Remove component to not hide. | No | . | hide-on-enter-vr | boolean; Must be: True | True | Hide object when entering VR. Remove component to not hide. | No | . | show-on-enter-ar | boolean; Must be: True | True | Show object when entering AR. Hidden otherwise. | No | . | show-on-enter-vr | boolean; Must be: True | True | Show object when entering VR. Hidden otherwise. | No | . | impulse | impulse |   | Apply an impulse to an object to set it in motion. This happens in conjunction with an event. Requires click-listener and physics. | No | . | landmark | landmark |   | Define entities as a landmark; Landmarks appears in the landmark list and you can move (teleport) to them; You can define the behavior of the teleport: if you will be at a fixed or random distance, looking at the landmark, fixed offset or if it is constrained by a navmesh (when it exists). | No | . | material-extras | material-extras |   | Define extra material properties, namely texture encoding, whether to render the material’s color and render order. | No | . | shadow | shadow |   | The shadow component enables shadows for an entity and its children. Adding the shadow component alone is not enough to display shadows in your scene. We must have at least one light with castShadow: true enabled. | No | . | sound | sound |   | The sound component defines the entity as a source of sound or audio. The sound component can be positional and is thus affected by the component’s position. | No | . | textinput | textinput |   | Opens an HTML prompt when clicked. Sends text input as an event on MQTT. Requires click-listener. | No | . | url | string |   | Use File Store paths under ‘store/users/username’, see CDN and other storage options in the description above. | No | . | remote-render | remote-render |   | Whether or not an object should be remote rendered [Experimental]. | No | . | video-control | video-control |   | Adds a video to an entity and controls its playback. | No | . | attribution | attribution |   | Attribution Component. Saves attribution data in any entity. | No | . | spe-particles | spe-particles |   | GPU based particle systems in A-Frame. | No | . | look-at | string |   | The look-at component defines the behavior for an entity to dynamically rotate or face towards another entity or position. Use ‘#my-camera’ to face the user camera, otherwise can take either a vec3 position or a query selector to another entity. | No | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/arenaui-button-panel.html#arenaui-button-panel-attributes",
    "relUrl": "/content/schemas/message/arenaui-button-panel.html#arenaui-button-panel-attributes"
  },"103": {
    "doc": "ARENAUI Button Panel",
    "title": "ARENAUI Button Panel",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/arenaui-button-panel.html",
    "relUrl": "/content/schemas/message/arenaui-button-panel.html"
  },"104": {
    "doc": "ARENAUI Card Panel",
    "title": "ARENAUI Card Panel",
    "content": "ARENAUI element which displays text and optionally an image. All wire objects have a set of basic attributes {object_id, action, type, persist, data}. The data attribute defines the object-specific attributes . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/arenaui-card.html#arenaui-card-panel",
    "relUrl": "/content/schemas/message/arenaui-card.html#arenaui-card-panel"
  },"105": {
    "doc": "ARENAUI Card Panel",
    "title": "ARENAUI Card Panel Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | object_id | string |   | A uuid or otherwise unique identifier for this object. | Yes | . | persist | boolean | True | Persist this object in the database. | Yes | . | type | string; Must be: object | 'object' | AFrame 3D Object | Yes | . | action | string; One of: ['create', 'delete', 'update'] | 'create' | Message action create, update, delete. | Yes | . | ttl | integer |   | When applied to an entity, the entity will remove itself from DOM after the specified number of seconds. Update is allowed, which will reset the timer to start from that moment. | No | . | data | ARENAUI Card Panel data |   | Card Panel Data | Yes | . ARENAUI Card Panel Data Attributes . | Attribute | Type | Default | Description | Required | . | object_type | string; Must be: arenaui-card | arenaui-card | 3D object type. | Yes | . | title | string | '' | Title | Yes | . | body | string | '' | This is the text body of the card. | Yes | . | bodyAlign | string; One of: ['left', 'center', 'right', 'justify'] | 'left' | Body Text Alignment | No | . | img | string | '' | This image will be embedded alongside the body text. | Yes | . | imgCaption | string | '' | This will caption the image. | No | . | imgDirection | string; One of: ['left', 'right'] | 'right' | Image Direction | No | . | imgSize | string; One of: ['cover', 'contain', 'stretch'] | 'cover' | Image sizing | No | . | textImageRatio | number | 0.5 | Text to Image Width Ratio | No | . | fontSize | number | 0.035 | Font Size | No | . | widthScale | number | 1 | Width scale multiplier | No | . | closeButton | boolean | False | Show close button | No | . | font | string; One of: ['Roboto', 'Roboto-Mono'] | 'Roboto' | Font to use for button text. | No | . | theme | string; One of: ['light', 'dark'] | 'light' | Color Theme | No | . | materialSides | string; One of: ['both', 'front'] | 'both' | Which sides display the rendered UI material | No | . | parent | string |   | Parent’s object_id. Child objects inherit attributes of their parent, for example scale and translation. | No | . | position | position |   | 3D object position. | Yes | . | rotation | rotation |   | 3D object rotation in quaternion representation; Right-handed coordinate system. Euler degrees are deprecated in wire message format. | Yes | . | scale | scale |   | 3D object scale. | No | . | animation | animation |   | Animate and tween values. | No | . | armarker | armarker |   | A location marker (such as an AprilTag, a lightAnchor, or an UWB tag), used to anchor scenes, or scene objects, in the real world. | No | . | click-listener | click-listener |   | Object will listen for mouse events like clicks. | No | . | box-collision-listener | box-collision-listener |   | Listen for bounding-box collisions with user camera and hands. Must be applied to an object or model with geometric mesh. Collisions are determined by course bounding-box overlaps. | No | . | collision-listener | string |   | Name of the collision-listener, default can be empty string. Collisions trigger click events. | No | . | blip | blip |   | When the object is created or deleted, it will animate in/out of the scene instead of appearing/disappearing instantly. Must have a geometric mesh. | No | . | static-body | static-body |   | A fixed-position or animated object. Other objects may collide with static bodies, but static bodies themselves are unaffected by gravity and collisions. | No | . | dynamic-body | dynamic-body |   | A freely-moving object. Dynamic bodies have mass, collide with other objects, bounce or slow during collisions, and fall if gravity is enabled. | No | . | goto-landmark | goto-landmark |   | Teleports user to the landmark with the given name. Requires click-listener. | No | . | goto-url | goto-url |   | Load new URL when object is clicked. Requires click-listener. | No | . | hide-on-enter-ar | boolean; Must be: True | True | Hide object when entering AR. Remove component to not hide. | No | . | hide-on-enter-vr | boolean; Must be: True | True | Hide object when entering VR. Remove component to not hide. | No | . | show-on-enter-ar | boolean; Must be: True | True | Show object when entering AR. Hidden otherwise. | No | . | show-on-enter-vr | boolean; Must be: True | True | Show object when entering VR. Hidden otherwise. | No | . | impulse | impulse |   | Apply an impulse to an object to set it in motion. This happens in conjunction with an event. Requires click-listener and physics. | No | . | landmark | landmark |   | Define entities as a landmark; Landmarks appears in the landmark list and you can move (teleport) to them; You can define the behavior of the teleport: if you will be at a fixed or random distance, looking at the landmark, fixed offset or if it is constrained by a navmesh (when it exists). | No | . | material-extras | material-extras |   | Define extra material properties, namely texture encoding, whether to render the material’s color and render order. | No | . | shadow | shadow |   | The shadow component enables shadows for an entity and its children. Adding the shadow component alone is not enough to display shadows in your scene. We must have at least one light with castShadow: true enabled. | No | . | sound | sound |   | The sound component defines the entity as a source of sound or audio. The sound component can be positional and is thus affected by the component’s position. | No | . | textinput | textinput |   | Opens an HTML prompt when clicked. Sends text input as an event on MQTT. Requires click-listener. | No | . | url | string |   | Use File Store paths under ‘store/users/username’, see CDN and other storage options in the description above. | No | . | remote-render | remote-render |   | Whether or not an object should be remote rendered [Experimental]. | No | . | video-control | video-control |   | Adds a video to an entity and controls its playback. | No | . | attribution | attribution |   | Attribution Component. Saves attribution data in any entity. | No | . | spe-particles | spe-particles |   | GPU based particle systems in A-Frame. | No | . | look-at | string |   | The look-at component defines the behavior for an entity to dynamically rotate or face towards another entity or position. Use ‘#my-camera’ to face the user camera, otherwise can take either a vec3 position or a query selector to another entity. | No | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/arenaui-card.html#arenaui-card-panel-attributes",
    "relUrl": "/content/schemas/message/arenaui-card.html#arenaui-card-panel-attributes"
  },"106": {
    "doc": "ARENAUI Card Panel",
    "title": "ARENAUI Card Panel",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/arenaui-card.html",
    "relUrl": "/content/schemas/message/arenaui-card.html"
  },"107": {
    "doc": "ARENAUI Prompt",
    "title": "ARENAUI Prompt",
    "content": "ARENAUI element which displays prompt with button actions. All wire objects have a set of basic attributes {object_id, action, type, persist, data}. The data attribute defines the object-specific attributes . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/arenaui-prompt.html#arenaui-prompt",
    "relUrl": "/content/schemas/message/arenaui-prompt.html#arenaui-prompt"
  },"108": {
    "doc": "ARENAUI Prompt",
    "title": "ARENAUI Prompt Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | object_id | string |   | A uuid or otherwise unique identifier for this object. | Yes | . | persist | boolean | True | Persist this object in the database. | Yes | . | type | string; Must be: object | 'object' | AFrame 3D Object | Yes | . | action | string; One of: ['create', 'delete', 'update'] | 'create' | Message action create, update, delete. | Yes | . | ttl | integer |   | When applied to an entity, the entity will remove itself from DOM after the specified number of seconds. Update is allowed, which will reset the timer to start from that moment. | No | . | data | ARENAUI Prompt data |   | Prompt Data | Yes | . ARENAUI Prompt Data Attributes . | Attribute | Type | Default | Description | Required | . | object_type | string; Must be: arenaui-prompt | arenaui-prompt | 3D object type. | Yes | . | title | string | 'Prompt' | Title | Yes | . | description | string | 'This is a prompt. Please confirm or cancel.' | Description | No | . | buttons | array | ['Confirm', 'Cancel'] | Buttons | Yes | . | width | number | 1.5 | Override width | Yes | . | font | string; One of: ['Roboto', 'Roboto-Mono'] | 'Roboto' | Font to use for button text. | No | . | theme | string; One of: ['light', 'dark'] | 'light' | Color Theme | No | . | materialSides | string; One of: ['both', 'front'] | 'both' | Which sides display the rendered UI material | No | . | parent | string |   | Parent’s object_id. Child objects inherit attributes of their parent, for example scale and translation. | No | . | position | position |   | 3D object position. | Yes | . | rotation | rotation |   | 3D object rotation in quaternion representation; Right-handed coordinate system. Euler degrees are deprecated in wire message format. | Yes | . | scale | scale |   | 3D object scale. | No | . | animation | animation |   | Animate and tween values. | No | . | armarker | armarker |   | A location marker (such as an AprilTag, a lightAnchor, or an UWB tag), used to anchor scenes, or scene objects, in the real world. | No | . | click-listener | click-listener |   | Object will listen for mouse events like clicks. | No | . | box-collision-listener | box-collision-listener |   | Listen for bounding-box collisions with user camera and hands. Must be applied to an object or model with geometric mesh. Collisions are determined by course bounding-box overlaps. | No | . | collision-listener | string |   | Name of the collision-listener, default can be empty string. Collisions trigger click events. | No | . | blip | blip |   | When the object is created or deleted, it will animate in/out of the scene instead of appearing/disappearing instantly. Must have a geometric mesh. | No | . | static-body | static-body |   | A fixed-position or animated object. Other objects may collide with static bodies, but static bodies themselves are unaffected by gravity and collisions. | No | . | dynamic-body | dynamic-body |   | A freely-moving object. Dynamic bodies have mass, collide with other objects, bounce or slow during collisions, and fall if gravity is enabled. | No | . | goto-landmark | goto-landmark |   | Teleports user to the landmark with the given name. Requires click-listener. | No | . | goto-url | goto-url |   | Load new URL when object is clicked. Requires click-listener. | No | . | hide-on-enter-ar | boolean; Must be: True | True | Hide object when entering AR. Remove component to not hide. | No | . | hide-on-enter-vr | boolean; Must be: True | True | Hide object when entering VR. Remove component to not hide. | No | . | show-on-enter-ar | boolean; Must be: True | True | Show object when entering AR. Hidden otherwise. | No | . | show-on-enter-vr | boolean; Must be: True | True | Show object when entering VR. Hidden otherwise. | No | . | impulse | impulse |   | Apply an impulse to an object to set it in motion. This happens in conjunction with an event. Requires click-listener and physics. | No | . | landmark | landmark |   | Define entities as a landmark; Landmarks appears in the landmark list and you can move (teleport) to them; You can define the behavior of the teleport: if you will be at a fixed or random distance, looking at the landmark, fixed offset or if it is constrained by a navmesh (when it exists). | No | . | material-extras | material-extras |   | Define extra material properties, namely texture encoding, whether to render the material’s color and render order. | No | . | shadow | shadow |   | The shadow component enables shadows for an entity and its children. Adding the shadow component alone is not enough to display shadows in your scene. We must have at least one light with castShadow: true enabled. | No | . | sound | sound |   | The sound component defines the entity as a source of sound or audio. The sound component can be positional and is thus affected by the component’s position. | No | . | textinput | textinput |   | Opens an HTML prompt when clicked. Sends text input as an event on MQTT. Requires click-listener. | No | . | url | string |   | Use File Store paths under ‘store/users/username’, see CDN and other storage options in the description above. | No | . | remote-render | remote-render |   | Whether or not an object should be remote rendered [Experimental]. | No | . | video-control | video-control |   | Adds a video to an entity and controls its playback. | No | . | attribution | attribution |   | Attribution Component. Saves attribution data in any entity. | No | . | spe-particles | spe-particles |   | GPU based particle systems in A-Frame. | No | . | look-at | string |   | The look-at component defines the behavior for an entity to dynamically rotate or face towards another entity or position. Use ‘#my-camera’ to face the user camera, otherwise can take either a vec3 position or a query selector to another entity. | No | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/arenaui-prompt.html#arenaui-prompt-attributes",
    "relUrl": "/content/schemas/message/arenaui-prompt.html#arenaui-prompt-attributes"
  },"109": {
    "doc": "ARENAUI Prompt",
    "title": "ARENAUI Prompt",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/arenaui-prompt.html",
    "relUrl": "/content/schemas/message/arenaui-prompt.html"
  },"110": {
    "doc": "arena.objects.arenaui_button_panel",
    "title": "\narena.objects.arenaui_button_panel    ",
    "content": "class ArenauiButtonPanel(arena.objects.arena_object.Object): ArenauiButtonPanel object class to manage its properties in the ARENA: ARENAUI element which displays a vertical or horizontal panel of buttons. Parameters . | list[dict] buttons: Buttons Defaults to '[{'name': 'Option 1'}, {'name': 'Option 2'}]' (optional) | str font: Font to use for button text. Allows [Roboto, Roboto-Mono] Defaults to 'Roboto' (optional) | str materialSides: Which sides display the rendered UI material Allows [both, front] Defaults to 'both' (optional) | str theme: Color Theme Allows [light, dark] Defaults to 'light' (optional) | str title: Title to display above buttons (optional). (optional) | bool vertical: Vertical button layout (optional) | . ArenauiButtonPanel(**kwargs) object_type = &#39;arenaui-button-panel&#39; def json_preprocess(self, **kwargs): Inherited Members . arena.objects.arena_object.Object type all_objects evt_handler update_handler animations delayed_prop_tasks update_attributes dispatch_animation remove_animation_at_index clear_animations clickable json_postprocess json get add remove exists arena.base_object.BaseObject json_encode class ButtonPanel(ArenauiButtonPanel): Alternate name for ArenauiButtonPanel. Inherited Members . ArenauiButtonPanel ArenauiButtonPanel object_type json_preprocess arena.objects.arena_object.Object type all_objects evt_handler update_handler animations delayed_prop_tasks update_attributes dispatch_animation remove_animation_at_index clear_animations clickable json_postprocess json get add remove exists arena.base_object.BaseObject json_encode class Button: Buttons of a ButtonPanel in the ARENA UI. Parameters . | str name: Button Name | str img: Image URl for image buttons (optional) | float size: Size of image button (optional) | float height: Height of image button, overrides size (optional) | float: Width of image button, overrides size (optional) | float borderRadius: Border radius of image button (optional) | . Button(name=&#39;Button&#39;, **kwargs) name ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/arenaui_button_panel.html",
    "relUrl": "/content/python-api/objects/arenaui_button_panel.html"
  },"111": {
    "doc": "arena.objects.arenaui_button_panel",
    "title": "arena.objects.arenaui_button_panel",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/arenaui_button_panel.html",
    "relUrl": "/content/python-api/objects/arenaui_button_panel.html"
  },"112": {
    "doc": "arena.objects.arenaui_card",
    "title": "\narena.objects.arenaui_card    ",
    "content": "class ArenauiCard(arena.objects.arena_object.Object): ArenauiCard object class to manage its properties in the ARENA: ARENAUI element which displays text and optionally an image. Parameters . | str body: This is the text body of the card. (optional) | str bodyAlign: Body Text Alignment Allows [left, center, right, justify] Defaults to 'left' (optional) | bool closeButton: Show close button (optional) | str font: Font to use for button text. Allows [Roboto, Roboto-Mono] Defaults to 'Roboto' (optional) | float fontSize: Font Size Defaults to '0.035' (optional) | str img: This image will be embedded alongside the body text. (optional) | str imgCaption: This will caption the image. (optional) | str imgDirection: Image Direction Allows [left, right] Defaults to 'right' (optional) | str imgSize: Image sizing Allows [cover, contain, stretch] Defaults to 'cover' (optional) | str materialSides: Which sides display the rendered UI material Allows [both, front] Defaults to 'both' (optional) | float textImageRatio: Text to Image Width Ratio Defaults to '0.5' (optional) | str theme: Color Theme Allows [light, dark] Defaults to 'light' (optional) | str title: Title (optional) | float widthScale: Width scale multiplier Defaults to '1' (optional) | . ArenauiCard(**kwargs) object_type = &#39;arenaui-card&#39; Inherited Members . arena.objects.arena_object.Object type all_objects evt_handler update_handler animations delayed_prop_tasks update_attributes dispatch_animation remove_animation_at_index clear_animations clickable json_preprocess json_postprocess json get add remove exists arena.base_object.BaseObject json_encode class Card(ArenauiCard): Alternate name for ArenauiCard. Inherited Members . ArenauiCard ArenauiCard object_type arena.objects.arena_object.Object type all_objects evt_handler update_handler animations delayed_prop_tasks update_attributes dispatch_animation remove_animation_at_index clear_animations clickable json_preprocess json_postprocess json get add remove exists arena.base_object.BaseObject json_encode ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/arenaui_card.html",
    "relUrl": "/content/python-api/objects/arenaui_card.html"
  },"113": {
    "doc": "arena.objects.arenaui_card",
    "title": "arena.objects.arenaui_card",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/arenaui_card.html",
    "relUrl": "/content/python-api/objects/arenaui_card.html"
  },"114": {
    "doc": "arena.objects.arenaui_prompt",
    "title": "\narena.objects.arenaui_prompt    ",
    "content": "class ArenauiPrompt(arena.objects.arena_object.Object): ArenauiPrompt object class to manage its properties in the ARENA: ARENAUI element which displays prompt with button actions. Parameters . | list[str] buttons: Buttons Defaults to '['Confirm', 'Cancel']' (optional) | str description: Description Defaults to 'This is a prompt. Please confirm or cancel.' (optional) | str font: Font to use for button text. Allows [Roboto, Roboto-Mono] Defaults to 'Roboto' (optional) | str materialSides: Which sides display the rendered UI material Allows [both, front] Defaults to 'both' (optional) | str theme: Color Theme Allows [light, dark] Defaults to 'light' (optional) | str title: Title Defaults to 'Prompt' (optional) | float width: Override width Defaults to '1.5' (optional) | . ArenauiPrompt(**kwargs) object_type = &#39;arenaui-prompt&#39; Inherited Members . arena.objects.arena_object.Object type all_objects evt_handler update_handler animations delayed_prop_tasks update_attributes dispatch_animation remove_animation_at_index clear_animations clickable json_preprocess json_postprocess json get add remove exists arena.base_object.BaseObject json_encode class Prompt(ArenauiPrompt): Alternate name for ArenauiPrompt. Inherited Members . ArenauiPrompt ArenauiPrompt object_type arena.objects.arena_object.Object type all_objects evt_handler update_handler animations delayed_prop_tasks update_attributes dispatch_animation remove_animation_at_index clear_animations clickable json_preprocess json_postprocess json get add remove exists arena.base_object.BaseObject json_encode ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/arenaui_prompt.html",
    "relUrl": "/content/python-api/objects/arenaui_prompt.html"
  },"115": {
    "doc": "arena.objects.arenaui_prompt",
    "title": "arena.objects.arenaui_prompt",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/arenaui_prompt.html",
    "relUrl": "/content/python-api/objects/arenaui_prompt.html"
  },"116": {
    "doc": "arena.attributes.armarker",
    "title": "\narena.attributes.armarker    ",
    "content": "class Armarker(arena.attributes.attribute.Attribute): Armarker attribute class to manage its properties in the ARENA: A location marker (such as an AprilTag, a lightAnchor, or an UWB tag), used to anchor scenes, or scene objects, in the real world. Usage: armarker=Armarker(...) . Parameters . | bool buildable: Whether tag has 'dynamic' toggled on click. Used to position a tag, then lock into position. (optional) | bool dynamic: Dynamic tag, not used for localization. E.g., to move object to which this ARMarker component is attached to. Requires permissions to update the scene (if dynamic=true). (optional) | float ele: Tag elevation in meters. (optional) | float lat: Tag latitude. (optional) | float long: Tag longitude. (optional) | str markerid: The marker id (e.g. for AprilTag 36h11 family, an integer in the range [0, 586]). Defaults to '0' (optional) | str markertype: The marker type, technology-based. Allows [apriltag_36h11, lightanchor, uwb, vive, optitrack] Defaults to 'apriltag_36h11' (optional) | bool publish: Publish detections. Send detections to external agents (e.g. external builder script that places new markers in the scene). If dynamic=true and publish=true, object position is not updated (left up to external agent). (optional) | float size: Tag size in millimeters. Defaults to '150' (optional) | str url: URL associated with the tag. (optional) | . Armarker(**kwargs) Inherited Members . arena.base_object.BaseObject add json_encode json ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/armarker.html",
    "relUrl": "/content/python-api/attributes/armarker.html"
  },"117": {
    "doc": "arena.attributes.armarker",
    "title": "arena.attributes.armarker",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/armarker.html",
    "relUrl": "/content/python-api/attributes/armarker.html"
  },"118": {
    "doc": "ARMarker",
    "title": "ARMarker",
    "content": "A location marker (such as an AprilTag, a lightAnchor, or an UWB tag), used to anchor scenes, or scene objects, in the real world. ",
    "url": "https://docs.arenaxr.org/content/schemas/message/armarker.html#armarker",
    "relUrl": "/content/schemas/message/armarker.html#armarker"
  },"119": {
    "doc": "ARMarker",
    "title": "ARMarker Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | publish | boolean | False | Publish detections. Send detections to external agents (e.g. external builder script that places new markers in the scene). If dynamic=true and publish=true, object position is not updated (left up to external agent). | No | . | buildable | boolean | False | Whether tag has ‘dynamic’ toggled on click. Used to position a tag, then lock into position. | Yes | . | dynamic | boolean | False | Dynamic tag, not used for localization. E.g., to move object to which this ARMarker component is attached to. Requires permissions to update the scene (if dynamic=true). | Yes | . | ele | number | 0 | Tag elevation in meters. | No | . | lat | number | 0 | Tag latitude. | No | . | long | number | 0 | Tag longitude. | No | . | markerid | string | '0' | The marker id (e.g. for AprilTag 36h11 family, an integer in the range [0, 586]). | Yes | . | markertype | string; One of: ['apriltag_36h11', 'lightanchor', 'uwb', 'vive', 'optitrack'] | 'apriltag_36h11' | The marker type, technology-based. | Yes | . | size | number | 150 | Tag size in millimeters. | Yes | . | url | string | '' | URL associated with the tag. | No | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/armarker.html#armarker-attributes",
    "relUrl": "/content/schemas/message/armarker.html#armarker-attributes"
  },"120": {
    "doc": "ARMarker",
    "title": "ARMarker",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/armarker.html",
    "relUrl": "/content/schemas/message/armarker.html"
  },"121": {
    "doc": "arena.event_loop.async_worker",
    "title": "\narena.event_loop.async_worker    ",
    "content": "class AsyncWorker(arena.event_loop.worker.Worker): Wrapper for an ARENA task that is user-defined asyncio function. async def run(self): Inherited Members . arena.event_loop.worker.Worker Worker event_loop func event args kwargs sleep print_traceback ",
    "url": "https://docs.arenaxr.org/content/python-api/event_loop/async_worker.html",
    "relUrl": "/content/python-api/event_loop/async_worker.html"
  },"122": {
    "doc": "arena.event_loop.async_worker",
    "title": "arena.event_loop.async_worker",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/event_loop/async_worker.html",
    "relUrl": "/content/python-api/event_loop/async_worker.html"
  },"123": {
    "doc": "arena.event_loop.asyncio_mqtt",
    "title": "\narena.event_loop.asyncio_mqtt    ",
    "content": "class AsyncioMQTTHelper: Adapted from: https://github.com/eclipse/paho.mqtt.python/blob/master/examples/loop_asyncio.py . AsyncioMQTTHelper(event_loop, client) event_loop loop connected client misc_loop_worker misc def on_socket_open(self, client, userdata, sock): def on_socket_close(self, client, userdata, sock): def on_socket_register_write(self, client, userdata, sock): def on_socket_unregister_write(self, client, userdata, sock): async def misc_loop(self): ",
    "url": "https://docs.arenaxr.org/content/python-api/event_loop/asyncio_mqtt.html",
    "relUrl": "/content/python-api/event_loop/asyncio_mqtt.html"
  },"124": {
    "doc": "arena.event_loop.asyncio_mqtt",
    "title": "arena.event_loop.asyncio_mqtt",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/event_loop/asyncio_mqtt.html",
    "relUrl": "/content/python-api/event_loop/asyncio_mqtt.html"
  },"125": {
    "doc": "Atmosphere",
    "title": "Atmosphere",
    "content": "You can provide your scenes with a sense of atmosphere by adding features that enhance your scene, such as: terrain, water, weather, background sounds, and other particle effects. VR-only effects will render in VR (desktop or headset), but not in AR, since the real world environment should take precedence to provide terrain and sky: . | Environment Presets | Water | . AR/VR (full XR) effects are useful in any scene: . | Weather and Particle Effects | Sounds | . ",
    "url": "https://docs.arenaxr.org/content/overview/atmosphere.html",
    "relUrl": "/content/overview/atmosphere.html"
  },"126": {
    "doc": "Atmosphere",
    "title": "Environment &amp; Presets",
    "content": "ARENA provides the aframe-environment-component to render VR scene terrain by default, and it includes dozens of parameters. Some preset parameters are included as recipes, see the forest preset below. { \"object_id\": \"scene-options\", \"type\": \"scene-options\", \"data\": { \"env-presets\": { \"active\": true, \"preset\": \"forest\" } } } . ",
    "url": "https://docs.arenaxr.org/content/overview/atmosphere.html#environment--presets",
    "relUrl": "/content/overview/atmosphere.html#environment--presets"
  },"127": {
    "doc": "Atmosphere",
    "title": "Sky, Ground, Fog",
    "content": "Many of these parameters can be individually adjusted to your needs, see the env-presets section of our scene-options schema. { \"object_id\": \"scene-options\", \"type\": \"scene-options\", \"data\": { \"env-presets\": { \"active\": true, \"preset\": \"none\", \"dressing\": \"mushrooms\", \"fog\": 0.5, \"ground\": \"hills\", \"groundTexture\": \"walkernoise\", \"lighting\": \"distant\", \"skyType\": \"atmosphere\" } } } . ",
    "url": "https://docs.arenaxr.org/content/overview/atmosphere.html#sky-ground-fog",
    "relUrl": "/content/overview/atmosphere.html#sky-ground-fog"
  },"128": {
    "doc": "Atmosphere",
    "title": "Particle Effects",
    "content": "We include the aframe-spe-particles-component to generate particle effects for weather, fire, fireworks, and more. Many of these effects from that component’s examples are on display in our particles demo scene. warning . The spe-particles component does not interact well with the scene fog component. Many env-presets enable fog &lt; 0, so you many have to manually set fog = 0, or your particle effects may not run: . { \"object_id\": \"scene-options\", \"type\": \"scene-options\", \"data\": { \"env-presets\": { \"fog\": 0 } } } . Some examples of rain, snow, dust, water, and ambient sounds can be experienced in our weather demo scene. Rain . This rain example is translated from the rain preset of aframe-particle-system-component. { \"object_id\": \"rain\", \"type\": \"object\", \"data\": { \"object_type\": \"entity\", \"spe-particles\": { \"rotation\": 3.14, \"particleCount\": 1000, \"texture\": \"static/images/textures/raindrop.png\", \"positionSpread\": { \"x\": 100, \"y\": 100, \"z\": 100 }, \"acceleration\": { \"x\": 0, \"y\": 3, \"z\": 0 }, \"accelerationSpread\": { \"x\": 2, \"y\": 1, \"z\": 2 }, \"velocitySpread\": { \"x\": 10, \"y\": 50, \"z\": 10 }, \"velocity\": { \"x\": 0, \"y\": 75, \"z\": 0 }, \"blending\": \"additive\", \"color\": [\"#ffffff\"], \"maxAge\": 1, \"size\": [0.4] } } } . Snow . This snow example is translated from the snow preset of aframe-particle-system-component. { \"object_id\": \"snow\", \"type\": \"object\", \"data\": { \"object_type\": \"entity\", \"spe-particles\": { \"rotation\": 3.14, \"texture\": \"static/images/textures/smokeparticle.png\", \"particleCount\": 200, \"positionSpread\": { \"x\": 100, \"y\": 100, \"z\": 100 }, \"acceleration\": { \"x\": 0, \"y\": 0, \"z\": 0 }, \"accelerationSpread\": { \"x\": 0.2, \"y\": 0, \"z\": 0.2 }, \"velocitySpread\": { \"x\": 2, \"y\": 0, \"z\": 2 }, \"blending\": \"additive\", \"color\": [\"#ffffff\"], \"velocity\": { \"x\": 0, \"y\": 8, \"z\": 0 }, \"maxAge\": 20 } } } . Dust . This dust example is translated from the dust preset of aframe-particle-system-component. { \"object_id\": \"dust\", \"type\": \"object\", \"data\": { \"object_type\": \"entity\", \"spe-particles\": { \"rotation\": 3.14, \"texture\": \"static/images/textures/smokeparticle.png\", \"particleCount\": 100, \"positionSpread\": { \"x\": 100, \"y\": 100, \"z\": 100 }, \"acceleration\": { \"x\": 0, \"y\": 0, \"z\": 0 }, \"accelerationSpread\": { \"x\": 0, \"y\": 0, \"z\": 0 }, \"velocitySpread\": { \"x\": 0.5, \"y\": 1, \"z\": 0.5 }, \"velocity\": { \"x\": 1, \"y\": 0.3, \"z\": 1 }, \"color\": [\"#ffffff\"], \"blending\": \"additive\", \"maxAge\": 20 } } } . Fire . Multiple particle effects can be combined to create an effect like fire, as in this smoke, sparks, and flames example from our classic render demo scene. { \"object_id\": \"smoke\", \"type\": \"object\", \"data\": { \"object_type\": \"entity\", \"spe-particles\": { \"texture\": \"static/images/textures/fog.png\", \"velocity\": { \"x\": 0.4, \"y\": 2, \"z\": 0 }, \"velocitySpread\": { \"x\": 1.4, \"y\": 0, \"z\": 1.4 }, \"particleCount\": 50, \"maxAge\": 4, \"size\": [8, 16], \"opacity\": [0, 1, 0], \"color\": [\"#666\", \"#222\"] } } } . { \"object_id\": \"sparks\", \"type\": \"object\", \"data\": { \"object_type\": \"entity\", \"spe-particles\": { \"texture\": \"static/images/textures/square.png\", \"color\": [\"yellow\", \"red\"], \"particleCount\": 10, \"maxAge\": 0.5, \"maxAgeSpread\": 0.4, \"velocity\": { \"x\": 0, \"y\": 5, \"z\": 0 }, \"velocitySpread\": { \"x\": 0, \"y\": 3, \"z\": 0 }, \"wiggle\": 1, \"wiggleSpread\": 5, \"emitterScale\": 50, \"sizeSpread\": [0.5], \"randomizeVelocity\": true } } } . { \"object_id\": \"flames\", \"type\": \"object\", \"data\": { \"object_type\": \"entity\", \"spe-particles\": { \"texture\": \"static/images/textures/explosion_sheet.png\", \"textureFrames\": { \"x\": 5, \"y\": 5 }, \"velocity\": { \"x\": 0.4, \"y\": 0.1, \"z\": 0 }, \"acceleration\": { \"x\": 0, \"y\": 2, \"z\": 0 }, \"accelerationSpread\": { \"x\": 0, \"y\": 2, \"z\": 0 }, \"velocitySpread\": { \"x\": 0.4, \"y\": 0, \"z\": 0.4 }, \"particleCount\": 15, \"maxAge\": 1, \"size\": [4, 8], \"sizeSpread\": [2], \"opacity\": [1, 0], \"wiggle\": 0, \"blending\": \"additive\" } } } . ",
    "url": "https://docs.arenaxr.org/content/overview/atmosphere.html#particle-effects",
    "relUrl": "/content/overview/atmosphere.html#particle-effects"
  },"129": {
    "doc": "Atmosphere",
    "title": "Water",
    "content": "We include the aframe-extras library, so you can make use of the ocean primitive to create water. { \"object_id\": \"ocean\", \"type\": \"object\", \"data\": { \"object_type\": \"ocean\", \"width\": 100, \"depth\": 100, \"color\": \"#7ad2f7\", \"rotation\": { \"w\": -0.70711, \"x\": 0.70711, \"y\": 0, \"z\": 0 }, \"amplitude\": 1, \"opacity\": 1 } } . ",
    "url": "https://docs.arenaxr.org/content/overview/atmosphere.html#water",
    "relUrl": "/content/overview/atmosphere.html#water"
  },"130": {
    "doc": "Atmosphere",
    "title": "Sounds",
    "content": "The a-frame sound component is a great way to create an ambient sound atmosphere for your scene. { \"object_id\": \"ambiance\", \"type\": \"object\", \"data\": { \"object_type\": \"entity\", \"sound\": { \"src\": \"store/users/wiselab/audio/ocean.mp3\", \"positional\": false, \"loop\": true, \"autoplay\": true, \"volume\": 0.1 } } } . ",
    "url": "https://docs.arenaxr.org/content/overview/atmosphere.html#sounds",
    "relUrl": "/content/overview/atmosphere.html#sounds"
  },"131": {
    "doc": "arena.attributes.attribute",
    "title": "\narena.attributes.attribute    ",
    "content": "class Attribute(arena.base_object.BaseObject): Attribute class. Defines a generic attribute (ie position, rotation, impulse, etc) in the ARENA. Inherited Members . arena.base_object.BaseObject BaseObject add json_encode json ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/attribute.html",
    "relUrl": "/content/python-api/attributes/attribute.html"
  },"132": {
    "doc": "arena.attributes.attribute",
    "title": "arena.attributes.attribute",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/attribute.html",
    "relUrl": "/content/python-api/attributes/attribute.html"
  },"133": {
    "doc": "arena.attributes",
    "title": "\narena.attributes    ",
    "content": "ATTRIBUTE_TYPE_MAP = {&#39;attribute&#39;: &lt;class &#39;arena.attributes.attribute.Attribute&#39;&gt;, &#39;color&#39;: &lt;class &#39;arena.attributes.color.Color&#39;&gt;, &#39;data&#39;: &lt;class &#39;arena.attributes.data.Data&#39;&gt;, &#39;animation&#39;: &lt;class &#39;arena.attributes.animation.Animation&#39;&gt;, &#39;animation_mixer&#39;: &lt;class &#39;arena.attributes.animation_mixer.AnimationMixer&#39;&gt;, &#39;armarker&#39;: &lt;class &#39;arena.attributes.armarker.Armarker&#39;&gt;, &#39;attribution&#39;: &lt;class &#39;arena.attributes.attribution.Attribution&#39;&gt;, &#39;blip&#39;: &lt;class &#39;arena.attributes.blip.Blip&#39;&gt;, &#39;box_collision_listener&#39;: &lt;class &#39;arena.attributes.box_collision_listener.BoxCollisionListener&#39;&gt;, &#39;click_listener&#39;: &lt;class &#39;arena.attributes.click_listener.ClickListener&#39;&gt;, &#39;dynamic_body&#39;: &lt;class &#39;arena.attributes.dynamic_body.DynamicBody&#39;&gt;, &#39;gltf_model_lod&#39;: &lt;class &#39;arena.attributes.gltf_model_lod.GltfModelLod&#39;&gt;, &#39;gltf_morph&#39;: &lt;class &#39;arena.attributes.gltf_morph.GltfMorph&#39;&gt;, &#39;goto_landmark&#39;: &lt;class &#39;arena.attributes.goto_landmark.GotoLandmark&#39;&gt;, &#39;goto_url&#39;: &lt;class &#39;arena.attributes.goto_url.GotoUrl&#39;&gt;, &#39;impulse&#39;: &lt;class &#39;arena.attributes.impulse.Impulse&#39;&gt;, &#39;jitsi_video&#39;: &lt;class &#39;arena.attributes.jitsi_video.JitsiVideo&#39;&gt;, &#39;landmark&#39;: &lt;class &#39;arena.attributes.landmark.Landmark&#39;&gt;, &#39;material&#39;: &lt;class &#39;arena.attributes.material.Material&#39;&gt;, &#39;material_extras&#39;: &lt;class &#39;arena.attributes.material_extras.MaterialExtras&#39;&gt;, &#39;multisrc&#39;: &lt;class &#39;arena.attributes.multisrc.Multisrc&#39;&gt;, &#39;position&#39;: &lt;class &#39;arena.attributes.position.Position&#39;&gt;, &#39;remote_render&#39;: &lt;class &#39;arena.attributes.remote_render.RemoteRender&#39;&gt;, &#39;rotation&#39;: &lt;class &#39;arena.attributes.rotation.Rotation&#39;&gt;, &#39;scale&#39;: &lt;class &#39;arena.attributes.scale.Scale&#39;&gt;, &#39;shadow&#39;: &lt;class &#39;arena.attributes.shadow.Shadow&#39;&gt;, &#39;sound&#39;: &lt;class &#39;arena.attributes.sound.Sound&#39;&gt;, &#39;spe_particles&#39;: &lt;class &#39;arena.attributes.spe_particles.SpeParticles&#39;&gt;, &#39;static_body&#39;: &lt;class &#39;arena.attributes.static_body.StaticBody&#39;&gt;, &#39;textinput&#39;: &lt;class &#39;arena.attributes.textinput.Textinput&#39;&gt;, &#39;video_control&#39;: &lt;class &#39;arena.attributes.video_control.VideoControl&#39;&gt;} ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes.html",
    "relUrl": "/content/python-api/attributes.html"
  },"134": {
    "doc": "arena.attributes",
    "title": "arena.attributes",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes.html",
    "relUrl": "/content/python-api/attributes.html"
  },"135": {
    "doc": "Attributes",
    "title": "Attributes in arena-py",
    "content": "Attributes are used to specify parameters for ARENA Objects. See object definition reference. ",
    "url": "https://docs.arenaxr.org/content/python/attributes.html#attributes-in-arena-py",
    "relUrl": "/content/python/attributes.html#attributes-in-arena-py"
  },"136": {
    "doc": "Attributes",
    "title": "Accessing Object Attributes",
    "content": "See Appendix for all types of Attributes. Usually, attributes (except for object_id, persist, ttl, and parent) are under the data field: . obj.object_id obj.persist ... obj.data.position obj.data.rotation ... obj.data.material # etc etc . ",
    "url": "https://docs.arenaxr.org/content/python/attributes.html#accessing-object-attributes",
    "relUrl": "/content/python/attributes.html#accessing-object-attributes"
  },"137": {
    "doc": "Attributes",
    "title": "All Attributes",
    "content": "These attributes may be applied to any ARENA object. ",
    "url": "https://docs.arenaxr.org/content/python/attributes.html#all-attributes",
    "relUrl": "/content/python/attributes.html#all-attributes"
  },"138": {
    "doc": "Attributes",
    "title": "Position",
    "content": "The position of an object can be specified by: . position=Position(x, y, z) # or position=(x, y, z) . ",
    "url": "https://docs.arenaxr.org/content/python/attributes.html#position",
    "relUrl": "/content/python/attributes.html#position"
  },"139": {
    "doc": "Attributes",
    "title": "Rotation",
    "content": "The rotation (in euler coordinates) of an object can be specified by: . rotation=Rotation(x, y, z) # or rotation=(x, y, z) . The rotation (in quaternions) of an object can be specified by: . rotation=Rotation(x, y, z, w) # note the additional \"w\" field # or rotation=(x, y, z, w) . Warning . All units for euler rotation are in degrees and quaternion rotation are in radians! . ",
    "url": "https://docs.arenaxr.org/content/python/attributes.html#rotation",
    "relUrl": "/content/python/attributes.html#rotation"
  },"140": {
    "doc": "Attributes",
    "title": "Scale",
    "content": "The scale of an object can be specified by: . scale=Scale(x, y, z) # or scale=(x, y, z) . ",
    "url": "https://docs.arenaxr.org/content/python/attributes.html#scale",
    "relUrl": "/content/python/attributes.html#scale"
  },"141": {
    "doc": "Attributes",
    "title": "Animation",
    "content": "An animation can be added to an object: . See Animations and Morphs. ",
    "url": "https://docs.arenaxr.org/content/python/attributes.html#animation",
    "relUrl": "/content/python/attributes.html#animation"
  },"142": {
    "doc": "Attributes",
    "title": "AR Marker",
    "content": "Add a armarker attribute: . armarker=Armarker(markerid, ...) . ",
    "url": "https://docs.arenaxr.org/content/python/attributes.html#ar-marker",
    "relUrl": "/content/python/attributes.html#ar-marker"
  },"143": {
    "doc": "Attributes",
    "title": "Attribution",
    "content": "Add a attribution attribute: . attribution=Attribution(...) . ",
    "url": "https://docs.arenaxr.org/content/python/attributes.html#attribution",
    "relUrl": "/content/python/attributes.html#attribution"
  },"144": {
    "doc": "Attributes",
    "title": "Blip",
    "content": "Add a blip attribute: . blip=Blip(blipin, blipout, ...) . ",
    "url": "https://docs.arenaxr.org/content/python/attributes.html#blip",
    "relUrl": "/content/python/attributes.html#blip"
  },"145": {
    "doc": "Attributes",
    "title": "Box Collision",
    "content": "Add a box-collision attribute: . box_collision_listener=BoxCollisionListener(dynamic, ...) . ",
    "url": "https://docs.arenaxr.org/content/python/attributes.html#box-collision",
    "relUrl": "/content/python/attributes.html#box-collision"
  },"146": {
    "doc": "Attributes",
    "title": "Goto Landmark",
    "content": "Add a goto-landmark attribute: . goto_landmark=GotoLandmark(landmark, on) . ",
    "url": "https://docs.arenaxr.org/content/python/attributes.html#goto-landmark",
    "relUrl": "/content/python/attributes.html#goto-landmark"
  },"147": {
    "doc": "Attributes",
    "title": "Goto Url",
    "content": "Goes to a goto-url on click. goto_url=GotoUrl(dest, on, url) . Warning . click-listener must be True for this to work! . ",
    "url": "https://docs.arenaxr.org/content/python/attributes.html#goto-url",
    "relUrl": "/content/python/attributes.html#goto-url"
  },"148": {
    "doc": "Attributes",
    "title": "Impulse",
    "content": "An impulse can be added by: . impulse=Impulse(on, force, position) . ",
    "url": "https://docs.arenaxr.org/content/python/attributes.html#impulse",
    "relUrl": "/content/python/attributes.html#impulse"
  },"149": {
    "doc": "Attributes",
    "title": "Landmark",
    "content": "Add a landmark attribute: . landmark=Landmark(label, ...) . ",
    "url": "https://docs.arenaxr.org/content/python/attributes.html#landmark",
    "relUrl": "/content/python/attributes.html#landmark"
  },"150": {
    "doc": "Attributes",
    "title": "Look At",
    "content": "Make object look-at the camera: . look_at=\"#my-camera\" . or make object look-at at a position . look_at=\"0 0 0\" . ",
    "url": "https://docs.arenaxr.org/content/python/attributes.html#look-at",
    "relUrl": "/content/python/attributes.html#look-at"
  },"151": {
    "doc": "Attributes",
    "title": "Particles",
    "content": "Add a spe-particles effect: . spe_particles=Particles(texture, color, velocity, ...) . ",
    "url": "https://docs.arenaxr.org/content/python/attributes.html#particles",
    "relUrl": "/content/python/attributes.html#particles"
  },"152": {
    "doc": "Attributes",
    "title": "Physics",
    "content": "dynamic-body and static-body can be added with: . physics=Physics(type, ...) . or . dynamic_body=DynamicBody(type, ...) . or . static_body=StaticBody(type, ...) . ",
    "url": "https://docs.arenaxr.org/content/python/attributes.html#physics",
    "relUrl": "/content/python/attributes.html#physics"
  },"153": {
    "doc": "Attributes",
    "title": "Shadow",
    "content": "Add a shadow attribute: . shadow=Shadow(cast, receive) . ",
    "url": "https://docs.arenaxr.org/content/python/attributes.html#shadow",
    "relUrl": "/content/python/attributes.html#shadow"
  },"154": {
    "doc": "Attributes",
    "title": "Sound",
    "content": "A sound can be added to an object using: . sound=Sound(src, positional, poolSize, autoplay, ...) . ",
    "url": "https://docs.arenaxr.org/content/python/attributes.html#sound",
    "relUrl": "/content/python/attributes.html#sound"
  },"155": {
    "doc": "Attributes",
    "title": "Text Input",
    "content": "textinput can be added using a keyboard with: . text_input=TextInput(on, title, label, placeholder) . ",
    "url": "https://docs.arenaxr.org/content/python/attributes.html#text-input",
    "relUrl": "/content/python/attributes.html#text-input"
  },"156": {
    "doc": "Attributes",
    "title": "Primitive Geometry Mesh Only Attributes",
    "content": "These attributes may be applied only to primitive geometric mesh ARENA objects. ",
    "url": "https://docs.arenaxr.org/content/python/attributes.html#primitive-geometry-mesh-only-attributes",
    "relUrl": "/content/python/attributes.html#primitive-geometry-mesh-only-attributes"
  },"157": {
    "doc": "Attributes",
    "title": "Color",
    "content": "The color of an object can be specified by: . material=Material(color=Color(red, green, blue)) # or material=Material(color=(red, green, blue)) . ",
    "url": "https://docs.arenaxr.org/content/python/attributes.html#color",
    "relUrl": "/content/python/attributes.html#color"
  },"158": {
    "doc": "Attributes",
    "title": "Material",
    "content": "The material (transparency and color) of an object can be set by: . material=Material(color, transparent, opacity, ...) . ",
    "url": "https://docs.arenaxr.org/content/python/attributes.html#material",
    "relUrl": "/content/python/attributes.html#material"
  },"159": {
    "doc": "Attributes",
    "title": "Jitsi Video",
    "content": "Add a jitsi-video attribute: . jitsi_video=JitsiVideo(displayName, ...) . ",
    "url": "https://docs.arenaxr.org/content/python/attributes.html#jitsi-video",
    "relUrl": "/content/python/attributes.html#jitsi-video"
  },"160": {
    "doc": "Attributes",
    "title": "Multi-Source",
    "content": "Add a multisrc attribute: . multisrc=Multisrc(srcs, srcspath) . ",
    "url": "https://docs.arenaxr.org/content/python/attributes.html#multi-source",
    "relUrl": "/content/python/attributes.html#multi-source"
  },"161": {
    "doc": "Attributes",
    "title": "Video Control",
    "content": "Add a video-control attribute: . video_control=VideoControl(video_path, video_object, autoplay, ...) . ",
    "url": "https://docs.arenaxr.org/content/python/attributes.html#video-control",
    "relUrl": "/content/python/attributes.html#video-control"
  },"162": {
    "doc": "Attributes",
    "title": "Model Only Attributes",
    "content": "These attributes may be applied only to model ARENA objects like GLTF, PCD, Three Scene, Gaussian Splat. ",
    "url": "https://docs.arenaxr.org/content/python/attributes.html#model-only-attributes",
    "relUrl": "/content/python/attributes.html#model-only-attributes"
  },"163": {
    "doc": "Attributes",
    "title": "Animation Mixer",
    "content": "An animation-mixer can be added to an object: . See Animations and Morphs. ",
    "url": "https://docs.arenaxr.org/content/python/attributes.html#animation-mixer",
    "relUrl": "/content/python/attributes.html#animation-mixer"
  },"164": {
    "doc": "Attributes",
    "title": "GLTF Load On Demand (LOD)",
    "content": "Add a gltf-lod attribute: . gltf_model_lod=GltfModelLod(detailedUrl, detailedDistance, ...) . ",
    "url": "https://docs.arenaxr.org/content/python/attributes.html#gltf-load-on-demand-lod",
    "relUrl": "/content/python/attributes.html#gltf-load-on-demand-lod"
  },"165": {
    "doc": "Attributes",
    "title": "GLTF Model Update",
    "content": "Add a model-update attribute: . modelUpdate={\"mixamorigLeftShoulder\": {...}} . ",
    "url": "https://docs.arenaxr.org/content/python/attributes.html#gltf-model-update",
    "relUrl": "/content/python/attributes.html#gltf-model-update"
  },"166": {
    "doc": "Attributes",
    "title": "GLTF Morph",
    "content": "Add a gltf-morph attribute: . See Animations and Morphs. ",
    "url": "https://docs.arenaxr.org/content/python/attributes.html#gltf-morph",
    "relUrl": "/content/python/attributes.html#gltf-morph"
  },"167": {
    "doc": "Attributes",
    "title": "Material Extras",
    "content": "Add a material-ext attribute: . material_extras=MaterialExtras(encoding, transparentOccluder, gltfOpacity, ...) . ",
    "url": "https://docs.arenaxr.org/content/python/attributes.html#material-extras",
    "relUrl": "/content/python/attributes.html#material-extras"
  },"168": {
    "doc": "Attributes",
    "title": "Generic Attribute",
    "content": "For attributes that are not specified by the library, you can use this (put anything you want in the “…”)! Inherit from this class to create custom attributes. Attribute(...) . ",
    "url": "https://docs.arenaxr.org/content/python/attributes.html#generic-attribute",
    "relUrl": "/content/python/attributes.html#generic-attribute"
  },"169": {
    "doc": "Attributes",
    "title": "Additional Attributes (which are just specified as numbers or strings) may include persist, ttl, clickable, etc:",
    "content": "persist=True ttl=30 # seconds clickable=True # click_listener=True works too # etc. ",
    "url": "https://docs.arenaxr.org/content/python/attributes.html#additional-attributes-which-are-just-specified-as-numbers-or-strings-may-include-persist-ttl-clickable-etc",
    "relUrl": "/content/python/attributes.html#additional-attributes-which-are-just-specified-as-numbers-or-strings-may-include-persist-ttl-clickable-etc"
  },"170": {
    "doc": "Attributes",
    "title": "Attributes",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/python/attributes.html",
    "relUrl": "/content/python/attributes.html"
  },"171": {
    "doc": "Attribution",
    "title": "Attribution",
    "content": "Attribution Component. Saves attribution data in any entity. ",
    "url": "https://docs.arenaxr.org/content/schemas/message/attribution.html#attribution",
    "relUrl": "/content/schemas/message/attribution.html#attribution"
  },"172": {
    "doc": "Attribution",
    "title": "Attribution Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | author | string | 'Unknown' | Author name; e.g. ‘Vaptor-Studio’. | No | . | authorURL | string |   | Author homepage/profile; e.g. https://sketchfab.com/VapTor. | No | . | license | string | 'Unknown' | License summary/short name; e.g. ‘CC-BY-4.0’. | No | . | licenseURL | string |   | License URL; e.g. http://creativecommons.org/licenses/by/4.0/. | No | . | source | string | 'Unknown' | Model source e.g. ‘Sketchfab’. | No | . | sourceURL | string |   | Model source URL; e.g. https://sketchfab.com/models/2135501583704537907645bf723685e7. | No | . | title | string | 'No Title' | Model title; e.g. ‘Spinosaurus’. | No | . | extractAssetExtras | boolean | True | Extract attribution info from asset extras; will override attribution info given (default: true). | No | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/attribution.html#attribution-attributes",
    "relUrl": "/content/schemas/message/attribution.html#attribution-attributes"
  },"173": {
    "doc": "Attribution",
    "title": "Attribution",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/attribution.html",
    "relUrl": "/content/schemas/message/attribution.html"
  },"174": {
    "doc": "arena.attributes.attribution",
    "title": "\narena.attributes.attribution    ",
    "content": "class Attribution(arena.attributes.attribute.Attribute): Attribution attribute class to manage its properties in the ARENA: Attribution Component. Saves attribution data in any entity. Usage: attribution=Attribution(...) . Parameters . | str author: Author name; e.g. 'Vaptor-Studio'. Defaults to 'Unknown' (optional) | str authorURL: Author homepage/profile; e.g. https: //sketchfab.com/VapTor. (optional) | bool extractAssetExtras: Extract attribution info from asset extras; will override attribution info given (default: true). Defaults to 'True' (optional) | str license: License summary/short name; e.g. 'CC-BY-4.0'. Defaults to 'Unknown' (optional) | str licenseURL: License URL; e.g. http: //creativecommons.org/licenses/by/4.0/. (optional) | str source: Model source e.g. 'Sketchfab'. Defaults to 'Unknown' (optional) | str sourceURL: Model source URL; e.g. https: //sketchfab.com/models/2135501583704537907645bf723685e7. (optional) | str title: Model title; e.g. 'Spinosaurus'. Defaults to 'No Title' (optional) | . Attribution(**kwargs) Inherited Members . arena.base_object.BaseObject add json_encode json ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/attribution.html",
    "relUrl": "/content/python-api/attributes/attribution.html"
  },"175": {
    "doc": "arena.attributes.attribution",
    "title": "arena.attributes.attribution",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/attribution.html",
    "relUrl": "/content/python-api/attributes/attribution.html"
  },"176": {
    "doc": "arena.auth",
    "title": "\narena.auth    ",
    "content": "auth.py - Authentication methods for accessing the ARENA. class ArenaAuth: def authenticate_user(self, web_host): Begins authentication flow, getting Google auth, opening web browser if needed, getting username and state from ARENA server. Parameters . | str web_host: The hostname of the ARENA webserver. | . Returns . Username from arena-account, or None. def authenticate_scene(self, web_host, realm, scene, username, video=False): End authentication flow, requesting permissions may change by owner or admin, for now, get a fresh mqtt_token each time. Parameters . | str web_host: The hostname of the ARENA webserver. | str realm: The topic realm name. | str scene: The namespace/scene name combination. | str username: The ARENA username for the user. | bool video: If Jitsi video conference is requested. | . Returns . username and mqtt_token from arena-account. def authenticate_device(self, web_host): Check for device mqtt_token, ask for a missing one, and save to local memory. def has_publish_rights(self, token, topic): Check the MQTT token for permission to publish to topic. def get_writable_scenes(self, web_host): Request list of scene names for logged in user that user has publish permission for. Parameters . | str web_host: The hostname of the ARENA webserver. | . Returns . list of scenes. def store_environment_auth(self, username, token): Keep a copy of the token in local memory for urlopen and other tasks. def check_local_auth(self): Check for local mqtt_token and save to local memory. def verify(self, web_host): def urlopen(self, url, data=None, creds=False, csrf=None): urlopen is for ARENA URL connections. Parameters . | str url: the url to POST/GET. | str data: None for GET, add params for POST. | bool creds: True to pass the MQTT token as a cookie. | str csrf: The csrftoken. | . def signout(): def permissions(): ",
    "url": "https://docs.arenaxr.org/content/python-api/auth.html",
    "relUrl": "/content/python-api/auth.html"
  },"177": {
    "doc": "arena.auth",
    "title": "arena.auth",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/auth.html",
    "relUrl": "/content/python-api/auth.html"
  },"178": {
    "doc": "Authoring Program",
    "title": "ARENA AR Builder",
    "content": "An AR/VR capable editing tool to create/manipulate/delete ARENA objects. See top-level Python documentation for requirements. This tool uses the ARENA Persistence Database, so all changes are persisted. ",
    "url": "https://docs.arenaxr.org/content/tools/authoring.html#arena-ar-builder",
    "relUrl": "/content/tools/authoring.html#arena-ar-builder"
  },"179": {
    "doc": "Authoring Program",
    "title": "Quick Start",
    "content": ". | Clone our Python repo https://github.com/arenaxr/arena-py. | Usage: arb takes at minimum one argument, the first one, a scene name (hello in this example). python3 tools/arb/arb.py -s hello . | Interact with the tool at https://arenaxr.org/[your username]/hello | . ",
    "url": "https://docs.arenaxr.org/content/tools/authoring.html#quick-start",
    "relUrl": "/content/tools/authoring.html#quick-start"
  },"180": {
    "doc": "Authoring Program",
    "title": "Demo Video",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/tools/authoring.html#demo-video",
    "relUrl": "/content/tools/authoring.html#demo-video"
  },"181": {
    "doc": "Authoring Program",
    "title": "Usage",
    "content": "usage: arb.py [-h] [-mh HOST] [-n NAMESPACE] [-s SCENE] [-d DEVICE] [-p POSITION POSITION POSITION] [-r ROTATION ROTATION ROTATION] [-c SCALE SCALE SCALE] [-D] arena-py Application CLI optional arguments: -h, --help show this help message and exit -mh HOST, --host HOST ARENA webserver main host to connect to -n NAMESPACE, --namespace NAMESPACE Namespace of scene -s SCENE, --scene SCENE Scene to publish and listen to -d DEVICE, --device DEVICE Device to publish and listen to -p POSITION POSITION POSITION, --position POSITION POSITION POSITION App position as cartesian.x cartesian.y cartesian.z -r ROTATION ROTATION ROTATION, --rotation ROTATION ROTATION ROTATION App rotation as euler.x euler.y euler.z -c SCALE SCALE SCALE, --scale SCALE SCALE SCALE App scale as cartesian.x cartesian.y cartesian.z -D, --debug Debug mode. ",
    "url": "https://docs.arenaxr.org/content/tools/authoring.html#usage",
    "relUrl": "/content/tools/authoring.html#usage"
  },"182": {
    "doc": "Authoring Program",
    "title": "EDIT Button",
    "content": "The edit button will update all objects in the scene with click-listeners, allowing you to target ARB commands to any object. Toggling the edit button on, updates the scene scene-options object and will remind you to reload the page for edit mode to fully activate. You may see an orange warning in the upper left that Events Publish Behavior is too high, which is expected and a reminder to toggle the edit button off, when finished editing the scene with ARB. ",
    "url": "https://docs.arenaxr.org/content/tools/authoring.html#edit-button",
    "relUrl": "/content/tools/authoring.html#edit-button"
  },"183": {
    "doc": "Authoring Program",
    "title": "Basic Object Manipulation",
    "content": "When you set the mode to None, Rotate, Nudge, Stretch, Scale, you can manipulate objects in various ways. AR One-Finger, VR Left-Click . | Tap 1 finger with reticle (AR) or cursor (VR) on the cones to activate one-direction granular manipulation. | . AR Two-Finger . | Tap and hold 2 thumbs with reticle (AR) on the cones to activate free manipulation along that axis. | Move the device in AR to position, scale and rotate. | . AR Three-Finger . | Tap and hold 2 thumbs and tap 1 more finger to toggle modes: None, Rotate, Nudge, Stretch, Scale. | . ",
    "url": "https://docs.arenaxr.org/content/tools/authoring.html#basic-object-manipulation",
    "relUrl": "/content/tools/authoring.html#basic-object-manipulation"
  },"184": {
    "doc": "Authoring Program",
    "title": "Control Panel",
    "content": ". | VR Mode: Click and hold your mouse to move your camera relative to the panel. | AR Mode: Move your AR device to move your camera relative to the panel. | All Modes: Use the lock button to reposition the panel relative to your camera’s rotation. | . | Button | Type | Description | . | color | action | Allows color select; tap object to color it (default=#ffffff). | . | create | action | Allows shape select; tap clipboard object to create it in place (default=sphere). | . | delete | action | Tap object to delete it. | . | edit | toggle | Turns on click-listeners for every object in the scene via changing the scene-options object. Requires page reload (default=off). | . | lamp | toggle | Turn a headlamp on/off (default=off). | . | lock | toggle | Off=panel maintains relative world position; On=panel follows camera rotation (default=off). | . | model | action | Allows GLTF model select; tap clipboard object to create it in place (default=duck.glb). Models may be imported via the -m argument (see below). | . | move | action | Tap an object to show it in the clipboard, tap clipboard object to move it to that place. | . | nudge | action | Tap an object to show yellow nudge-lines, then tap a cone to nudge the object in that direction according to selected granularity (default=mm) Allows mm, cm, dm, m granularity. | . | occlude | action | Allows occlusion on/off select; tap object to occlude it (default=on). | . | parent | action | Allows setting of parent object; first tap the parent object, then tap the child object. | . | redpill | toggle | Reveals useful debug data: gridlines on the floor (y=0) can be seen from above and below, occlusion mask will show all occluded objects, object data mouse hover on an object will show its position, rotation, and scale (default=off). | . | rename | action | Allows typing a new name; start typing or just tap an object to load the old name into the editor, then tap the object to apply the new name to. | . | rotate | action | Tap an object to show orange rotate-lines, then tap a cone to change object rotation according to selected granularity (default=1°). Allows 1°, 5°, 10°, 45°, 90° Euler angle granularity; Additional 6Dof lines will show degree of rotation. | . | scale | action | Tap an object to show blue scale-lines, then tap a cone to increase or decrease object scale according to selected granularity (default=mm). | . | slider | toggle | Off=Object manipulation via two-finger hold and move camera, On=Object manipulation via two-finger swipe (default=off). | . | stretch | action | Allows altering scale in one of 6Dof. | . | wall | action | Allows creation of a basic wall 0.1m thick; tap clipboard brick once with your AR device flush with one corner of the wall, and tap the second time at the opposing corner. Three alignment markers will appear for 2 minutes. | . ",
    "url": "https://docs.arenaxr.org/content/tools/authoring.html#control-panel",
    "relUrl": "/content/tools/authoring.html#control-panel"
  },"185": {
    "doc": "Authoring Program",
    "title": "Clipboard",
    "content": "The clipboard is a temporary see-through object floating in front of the user used to show the relative position of placing a future object. It’s also used in AR to have something to fire an event at where no object currently exists. ",
    "url": "https://docs.arenaxr.org/content/tools/authoring.html#clipboard",
    "relUrl": "/content/tools/authoring.html#clipboard"
  },"186": {
    "doc": "Authoring Program",
    "title": "Construction Cone",
    "content": "There is a small temporary object resting on position 0,0,0 in the shape of a construction cone to mark the origin of the scene. It will be removed when arb stops running. ",
    "url": "https://docs.arenaxr.org/content/tools/authoring.html#construction-cone",
    "relUrl": "/content/tools/authoring.html#construction-cone"
  },"187": {
    "doc": "Authoring Program",
    "title": "Run Options",
    "content": "Importing Models . You can import a json-formatted manifest of GLTF models using the command argument -m to use on the model control panel option. You can write your own, or use the example, arb-manifest.json. python3 tools/arb/arb.py -s hello --manifest arb-manifest.json . Scale varies widely between individual models, so experiment with the best scale to start with. arb-manifest.json . { \"models\": [ { \"name\": \"avocado\", \"url_gltf\": \"store/models/Avocado.glb\", \"scale\": 1 }, { \"name\": \"shuttle\", \"url_gltf\": \"store/models/Shuttle.glb\", \"scale\": 5 }, { \"name\": \"duck\", \"url_gltf\": \"store/models/Duck.glb\", \"scale\": 0.2 }, { \"name\": \"earth\", \"url_gltf\": \"store/models/Earth.glb\", \"scale\": 2 }, { \"name\": \"lantern\", \"url_gltf\": \"store/models/Lantern.glb\", \"scale\": 0.015 }, { \"name\": \"camera\", \"url_gltf\": \"store/models/AntiqueCamera.glb\", \"scale\": 0.05 } ] } . ",
    "url": "https://docs.arenaxr.org/content/tools/authoring.html#run-options",
    "relUrl": "/content/tools/authoring.html#run-options"
  },"188": {
    "doc": "Authoring Program",
    "title": "Authoring Program",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/tools/authoring.html",
    "relUrl": "/content/tools/authoring.html"
  },"189": {
    "doc": "arena.base_object",
    "title": "\narena.base_object    ",
    "content": "class BaseObjectJSONEncoder(json.encoder.JSONEncoder): Custom JSON encoder for nested BaseObjects. def default(self, obj): Implement this method in a subclass such that it returns a serializable object for o, or calls the base implementation (to raise a TypeError). For example, to support arbitrary iterators, you could implement default like this:: . def default(self, o): try: iterable = iter(o) except TypeError: pass else: return list(iterable) # Let the base class default method raise the TypeError return JSONEncoder.default(self, o) . Inherited Members . json.encoder.JSONEncoder JSONEncoder item_separator key_separator skipkeys ensure_ascii check_circular allow_nan sort_keys indent encode iterencode class BaseObject: Basic Building Block for everything in arena-py. Can easily be interpreted and used like a JSON-able Python dictionary. BaseObject(**kwargs) def add(self, name, attr): def json_encode(self, d): def json(self, **kwargs): ",
    "url": "https://docs.arenaxr.org/content/python-api/base_object.html",
    "relUrl": "/content/python-api/base_object.html"
  },"190": {
    "doc": "arena.base_object",
    "title": "arena.base_object",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/base_object.html",
    "relUrl": "/content/python-api/base_object.html"
  },"191": {
    "doc": "Beginner Example",
    "title": "Beginner Example - The bare minimum you need to start using arena-py",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/python/tutorial/beginner.html#beginner-example---the-bare-minimum-you-need-to-start-using-arena-py",
    "relUrl": "/content/python/tutorial/beginner.html#beginner-example---the-bare-minimum-you-need-to-start-using-arena-py"
  },"192": {
    "doc": "Beginner Example",
    "title": "Let’s start by installing and importing the library",
    "content": "pip3 install arena-py . Ok, now let’s get started! . Setup environmental variables (recommended but not required) . Replace [host], [realm], and [scene] with your desired ARENA webserver main host, realm, and scene name, respectively. export MQTTH=[host] # ARENA webserver main host export REALM=[realm] export SCENE=[scene] . ",
    "url": "https://docs.arenaxr.org/content/python/tutorial/beginner.html#lets-start-by-installing-and-importing-the-library",
    "relUrl": "/content/python/tutorial/beginner.html#lets-start-by-installing-and-importing-the-library"
  },"193": {
    "doc": "Beginner Example",
    "title": "Import the library",
    "content": "from arena import * . ",
    "url": "https://docs.arenaxr.org/content/python/tutorial/beginner.html#import-the-library",
    "relUrl": "/content/python/tutorial/beginner.html#import-the-library"
  },"194": {
    "doc": "Beginner Example",
    "title": "Start the client",
    "content": "arena = Scene() . You can also pass host and scene as arguments, if you don’t want to use environmental variables. These must be keyword arguments: . scene = Scene(host=[host], scene=[scene]) . Note: arena-py will always favor environmental variables over arguments. ",
    "url": "https://docs.arenaxr.org/content/python/tutorial/beginner.html#start-the-client",
    "relUrl": "/content/python/tutorial/beginner.html#start-the-client"
  },"195": {
    "doc": "Beginner Example",
    "title": "Define a task",
    "content": "arena-py works by running tasks in an event loop, so we need a main task for our sample program. def main(): . ",
    "url": "https://docs.arenaxr.org/content/python/tutorial/beginner.html#define-a-task",
    "relUrl": "/content/python/tutorial/beginner.html#define-a-task"
  },"196": {
    "doc": "Beginner Example",
    "title": "Our first object",
    "content": "Inside main(), lets make a box! . box = Box(object_id=\"my_box\", position=Position(0,4,-2), scale=Scale(2,2,2)) . Note the input arguments. The names must match what they will be in the ARENA JSON specification. We don’t have to worry too much about that now, but keep this in mind, as typos will be very bad! . Box is a type of “Object”. See objects. Position and Scale are what we call “Attributes”. See attributes. ",
    "url": "https://docs.arenaxr.org/content/python/tutorial/beginner.html#our-first-object",
    "relUrl": "/content/python/tutorial/beginner.html#our-first-object"
  },"197": {
    "doc": "Beginner Example",
    "title": "Adding our object to the ARENA",
    "content": "scene.add_object(box) . ",
    "url": "https://docs.arenaxr.org/content/python/tutorial/beginner.html#adding-our-object-to-the-arena",
    "relUrl": "/content/python/tutorial/beginner.html#adding-our-object-to-the-arena"
  },"198": {
    "doc": "Beginner Example",
    "title": "Start the event loop",
    "content": "Now, outside of main, we will write: . scene.run_once(main) scene.run_tasks() . Now, go into the scene to see your box! . ",
    "url": "https://docs.arenaxr.org/content/python/tutorial/beginner.html#start-the-event-loop",
    "relUrl": "/content/python/tutorial/beginner.html#start-the-event-loop"
  },"199": {
    "doc": "Beginner Example",
    "title": "Appendix",
    "content": "from arena import * # setup library scene = Scene(host=\"arenaxr.org\", scene=\"example\") def main(): # make a box box = Box(object_id=\"my_box\", position=Position(0,4,-2), scale=Scale(2,2,2)) # add the box scene.add_object(box) # add and start tasks scene.run_once(main) scene.run_tasks() . ",
    "url": "https://docs.arenaxr.org/content/python/tutorial/beginner.html#appendix",
    "relUrl": "/content/python/tutorial/beginner.html#appendix"
  },"200": {
    "doc": "Beginner Example",
    "title": "Beginner Example",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/python/tutorial/beginner.html",
    "relUrl": "/content/python/tutorial/beginner.html"
  },"201": {
    "doc": "Blender Add-on",
    "title": "ARENA Blender Add-on",
    "content": "You can use the ARENA Blender add-on to import/export scenes. For now, only exports.. The Add-on exports the root objects in a scene into separate GLTF files and creates a JSON file describing the scene in a format that ARENA can import. The folder created for the exported scene can then be uploaded to ARENA filestore (typically at ‘{filestore-home}/blender-exports/exported-folder’) and imported using the build webpage. ",
    "url": "https://docs.arenaxr.org/content/3d-content/blender-addon.html#arena-blender-add-on",
    "relUrl": "/content/3d-content/blender-addon.html#arena-blender-add-on"
  },"202": {
    "doc": "Blender Add-on",
    "title": "Install",
    "content": ". | Download blender-arena-export.py | In Blender, go to Edit -&gt; Preferences. In the Add-ons section, use the Install… button and Browse the filesystem to select the blender-arena-export.py add-on file and press Install. | Once installed, don’t forget to enable the add-on: | You can confirm the Add-on is installed by seeing the new menu entry at File -&gt; Export -&gt; Export to ARENA. | . ",
    "url": "https://docs.arenaxr.org/content/3d-content/blender-addon.html#install",
    "relUrl": "/content/3d-content/blender-addon.html#install"
  },"203": {
    "doc": "Blender Add-on",
    "title": "Use the Add-on",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/3d-content/blender-addon.html#use-the-add-on",
    "relUrl": "/content/3d-content/blender-addon.html#use-the-add-on"
  },"204": {
    "doc": "Blender Add-on",
    "title": "Export",
    "content": "The Add-on exports the root objects in a scene into seperate GLTF files. For example, exporting the folowing scene: . Will create three GLTF files, one for each of the objects at the root of the scene and a scene.json that describes the scene in a format that ARENA can import. Once you have a scene to export, navigate to File -&gt; Export -&gt; Export to ARENA. This will present you with a file browser window to select a folder where the scene files are going to be exported. In this window, you have some options to control the ARENA export: . | Format: The exported GLTFs format. Can be GLB, single GLTF with all files embedded, or GLTF with seperate (.gltf + .bin + textures) files. | ARENA Username: The ARENA username is used to set paths to assets. When this field is edited, the filestore path (option below) is also updated. | ARENA Realm: The ARENA realm to include in the output file (not used at the moment). | Export Selection: Export selected objects only. | Export Animations: Exports active actions and NLA tracks as glTF animations. | Export Extras: Export custom properties as glTF extras. | Draco Compression: Compress mesh using Draco. | Filestore Path: ARENA filestore path for assets (derived automatically from the username, but can be edited). | . Pressing Export to Folder will create a folder with the name provided and output the files according to your scene structure. Now, copy the folder output by the exporter to the ARENA filestore. The location of the files is important as the assets will be assumed to be at this location. At the bottom left of the Blender window, you can see a note about where the files should be uploaded to. Import to ARENA . Finally, go to the build webpage and import the scene.json file inside the folder uploaded to the ARENA filestore by pressing the import button: . Then, provide either the full path to the .json file on the filestore (e.g. /store/users/&lt;username&gt;/blender-exports/untitled-scene/scene.json), or simply the scene name (e.g. untitled-scene) if you placed the exported folder under the default filestore path (/store/users/&lt;username&gt;/blender-exports/): . You can either add the objects in the JSON file to the current scene in the build webpage (the default) or create a new scene. Export format . The scene.json file format is an array of objects as given from a MongoDB dump, similar to the python import/export script: . [ { \"_id\": { \"$oid\": \"605d0cb6cab49fe1bf55d9c7\" }, \"namespace\": \"public\", \"object_id\": \"lobby-model\", \"attributes\": { \"object_type\": \"gltf-model\", \"url\": \"/store/users/wiselab/room_models/lobby/lobby-v2.glb\", \"position\": { \"x\": 0, \"y\": -2, \"z\": 0 }, \"rotation\": { \"x\": 0, \"y\": 0, \"z\": 0, \"w\": 1 }, \"scale\": { \"x\": 0.05, \"y\": 0.05, \"z\": 0.05 } }, \"type\": \"object\", \"realm\": \"realm\", \"sceneId\": \"lobby\" }, { ... } ] . ",
    "url": "https://docs.arenaxr.org/content/3d-content/blender-addon.html#export",
    "relUrl": "/content/3d-content/blender-addon.html#export"
  },"205": {
    "doc": "Blender Add-on",
    "title": "Blender Add-on",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/3d-content/blender-addon.html",
    "relUrl": "/content/3d-content/blender-addon.html"
  },"206": {
    "doc": "Blender Animation",
    "title": "Generating 3D Content Blender Animation",
    "content": ". | ARENA-Animation repository | . This details the process of creating a simple animated 3D model in Blender, and then animating it on a click event in the CONIX ARENA. It uses MQTT as a primary way of initializing and communicating with the ARENA. ",
    "url": "https://docs.arenaxr.org/content/3d-content/blender-animation.html#generating-3d-content-blender-animation",
    "relUrl": "/content/3d-content/blender-animation.html#generating-3d-content-blender-animation"
  },"207": {
    "doc": "Blender Animation",
    "title": "Getting Started With Modeling",
    "content": "For this, Blender is used, as it is free and versatile. However, any other 3D modeling &amp; animation software will work, as long as the file is exported to a *.glb or *.gltf format. Blender can be downloaded here. Install Blender according to the instructions for your OS. Here, we are using Blender 2.80 on Ubuntu 18.04.4. ",
    "url": "https://docs.arenaxr.org/content/3d-content/blender-animation.html#getting-started-with-modeling",
    "relUrl": "/content/3d-content/blender-animation.html#getting-started-with-modeling"
  },"208": {
    "doc": "Blender Animation",
    "title": "Starting Blender",
    "content": "When you open Blender, choose a General new file. Your screen should open to the Layout tab, with a grey cube in the center of the scene. You’ll have a camera, cube, and light in the top right Scene Collection window. Creating New Models . For this tutorial, we will be using two shapes. In this case, we will be using a cube and a sphere. At the top of the screen to the left, click Add &gt; Mesh &gt; UV Sphere. This will add a sphere to the origin of the scene. Use the Move tool to move the sphere from the center to the starting position of your choice. Changing colors . In the bottom right Context menu, there is a line of tabs down the side. To change the color of the rendered object, you can edit the Base Color and Subsurface Color in the Material tab. This will not show up in your Blender window, however it will be in the complete render when it’s exported. To change how it appears in the scene, scroll down to Viewport Display in the Material tab. To change the color of a sphere or new mesh created, there are a few additional steps. If you select the sphere in the Scene Collection menu and go to the Material tab of the Context menu, you will notice there are no presets or settings to change, unlike the already-generated cube. Create a new material, name it whatever you want, and you can change the colors, materials, and display. Starting Animation . At the top of the window, change from the Layout tab to the Animation tab. This window will look different, with a preview on the left, scene in the middle, and a timeline at the bottom. Right click on the cube, select ‘Insert Keyframe’, and select ‘Location’. In Blender, a keyframe is a specific frame in the timeline that contains the attributes of models, such as their location, rotation, or size. You can read more about Blender keyframes. Add a Location Keyframe to the sphere, as well. This tutorial will only cover the basics of animating location movements, however rotation and scale work similarly. In the animation window at the bottom of the timeline, click on the numbers to switch frames. When moving objects, use the Move tool, or change the coordinates in the Context menu. Select the diamond next to each location coordinate in the Context menu in each frame that moves to save the change. Each model moves separately, but they do not have to move every frame. For simple animations, moving something every 5-10 frames is fine. The movements we set are at random, and they loop back to their original position. Switch back to the layout tab along the top. Here you can play back the animation, as well as adjust how long the animation is. We changed it from 250 to 100 frames, as we do not have 250 frames of content, and there would just be a long pause at the end of the animation. Saving the Animation . To save the animation, go to the menu at the top left of the window. Select File &gt; Export &gt; glTF 2.0 (.glb/.gltf). In the bottom left menu, select how you want to export the file. *.glb, *.gltf, and separate *.gltf are valid options. If using the separate *.gltf, make sure to upload the entire folder later. In this case, we are exporting it as a single *.gltf. Testing the Animation . Don McCurdy’s gltf-viewer website will display animated glTF files. ",
    "url": "https://docs.arenaxr.org/content/3d-content/blender-animation.html#starting-blender",
    "relUrl": "/content/3d-content/blender-animation.html#starting-blender"
  },"209": {
    "doc": "Blender Animation",
    "title": "Blender Animation",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/3d-content/blender-animation.html",
    "relUrl": "/content/3d-content/blender-animation.html"
  },"210": {
    "doc": "arena.attributes.blip",
    "title": "\narena.attributes.blip    ",
    "content": "class Blip(arena.attributes.attribute.Attribute): Blip attribute class to manage its properties in the ARENA: When the object is created or deleted, it will animate in/out of the scene instead of appearing/disappearing instantly. Must have a geometric mesh. Usage: blip=Blip(...) . Parameters . | bool applyDescendants: Apply blipout effect to include all descendents. Does not work for blipin. (optional) | bool blipin: Animate in on create, set false to disable. Defaults to 'True' (optional) | bool blipout: Animate out on delete, set false to disable. Defaults to 'True' (optional) | float duration: Animation duration in milliseconds. Defaults to '750' (optional) | str geometry: Geometry of the blipout plane. Allows [rect, disk, ring] Defaults to 'rect' (optional) | str planes: Which which clipping planes to use for effect. A top plane clips above it, bottom clips below it. Allows [both, top, bottom] Defaults to 'both' (optional) | . Blip(**kwargs) Inherited Members . arena.base_object.BaseObject add json_encode json ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/blip.html",
    "relUrl": "/content/python-api/attributes/blip.html"
  },"211": {
    "doc": "arena.attributes.blip",
    "title": "arena.attributes.blip",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/blip.html",
    "relUrl": "/content/python-api/attributes/blip.html"
  },"212": {
    "doc": "Blip Effect",
    "title": "Blip Effect",
    "content": "When the object is created or deleted, it will animate in/out of the scene instead of appearing/disappearing instantly. Must have a geometric mesh. ",
    "url": "https://docs.arenaxr.org/content/schemas/message/blip.html#blip-effect",
    "relUrl": "/content/schemas/message/blip.html#blip-effect"
  },"213": {
    "doc": "Blip Effect",
    "title": "Blip Effect Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | blipin | boolean | True | Animate in on create, set false to disable. | Yes | . | blipout | boolean | True | Animate out on delete, set false to disable. | Yes | . | geometry | string; One of: ['rect', 'disk', 'ring'] | 'rect' | Geometry of the blipout plane. | Yes | . | planes | string; One of: ['both', 'top', 'bottom'] | 'both' | Which which clipping planes to use for effect. A top plane clips above it, bottom clips below it. | Yes | . | duration | number | 750 | Animation duration in milliseconds. | Yes | . | applyDescendants | boolean | False | Apply blipout effect to include all descendents. Does not work for blipin. | No | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/blip.html#blip-effect-attributes",
    "relUrl": "/content/schemas/message/blip.html#blip-effect-attributes"
  },"214": {
    "doc": "Blip Effect",
    "title": "Blip Effect",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/blip.html",
    "relUrl": "/content/schemas/message/blip.html"
  },"215": {
    "doc": "Box Collision Listener",
    "title": "Box Collision Listener",
    "content": "Listen for bounding-box collisions with user camera and hands. Must be applied to an object or model with geometric mesh. Collisions are determined by course bounding-box overlaps. ",
    "url": "https://docs.arenaxr.org/content/schemas/message/box-collision-listener.html#box-collision-listener",
    "relUrl": "/content/schemas/message/box-collision-listener.html#box-collision-listener"
  },"216": {
    "doc": "Box Collision Listener",
    "title": "Box Collision Listener Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | enabled | boolean | True | Publish detections, set false to disable. | No | . | dynamic | boolean | False | Set true for a moving object, which should have its bounding box recalculated regularly to determine proper collision. | Yes | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/box-collision-listener.html#box-collision-listener-attributes",
    "relUrl": "/content/schemas/message/box-collision-listener.html#box-collision-listener-attributes"
  },"217": {
    "doc": "Box Collision Listener",
    "title": "Box Collision Listener",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/box-collision-listener.html",
    "relUrl": "/content/schemas/message/box-collision-listener.html"
  },"218": {
    "doc": "Box",
    "title": "Box",
    "content": "Box Geometry. All wire objects have a set of basic attributes {object_id, action, type, persist, data}. The data attribute defines the object-specific attributes . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/box.html#box",
    "relUrl": "/content/schemas/message/box.html#box"
  },"219": {
    "doc": "Box",
    "title": "Box Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | object_id | string |   | A uuid or otherwise unique identifier for this object. | Yes | . | persist | boolean | True | Persist this object in the database. | Yes | . | type | string; Must be: object | 'object' | AFrame 3D Object | Yes | . | action | string; One of: ['create', 'delete', 'update'] | 'create' | Message action create, update, delete. | Yes | . | ttl | integer |   | When applied to an entity, the entity will remove itself from DOM after the specified number of seconds. Update is allowed, which will reset the timer to start from that moment. | No | . | data | Box data |   | Box Data | Yes | . Box Data Attributes . | Attribute | Type | Default | Description | Required | . | object_type | string; Must be: box | box | 3D object type. | Yes | . | depth | number | 1 | depth | Yes | . | height | number | 1 | height | Yes | . | segmentsDepth | integer | 1 | segments depth | No | . | segmentsHeight | integer | 1 | segments height | No | . | segmentsWidth | integer | 1 | segments width | No | . | width | number | 1 | width | Yes | . | parent | string |   | Parent’s object_id. Child objects inherit attributes of their parent, for example scale and translation. | No | . | position | position |   | 3D object position. | Yes | . | rotation | rotation |   | 3D object rotation in quaternion representation; Right-handed coordinate system. Euler degrees are deprecated in wire message format. | Yes | . | scale | scale |   | 3D object scale. | No | . | animation | animation |   | Animate and tween values. | No | . | armarker | armarker |   | A location marker (such as an AprilTag, a lightAnchor, or an UWB tag), used to anchor scenes, or scene objects, in the real world. | No | . | click-listener | click-listener |   | Object will listen for mouse events like clicks. | No | . | box-collision-listener | box-collision-listener |   | Listen for bounding-box collisions with user camera and hands. Must be applied to an object or model with geometric mesh. Collisions are determined by course bounding-box overlaps. | No | . | collision-listener | string |   | Name of the collision-listener, default can be empty string. Collisions trigger click events. | No | . | blip | blip |   | When the object is created or deleted, it will animate in/out of the scene instead of appearing/disappearing instantly. Must have a geometric mesh. | No | . | static-body | static-body |   | A fixed-position or animated object. Other objects may collide with static bodies, but static bodies themselves are unaffected by gravity and collisions. | No | . | dynamic-body | dynamic-body |   | A freely-moving object. Dynamic bodies have mass, collide with other objects, bounce or slow during collisions, and fall if gravity is enabled. | No | . | goto-landmark | goto-landmark |   | Teleports user to the landmark with the given name. Requires click-listener. | No | . | goto-url | goto-url |   | Load new URL when object is clicked. Requires click-listener. | No | . | hide-on-enter-ar | boolean; Must be: True | True | Hide object when entering AR. Remove component to not hide. | No | . | hide-on-enter-vr | boolean; Must be: True | True | Hide object when entering VR. Remove component to not hide. | No | . | show-on-enter-ar | boolean; Must be: True | True | Show object when entering AR. Hidden otherwise. | No | . | show-on-enter-vr | boolean; Must be: True | True | Show object when entering VR. Hidden otherwise. | No | . | impulse | impulse |   | Apply an impulse to an object to set it in motion. This happens in conjunction with an event. Requires click-listener and physics. | No | . | landmark | landmark |   | Define entities as a landmark; Landmarks appears in the landmark list and you can move (teleport) to them; You can define the behavior of the teleport: if you will be at a fixed or random distance, looking at the landmark, fixed offset or if it is constrained by a navmesh (when it exists). | No | . | material-extras | material-extras |   | Define extra material properties, namely texture encoding, whether to render the material’s color and render order. | No | . | shadow | shadow |   | The shadow component enables shadows for an entity and its children. Adding the shadow component alone is not enough to display shadows in your scene. We must have at least one light with castShadow: true enabled. | No | . | sound | sound |   | The sound component defines the entity as a source of sound or audio. The sound component can be positional and is thus affected by the component’s position. | No | . | textinput | textinput |   | Opens an HTML prompt when clicked. Sends text input as an event on MQTT. Requires click-listener. | No | . | url | string |   | Use File Store paths under ‘store/users/username’, see CDN and other storage options in the description above. | No | . | remote-render | remote-render |   | Whether or not an object should be remote rendered [Experimental]. | No | . | video-control | video-control |   | Adds a video to an entity and controls its playback. | No | . | attribution | attribution |   | Attribution Component. Saves attribution data in any entity. | No | . | spe-particles | spe-particles |   | GPU based particle systems in A-Frame. | No | . | look-at | string |   | The look-at component defines the behavior for an entity to dynamically rotate or face towards another entity or position. Use ‘#my-camera’ to face the user camera, otherwise can take either a vec3 position or a query selector to another entity. | No | . | buffer | boolean | True | Transform geometry into a BufferGeometry to reduce memory usage at the cost of being harder to manipulate (geometries only: box, circle, cone, …). | No | . | jitsi-video | jitsi-video |   | Apply a jitsi video source to the geometry. | No | . | material | material | {'color': '#7f7f7f'} | The material properties of the object’s surface. | No | . | multisrc | multisrc |   | Define multiple visual sources applied to an object. | No | . | screenshareable | boolean | True | Whether or not a user can screenshare on an object. | No | . | skipCache | boolean | False | Disable retrieving the shared geometry object from the cache. (geometries only: box, circle, cone, …). | No | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/box.html#box-attributes",
    "relUrl": "/content/schemas/message/box.html#box-attributes"
  },"220": {
    "doc": "Box",
    "title": "Box",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/box.html",
    "relUrl": "/content/schemas/message/box.html"
  },"221": {
    "doc": "arena.objects.box",
    "title": "\narena.objects.box    ",
    "content": "class Box(arena.objects.arena_object.Object): Box object class to manage its properties in the ARENA: Box Geometry. Parameters . | float depth: depth Defaults to '1' (optional) | float height: height Defaults to '1' (optional) | int segmentsDepth: segments depth Defaults to '1' (optional) | int segmentsHeight: segments height Defaults to '1' (optional) | int segmentsWidth: segments width Defaults to '1' (optional) | float width: width Defaults to '1' (optional) | . Box(**kwargs) object_type = &#39;box&#39; Inherited Members . arena.objects.arena_object.Object type all_objects evt_handler update_handler animations delayed_prop_tasks update_attributes dispatch_animation remove_animation_at_index clear_animations clickable json_preprocess json_postprocess json get add remove exists arena.base_object.BaseObject json_encode class Cube(arena.objects.arena_object.Object): Class for Cube in the ARENA. Cube(**kwargs) object_type = &#39;cube&#39; Inherited Members . arena.objects.arena_object.Object type all_objects evt_handler update_handler animations delayed_prop_tasks update_attributes dispatch_animation remove_animation_at_index clear_animations clickable json_preprocess json_postprocess json get add remove exists arena.base_object.BaseObject json_encode ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/box.html",
    "relUrl": "/content/python-api/objects/box.html"
  },"222": {
    "doc": "arena.objects.box",
    "title": "arena.objects.box",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/box.html",
    "relUrl": "/content/python-api/objects/box.html"
  },"223": {
    "doc": "arena.attributes.box_collision_listener",
    "title": "\narena.attributes.box_collision_listener    ",
    "content": "class BoxCollisionListener(arena.attributes.attribute.Attribute): BoxCollisionListener attribute class to manage its properties in the ARENA: Listen for bounding-box collisions with user camera and hands. Must be applied to an object or model with geometric mesh. Collisions are determined by course bounding-box overlaps. Usage: box_collision_listener=BoxCollisionListener(...) . Parameters . | bool dynamic: Set true for a moving object, which should have its bounding box recalculated regularly to determine proper collision. (optional) | bool enabled: Publish detections, set false to disable. Defaults to 'True' (optional) | . BoxCollisionListener(**kwargs) Inherited Members . arena.base_object.BaseObject add json_encode json ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/box_collision_listener.html",
    "relUrl": "/content/python-api/attributes/box_collision_listener.html"
  },"224": {
    "doc": "arena.attributes.box_collision_listener",
    "title": "arena.attributes.box_collision_listener",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/box_collision_listener.html",
    "relUrl": "/content/python-api/attributes/box_collision_listener.html"
  },"225": {
    "doc": "Build Scenes",
    "title": "Using the ARENA Builder",
    "content": "We will now do a quick tour of a simple interface to edit ARENA scenes. We will see how to create a scene and add some content to it! 🏗️ . ",
    "url": "https://docs.arenaxr.org/content/overview/build.html#using-the-arena-builder",
    "relUrl": "/content/overview/build.html#using-the-arena-builder"
  },"226": {
    "doc": "Build Scenes",
    "title": "Add a Scene",
    "content": "Head to the build page in a new tab: https://arenaxr.org/build/ . If you never created a scene, it will look similar to this: . note . You will need to be signed-in to use the builder webpage. The conix in the upper right corner and in the [User or Organization] drop-down select is the username we used to login for this demo. Your username should appear there. As indicated in the Scenes select, your user has no scenes. Let us add one by pressing the [+] button (highlighted with a circle in the figure above). This will pop a dialog to create the new scene as follows: . It is likely that you only have access to your User/Organization, so the first select will have only your username. Enter the name of the scene in the [Scene] input. You also have the choice to start your scene with some objects copied from the public/default scene. It is a good idea to do this, so leave it checked. Once you are done, press the [Add Scene] button, which will prompt a ‘Create Object create published’ popup message in the corner. The popup will disappear in a second. Let us take this time to have a look at a few other sections of the build page shown below: . In the figure above, we numbered (orange boxes) the following sections of the page: . | Scene selection: Select the scene you are editing here. As we have seen, we can also add scenes. Additionally, we can delete a scene and force a refresh of the scene list. This area also has a logout button, and a button that allows you to check your permissions. | Scene Objects: See a list of the objects currently persisted in the scene. At the bottom of the list there are buttons to delete, copy and select objects. To select a single object, click on its name (the line will become darker). You can press the object’s edit button (highlighted with a circle in the figure above) to edit its properties.This area also has a search bar that lets you filter the objects in the object list. Click on the list to toggle show/hide of object types. | Add/Edit Object: This section allows editing the properties of a new or an existing object (by pressing the edit button in the object list). | . Let us see the Scene Objects and Add/Edit Objects sections in a little more detail now: . ",
    "url": "https://docs.arenaxr.org/content/overview/build.html#add-a-scene",
    "relUrl": "/content/overview/build.html#add-a-scene"
  },"227": {
    "doc": "Build Scenes",
    "title": "Editing Object Properties",
    "content": "Press the [Edit] button of the scene options object: . You can now edit the object properties. When we are done editing the object, we can press the [+ Add/Update Object] button to trigger an update: . tip . Note the Object JSON panel on the right; this is a text representation of the object being edited in the form. All objects in the ARENA have a JSON representation. As you edit the form, the JSON will be updated. You can also edit the JSON directly and use the [Update form] button to reflect those edits back to the form. The Validation below will output any validation error detected. The first 4 properties of the form (object_id, action, persist, type) are common to all ARENA objects. A scene options object allows setting options for a preset environment in the scene, set some scene options (such as audio range, publish behavior, or scene privacy) and define some renderer settings. The properties that appear on the form can be set with the [Properties] button. Notice the 3 different sections of the scene options object: . The checkboxes allow to hide/show those subsections of the top-level object (scene options). Note that each subsection has its own [Properties] button. For example, the environment presets: . Later, we will add a nice model to our scene. To prepare the scene for it, try to set the environment preset to forest, add a point light to the scene at(x=0, y=5, z=0), and set shadows to true: . After making the edits, update the object by pressing the [+ Add/Update Object] button. You will have to reload the scene to have the new scene options applied. ",
    "url": "https://docs.arenaxr.org/content/overview/build.html#editing-object-properties",
    "relUrl": "/content/overview/build.html#editing-object-properties"
  },"228": {
    "doc": "Build Scenes",
    "title": "Add new Objects",
    "content": "Let us try to add a new object to our scene. We will add a GLTF model of the Mammuthus primigenius (Blumbach). We only allow 3 different methods of storage currently: the ARENA File Store, CDN, and Dropbox, as follows. | ARENA File Store Url: store/users/wiselab/build/blumbach.glb | ARENA File Store CDN Url: https://arena-cdn.conix.io/store/users/wiselab/build/blumbach.glb | Dropbox Url: https://www.dropbox.com/s/pgytn552kzukm8f/blumbach.glb?dl=0 | . This example will highlight the ARENA File Store strategy. In order to use the model in the ARENA, we will upload a .glb copy and share it publicly using the ARENA File Store Url. Start by selecting the GLTF model object type from the Type select at the top of the Add/Edit Object section: . There are multiple paths to upload files on the ARENA File Store and Dropbox, which you can review. Currently we will use the simplest method, under Add/Edit Object, select Type: GLTF Model, then click [Upload File &amp; Publish].. Select the model and it will be uploaded for you automatically. As you select the GLTF model, the form will change to the default properties for this object type. Let us edit the form and enter: . | object_id: blumbach (any name that identifies the model will do) | action: create (creating the object) | persist: true (want to persist) | Url: store/users/wiselab/build/blumbach.glb (auto-generated by the method above) | Position: 0, 1.7, -5, (x, y, z) | Rotation: 0, 45, 0, (x, y, z) | Scale: 1, 1, 1, (x, y, z) | . In order to have nice shadows from our model, add a shadow property to the GLTF model: . And enable both cast and receive shadows: . Update the object by pressing the [+ Add/Update Object] button. Now, if you open the scene in your browser by following the link at the top of the page: . You should have a magnificent Mammuthus primigenius (Blumbach) in your scene! . tip . Other object types (3D objects, scene options, landmarks) can be added in a similar way. ",
    "url": "https://docs.arenaxr.org/content/overview/build.html#add-new-objects",
    "relUrl": "/content/overview/build.html#add-new-objects"
  },"229": {
    "doc": "Build Scenes",
    "title": "Add Landmarks",
    "content": "A list of Landmarks is shown from the button at the bottom left corner of the screen [ ]. Landmarks allow you to jump to certain places of interest in a scene. If you copied the landmarks from scene/public, it is likely that you have a single landmark pointing to a Screenshare: . Let us add a landmark to the Mammuthus primigenius (Blumbach) model. This way, wherever we are in the scene, we can quickly jump to be near it. Start by selecting the existing Mammuthus object from the list. Update the object by pressing the [+ Add/Update Object] button. Under the GLTF Model Data section, click on the [Properties] button, and check/add the Landmark property. Add the label “Mammuthus primigenius (Blumbach)”. The landmarks list will automatically update once this property is added. Now in the landmarks list and press the ‘Mammuthus primigenius (Blumbach)’ entry. tip . You can control the distance and/or position you are placed from a landmark in the landmark properties either with a randomRadiusMin and randomRadiusMax, or an offsetPosition. Otherwise, you may be placed in the middle of the object! . ",
    "url": "https://docs.arenaxr.org/content/overview/build.html#add-landmarks",
    "relUrl": "/content/overview/build.html#add-landmarks"
  },"230": {
    "doc": "Build Scenes",
    "title": "See your scene in Augmented Reality (AR)",
    "content": "In an AR device (e.g, an AR headset or a tablet or mobile phone with passthrough AR capabilities), you can press the [AR] button at the bottom left (the AR button is not visible in devices that are not AR capable, such as a desktop). It will initiate an AR session where the background environment is hidden when entering AR (this is the default setting, but might vary depending on the configuration of your scene). Your scene’s origin will be placed relative to your device’s location in the real world when the AR session starts. Usually, you will want to anchor your scene in the real world. The following overview section has a quick AR example showing how to anchor a scene in the real world. Check our section on miXed Reality (XR) Experiences for details on this and other aspects of creating AR experiences in ARENA. goal . Create an ARENA scene and add your scanned object to the scene! The animation may not trigger. You should trigger it with Python code (see the next section). Icons made by Smashicons, Freepik from www.flaticon.com . ",
    "url": "https://docs.arenaxr.org/content/overview/build.html#see-your-scene-in-augmented-reality-ar",
    "relUrl": "/content/overview/build.html#see-your-scene-in-augmented-reality-ar"
  },"231": {
    "doc": "Build Scenes",
    "title": "Build Scenes",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/overview/build.html",
    "relUrl": "/content/overview/build.html"
  },"232": {
    "doc": "Build",
    "title": "Build Notes",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/unity/build.html#build-notes",
    "relUrl": "/content/unity/build.html#build-notes"
  },"233": {
    "doc": "Build",
    "title": "For All Platforms Debug Notes",
    "content": ". | Follow the startup project setup. | Edit &gt; Project Settings &gt; Player: Create a meaningful Package Name like com.companyname.appname… . | Company Name: companyname (sample) | Product Name: appname (sample) | . | Edit &gt; Project Settings &gt; Player &gt; Graphics &gt; Video: . | Always Included Shaders to include: . | Standard | Unlit/Color | GLTFUtility/Standard (Metallic) | GLTFUtility/Standard Transparent (Metallic) | GLTFUtility/Standard (Specular) | GLTFUtility/Standard Transparent (Specular) | . | . | . ",
    "url": "https://docs.arenaxr.org/content/unity/build.html#for-all-platforms-debug-notes",
    "relUrl": "/content/unity/build.html#for-all-platforms-debug-notes"
  },"234": {
    "doc": "Build",
    "title": "Mobile Platforms Debug Notes",
    "content": ". | Install a good device debug logging package to your project like LunarConsole. | . ",
    "url": "https://docs.arenaxr.org/content/unity/build.html#mobile-platforms-debug-notes",
    "relUrl": "/content/unity/build.html#mobile-platforms-debug-notes"
  },"235": {
    "doc": "Build",
    "title": "Android Debug Notes",
    "content": "Tested on Android 10 (API 29). | Edit &gt; Project Settings &gt; Player &gt; iOS &gt; Identification: Override default if desired: . | Package Name: com.companyname.appname (sample) | . | Edit &gt; Project Settings &gt; Player &gt; Android &gt; Other Settings &gt; Identification: . | Minimum API Level: at least API 24 (for XR/ARCore). | . | Edit &gt; Project Settings &gt; Player &gt; Android &gt; Other Settings &gt; Configuration:: . | Api Compatibility Level to: .NET 4.x. | Install Location to: Automatic or Force Internal. | Internet Access to: Require. | Write Permission to: Internal. | . | Edit &gt; Project Settings &gt; Player &gt; Android &gt; Other Settings &gt; Script Compilation: . | Scripted Define Symbols to include: . | SSL | . | . | Switch platform to Android and Build and Run the app to generate the proper Android app data files folder. | [Daily Temporary]: Switch platform to PC, Mac &amp; Linux Standalone. | [Daily Temporary]: Click the Play button to update the MQTT Token for the desktop. | [Daily Temporary]: Either… . | Run the bash script ./Tests/Auth/android-add-auth.sh com.companyname.appname to copy the desktop MQTT auth token to the Android app file storage. | Use Windows Explorer or MacOS Android File Transfer to copy the file .arena_mqtt_auth from desktop path~/.arena/unity/arenaxr.org/s/.arena_mqtt_auth to device path /storage/emulated/0/Android/data/com.companyname.appname/files/.arena_mqtt_auth. | . | Switch platform to Android and Build and Run the app. | The library will use a local file if it exists for auth at: /storage/emulated/0/Android/data/com.companyname.appname/files/.arena_mqtt_auth. | [Eventually]: To use the default Android-only auth flow, remove this local token from the device with ./Tests/Auth/android-remove-auth.sh com.companyname.appname. | . ",
    "url": "https://docs.arenaxr.org/content/unity/build.html#android-debug-notes",
    "relUrl": "/content/unity/build.html#android-debug-notes"
  },"236": {
    "doc": "Build",
    "title": "iOS Debug Notes",
    "content": "Tested on iOS 15. NOTE: iOS builds are currently non-functional at runtime due to use of dynamic objects as they won’t cross-compile. Status: https://github.com/arenaxr/arena-unity/issues/22. | Edit &gt; Project Settings &gt; Player &gt; iOS &gt; Identification: Override default if desired: . | Bundle Identifier: com.companyname.appname (sample) | . | Edit &gt; Project Settings &gt; Player &gt; iOS &gt; Other Settings &gt; Configuration:: . | Api Compatibility Level to: .NET 4.x. | Camera Usage Description: something like Using iOS camera for ARENA AR. | Target minimum iOS Version: to 11.0. | Requires ARKit support: to Yes. | . | Edit &gt; Project Settings &gt; Player &gt; iOS &gt; Other Settings &gt; Script Compilation: . | Scripted Define Symbols to include: . | SSL | . | . | Switch platform to iOS and Build and Run the app to generate the proper iOS app data files folder. | [Daily Temporary]: Switch platform to PC, Mac &amp; Linux Standalone. | [Daily Temporary]: Click the Play button to update the MQTT Token for the desktop. | [Daily Temporary]: Use iTunes File Sharing or Windows Explorer or MacOS Finder to copy the file .arena_mqtt_auth from desktop path~/.arena/unity/arenaxr.org/s/.arena_mqtt_auth to device path appname/.arena_mqtt_auth. | Switch platform to iOS and Build and Run the app. | The library will use a local file if it exists for auth at the iOS appname Files path: appname/.arena_mqtt_auth. | [Eventually]: To use the default iOS-only auth flow, remove this local token from the device by using Windows Explorer or MacOS Finder to delete this entire folder appname from your device. | . ",
    "url": "https://docs.arenaxr.org/content/unity/build.html#ios-debug-notes",
    "relUrl": "/content/unity/build.html#ios-debug-notes"
  },"237": {
    "doc": "Build",
    "title": "Build",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/unity/build.html",
    "relUrl": "/content/unity/build.html"
  },"238": {
    "doc": "Scene Callbacks",
    "title": "ARENA Library Scene Callbacks",
    "content": "Library supported callback functions. ",
    "url": "https://docs.arenaxr.org/content/python/callbacks.html#arena-library-scene-callbacks",
    "relUrl": "/content/python/callbacks.html#arena-library-scene-callbacks"
  },"239": {
    "doc": "Scene Callbacks",
    "title": "Scene callbacks",
    "content": "on_msg_callback . This is called whenever there is a new message sent to the client. Use this whenever you want to sniff out all incoming messages. Usage: . # [scene] is the Scene that called the callback # [obj] will be an Object instance # [msg] is the raw JSON message as a dict def on_msg_callback(scene, obj, msg): ## do stuff with obj here obj.object_id obj.data.position.x obj.data.scale.y # etc. # could also do obj[\"object_id\"] or msg[\"object_id\"] scene.on_msg_callback = on_msg_callback . new_obj_callback . This is called whenever there is a new object that has been created in the scene, one that the user does not have a reference to. Use this to make references to any new objects that may appear during a programs lifetime. Also a good way to find camera ID’s. Usage: . # [scene] is the Scene that called the callback # [obj] will be an Object instance # [msg] is the raw JSON message as a dict def new_obj_callback(scene, obj, msg): ## do stuff with obj here obj.object_id obj.data.position.x obj.data.scale.y # etc. # could also do obj[\"object_id\"] or msg[\"object_id\"] scene.new_obj_callback = new_obj_callback . delete_obj_callback . This is called whenever there is an object has been deleted in the scene. arena-py will look for all “action” = “delete” messages and call this callback. Use this to delete references and to be notified when an object is removed by another user or program. Usage: . # [scene] is the Scene that called the callback # [obj] will be an Object instance # [msg] is the raw JSON message as a dict def delete_obj_callback(scene, obj, msg): ## do stuff with obj here obj.object_id obj.data.position.x obj.data.scale.y # etc. # could also do obj[\"object_id\"] or msg[\"object_id\"] scene.delete_obj_callback = delete_obj_callback . end_program_callback . This is called whenever the program is ending from the SIGINT, Crtl-C, or other kill process. Use this to cleanup resources you don’t want in the scene when the program ends. This is especially useful for persisted objects use created that you want to be removed. Usage: . # [scene] is the Scene that called the callback def end_program_callback(scene): ## do stuff with scene root objects here scene.delete_object(appParentObject) scene.delete_object(otherAppParentObject) print(\"App Terminated.\") # etc. scene.end_program_callback = end_program_callback . ",
    "url": "https://docs.arenaxr.org/content/python/callbacks.html#scene-callbacks",
    "relUrl": "/content/python/callbacks.html#scene-callbacks"
  },"240": {
    "doc": "Scene Callbacks",
    "title": "User callbacks",
    "content": "user_join_callback . This is called whenever the library detects/finds a new user that it hasn’t seen before in a scene. Note: this is not necessarily called when a user “joins” a scene, rather, it is called when the library first sees a Camera object/receives an “update” message from a user. Usage: . def user_join_callback(camera): ## Get access to user state # camera is a Camera class instance (see Objects) camera.object_id camera.displayName camera.hasVideo # etc. scene.user_join_callback = user_join_callback . user_left_callback . This is called whenever a user leaves a scene/sends a delete message. Usage: . def user_left_callback(camera): ## Get access to user state # camera is a Camera class instance (see Objects) camera.object_id camera.displayName camera.hasVideo # etc. scene.user_left_callback = user_left_callback . Adding callbacks when you instantiate the class . You can also add callbacks like so: . from arena import * def on_msg_callback(scene, obj, msg): pass def new_obj_callback(scene, obj, msg): pass def delete_obj_callback(scene, obj, msg): pass scene = Scene(..., on_msg_callback=on_msg_callback, new_obj_callback=new_obj_callback, delete_obj_callback=delete_obj_callback) . ",
    "url": "https://docs.arenaxr.org/content/python/callbacks.html#user-callbacks",
    "relUrl": "/content/python/callbacks.html#user-callbacks"
  },"241": {
    "doc": "Scene Callbacks",
    "title": "Custom Message Callbacks",
    "content": "If you need to use an MQTT client, the Scene object exposes a way to use its MQTT client to subscribe to custom topics. def led_toggle(client, userdata, msg): # do stuff here scene.message_callback_add(\"custom/control/light\", led_toggle) . ",
    "url": "https://docs.arenaxr.org/content/python/callbacks.html#custom-message-callbacks",
    "relUrl": "/content/python/callbacks.html#custom-message-callbacks"
  },"242": {
    "doc": "Scene Callbacks",
    "title": "Scene Callbacks",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/python/callbacks.html",
    "relUrl": "/content/python/callbacks.html"
  },"243": {
    "doc": "Camera Override",
    "title": "Camera Override",
    "content": "Camera Override . All wire objects have a set of basic attributes {object_id, action, type, persist, data}. The data attribute defines the object-specific attributes . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/camera-override.html#camera-override",
    "relUrl": "/content/schemas/message/camera-override.html#camera-override"
  },"244": {
    "doc": "Camera Override",
    "title": "Camera Override Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | object_id | string |   | Object identifier; Must be a valid camera ID. | Yes | . | action | string; One of: ['create', 'delete', 'update'] | 'update' | Message action create, update, delete. | Yes | . | persist | boolean | False | Persist this object in the database. | Yes | . | type | string; Must be: camera-override | 'camera-override' | ARENA camera override data | Yes | . | data | camera-override |   | Object data payload; Camera Override config data. | Yes | . Camera Override Data Attributes . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/camera-override.html#camera-override-attributes",
    "relUrl": "/content/schemas/message/camera-override.html#camera-override-attributes"
  },"245": {
    "doc": "Camera Override",
    "title": "Camera Override",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/camera-override.html",
    "relUrl": "/content/schemas/message/camera-override.html"
  },"246": {
    "doc": "Camera",
    "title": "Camera",
    "content": "Camera is the pose and arena-user component data representing a user avatar. All wire objects have a set of basic attributes {object_id, action, type, persist, data}. The data attribute defines the object-specific attributes . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/camera.html#camera",
    "relUrl": "/content/schemas/message/camera.html#camera"
  },"247": {
    "doc": "Camera",
    "title": "Camera Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | object_id | string |   | A uuid or otherwise unique identifier for this object. | Yes | . | persist | boolean | True | Persist this object in the database. | Yes | . | type | string; Must be: object | 'object' | AFrame 3D Object | Yes | . | action | string; One of: ['create', 'delete', 'update'] | 'create' | Message action create, update, delete. | Yes | . | ttl | integer |   | When applied to an entity, the entity will remove itself from DOM after the specified number of seconds. Update is allowed, which will reset the timer to start from that moment. | No | . | data | Camera data |   | Camera Data | Yes | . Camera Data Attributes . | Attribute | Type | Default | Description | Required | . | object_type | string; Must be: camera | camera | 3D object type. | Yes | . | arena-user | arena-user |   | Another user’s camera in the ARENA. Handles Jitsi and display name updates. | Yes | . | parent | string |   | Parent’s object_id. Child objects inherit attributes of their parent, for example scale and translation. | No | . | position | position |   | 3D object position. | Yes | . | rotation | rotation |   | 3D object rotation in quaternion representation; Right-handed coordinate system. Euler degrees are deprecated in wire message format. | Yes | . | scale | scale |   | 3D object scale. | No | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/camera.html#camera-attributes",
    "relUrl": "/content/schemas/message/camera.html#camera-attributes"
  },"248": {
    "doc": "Camera",
    "title": "Camera",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/camera.html",
    "relUrl": "/content/schemas/message/camera.html"
  },"249": {
    "doc": "arena.objects.camera",
    "title": "\narena.objects.camera    ",
    "content": "class Camera(arena.objects.arena_object.Object): Camera object class to manage its properties in the ARENA: Camera is the pose and arena-user component data representing a user avatar. Parameters . | dict arena_user: arena-user (optional) | . Camera(object_id, **kwargs) object_type = &#39;camera&#39; hasAudio hasVideo hasAvatar displayName jistsiId hands hand_found_callback hand_remove_callback Inherited Members . arena.objects.arena_object.Object type all_objects evt_handler update_handler animations delayed_prop_tasks update_attributes dispatch_animation remove_animation_at_index clear_animations clickable json_preprocess json_postprocess json get add remove exists arena.base_object.BaseObject json_encode ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/camera.html",
    "relUrl": "/content/python-api/objects/camera.html"
  },"250": {
    "doc": "arena.objects.camera",
    "title": "arena.objects.camera",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/camera.html",
    "relUrl": "/content/python-api/objects/camera.html"
  },"251": {
    "doc": "Capsule",
    "title": "Capsule",
    "content": "Capsule Geometry. All wire objects have a set of basic attributes {object_id, action, type, persist, data}. The data attribute defines the object-specific attributes . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/capsule.html#capsule",
    "relUrl": "/content/schemas/message/capsule.html#capsule"
  },"252": {
    "doc": "Capsule",
    "title": "Capsule Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | object_id | string |   | A uuid or otherwise unique identifier for this object. | Yes | . | persist | boolean | True | Persist this object in the database. | Yes | . | type | string; Must be: object | 'object' | AFrame 3D Object | Yes | . | action | string; One of: ['create', 'delete', 'update'] | 'create' | Message action create, update, delete. | Yes | . | ttl | integer |   | When applied to an entity, the entity will remove itself from DOM after the specified number of seconds. Update is allowed, which will reset the timer to start from that moment. | No | . | data | Capsule data |   | Capsule Data | Yes | . Capsule Data Attributes . | Attribute | Type | Default | Description | Required | . | object_type | string; Must be: capsule | capsule | 3D object type. | Yes | . | length | number | 1 | length | Yes | . | radius | number | 1 | radius | Yes | . | segmentsCap | integer | 18 | segments capsule | No | . | segmentsRadial | integer | 36 | segments radial | No | . | parent | string |   | Parent’s object_id. Child objects inherit attributes of their parent, for example scale and translation. | No | . | position | position |   | 3D object position. | Yes | . | rotation | rotation |   | 3D object rotation in quaternion representation; Right-handed coordinate system. Euler degrees are deprecated in wire message format. | Yes | . | scale | scale |   | 3D object scale. | No | . | animation | animation |   | Animate and tween values. | No | . | armarker | armarker |   | A location marker (such as an AprilTag, a lightAnchor, or an UWB tag), used to anchor scenes, or scene objects, in the real world. | No | . | click-listener | click-listener |   | Object will listen for mouse events like clicks. | No | . | box-collision-listener | box-collision-listener |   | Listen for bounding-box collisions with user camera and hands. Must be applied to an object or model with geometric mesh. Collisions are determined by course bounding-box overlaps. | No | . | collision-listener | string |   | Name of the collision-listener, default can be empty string. Collisions trigger click events. | No | . | blip | blip |   | When the object is created or deleted, it will animate in/out of the scene instead of appearing/disappearing instantly. Must have a geometric mesh. | No | . | static-body | static-body |   | A fixed-position or animated object. Other objects may collide with static bodies, but static bodies themselves are unaffected by gravity and collisions. | No | . | dynamic-body | dynamic-body |   | A freely-moving object. Dynamic bodies have mass, collide with other objects, bounce or slow during collisions, and fall if gravity is enabled. | No | . | goto-landmark | goto-landmark |   | Teleports user to the landmark with the given name. Requires click-listener. | No | . | goto-url | goto-url |   | Load new URL when object is clicked. Requires click-listener. | No | . | hide-on-enter-ar | boolean; Must be: True | True | Hide object when entering AR. Remove component to not hide. | No | . | hide-on-enter-vr | boolean; Must be: True | True | Hide object when entering VR. Remove component to not hide. | No | . | show-on-enter-ar | boolean; Must be: True | True | Show object when entering AR. Hidden otherwise. | No | . | show-on-enter-vr | boolean; Must be: True | True | Show object when entering VR. Hidden otherwise. | No | . | impulse | impulse |   | Apply an impulse to an object to set it in motion. This happens in conjunction with an event. Requires click-listener and physics. | No | . | landmark | landmark |   | Define entities as a landmark; Landmarks appears in the landmark list and you can move (teleport) to them; You can define the behavior of the teleport: if you will be at a fixed or random distance, looking at the landmark, fixed offset or if it is constrained by a navmesh (when it exists). | No | . | material-extras | material-extras |   | Define extra material properties, namely texture encoding, whether to render the material’s color and render order. | No | . | shadow | shadow |   | The shadow component enables shadows for an entity and its children. Adding the shadow component alone is not enough to display shadows in your scene. We must have at least one light with castShadow: true enabled. | No | . | sound | sound |   | The sound component defines the entity as a source of sound or audio. The sound component can be positional and is thus affected by the component’s position. | No | . | textinput | textinput |   | Opens an HTML prompt when clicked. Sends text input as an event on MQTT. Requires click-listener. | No | . | url | string |   | Use File Store paths under ‘store/users/username’, see CDN and other storage options in the description above. | No | . | remote-render | remote-render |   | Whether or not an object should be remote rendered [Experimental]. | No | . | video-control | video-control |   | Adds a video to an entity and controls its playback. | No | . | attribution | attribution |   | Attribution Component. Saves attribution data in any entity. | No | . | spe-particles | spe-particles |   | GPU based particle systems in A-Frame. | No | . | look-at | string |   | The look-at component defines the behavior for an entity to dynamically rotate or face towards another entity or position. Use ‘#my-camera’ to face the user camera, otherwise can take either a vec3 position or a query selector to another entity. | No | . | buffer | boolean | True | Transform geometry into a BufferGeometry to reduce memory usage at the cost of being harder to manipulate (geometries only: box, circle, cone, …). | No | . | jitsi-video | jitsi-video |   | Apply a jitsi video source to the geometry. | No | . | material | material | {'color': '#7f7f7f'} | The material properties of the object’s surface. | No | . | multisrc | multisrc |   | Define multiple visual sources applied to an object. | No | . | screenshareable | boolean | True | Whether or not a user can screenshare on an object. | No | . | skipCache | boolean | False | Disable retrieving the shared geometry object from the cache. (geometries only: box, circle, cone, …). | No | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/capsule.html#capsule-attributes",
    "relUrl": "/content/schemas/message/capsule.html#capsule-attributes"
  },"253": {
    "doc": "Capsule",
    "title": "Capsule",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/capsule.html",
    "relUrl": "/content/schemas/message/capsule.html"
  },"254": {
    "doc": "arena.objects.capsule",
    "title": "\narena.objects.capsule    ",
    "content": "class Capsule(arena.objects.arena_object.Object): Capsule object class to manage its properties in the ARENA: Capsule Geometry. Parameters . | float length: length Defaults to '1' (optional) | float radius: radius Defaults to '1' (optional) | int segmentsCap: segments capsule Defaults to '18' (optional) | int segmentsRadial: segments radial Defaults to '36' (optional) | . Capsule(**kwargs) object_type = &#39;capsule&#39; Inherited Members . arena.objects.arena_object.Object type all_objects evt_handler update_handler animations delayed_prop_tasks update_attributes dispatch_animation remove_animation_at_index clear_animations clickable json_preprocess json_postprocess json get add remove exists arena.base_object.BaseObject json_encode ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/capsule.html",
    "relUrl": "/content/python-api/objects/capsule.html"
  },"255": {
    "doc": "arena.objects.capsule",
    "title": "arena.objects.capsule",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/capsule.html",
    "relUrl": "/content/python-api/objects/capsule.html"
  },"256": {
    "doc": "Circle",
    "title": "Circle",
    "content": "Circle Geometry. All wire objects have a set of basic attributes {object_id, action, type, persist, data}. The data attribute defines the object-specific attributes . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/circle.html#circle",
    "relUrl": "/content/schemas/message/circle.html#circle"
  },"257": {
    "doc": "Circle",
    "title": "Circle Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | object_id | string |   | A uuid or otherwise unique identifier for this object. | Yes | . | persist | boolean | True | Persist this object in the database. | Yes | . | type | string; Must be: object | 'object' | AFrame 3D Object | Yes | . | action | string; One of: ['create', 'delete', 'update'] | 'create' | Message action create, update, delete. | Yes | . | ttl | integer |   | When applied to an entity, the entity will remove itself from DOM after the specified number of seconds. Update is allowed, which will reset the timer to start from that moment. | No | . | data | Circle data |   | Circle Data | Yes | . Circle Data Attributes . | Attribute | Type | Default | Description | Required | . | object_type | string; Must be: circle | circle | 3D object type. | Yes | . | radius | number | 1 | radius | Yes | . | segments | integer | 32 | segments | No | . | thetaLength | number | 360 | theta length | No | . | thetaStart | number | 0 | theta start | No | . | parent | string |   | Parent’s object_id. Child objects inherit attributes of their parent, for example scale and translation. | No | . | position | position |   | 3D object position. | Yes | . | rotation | rotation |   | 3D object rotation in quaternion representation; Right-handed coordinate system. Euler degrees are deprecated in wire message format. | Yes | . | scale | scale |   | 3D object scale. | No | . | animation | animation |   | Animate and tween values. | No | . | armarker | armarker |   | A location marker (such as an AprilTag, a lightAnchor, or an UWB tag), used to anchor scenes, or scene objects, in the real world. | No | . | click-listener | click-listener |   | Object will listen for mouse events like clicks. | No | . | box-collision-listener | box-collision-listener |   | Listen for bounding-box collisions with user camera and hands. Must be applied to an object or model with geometric mesh. Collisions are determined by course bounding-box overlaps. | No | . | collision-listener | string |   | Name of the collision-listener, default can be empty string. Collisions trigger click events. | No | . | blip | blip |   | When the object is created or deleted, it will animate in/out of the scene instead of appearing/disappearing instantly. Must have a geometric mesh. | No | . | static-body | static-body |   | A fixed-position or animated object. Other objects may collide with static bodies, but static bodies themselves are unaffected by gravity and collisions. | No | . | dynamic-body | dynamic-body |   | A freely-moving object. Dynamic bodies have mass, collide with other objects, bounce or slow during collisions, and fall if gravity is enabled. | No | . | goto-landmark | goto-landmark |   | Teleports user to the landmark with the given name. Requires click-listener. | No | . | goto-url | goto-url |   | Load new URL when object is clicked. Requires click-listener. | No | . | hide-on-enter-ar | boolean; Must be: True | True | Hide object when entering AR. Remove component to not hide. | No | . | hide-on-enter-vr | boolean; Must be: True | True | Hide object when entering VR. Remove component to not hide. | No | . | show-on-enter-ar | boolean; Must be: True | True | Show object when entering AR. Hidden otherwise. | No | . | show-on-enter-vr | boolean; Must be: True | True | Show object when entering VR. Hidden otherwise. | No | . | impulse | impulse |   | Apply an impulse to an object to set it in motion. This happens in conjunction with an event. Requires click-listener and physics. | No | . | landmark | landmark |   | Define entities as a landmark; Landmarks appears in the landmark list and you can move (teleport) to them; You can define the behavior of the teleport: if you will be at a fixed or random distance, looking at the landmark, fixed offset or if it is constrained by a navmesh (when it exists). | No | . | material-extras | material-extras |   | Define extra material properties, namely texture encoding, whether to render the material’s color and render order. | No | . | shadow | shadow |   | The shadow component enables shadows for an entity and its children. Adding the shadow component alone is not enough to display shadows in your scene. We must have at least one light with castShadow: true enabled. | No | . | sound | sound |   | The sound component defines the entity as a source of sound or audio. The sound component can be positional and is thus affected by the component’s position. | No | . | textinput | textinput |   | Opens an HTML prompt when clicked. Sends text input as an event on MQTT. Requires click-listener. | No | . | url | string |   | Use File Store paths under ‘store/users/username’, see CDN and other storage options in the description above. | No | . | remote-render | remote-render |   | Whether or not an object should be remote rendered [Experimental]. | No | . | video-control | video-control |   | Adds a video to an entity and controls its playback. | No | . | attribution | attribution |   | Attribution Component. Saves attribution data in any entity. | No | . | spe-particles | spe-particles |   | GPU based particle systems in A-Frame. | No | . | look-at | string |   | The look-at component defines the behavior for an entity to dynamically rotate or face towards another entity or position. Use ‘#my-camera’ to face the user camera, otherwise can take either a vec3 position or a query selector to another entity. | No | . | buffer | boolean | True | Transform geometry into a BufferGeometry to reduce memory usage at the cost of being harder to manipulate (geometries only: box, circle, cone, …). | No | . | jitsi-video | jitsi-video |   | Apply a jitsi video source to the geometry. | No | . | material | material | {'color': '#7f7f7f'} | The material properties of the object’s surface. | No | . | multisrc | multisrc |   | Define multiple visual sources applied to an object. | No | . | screenshareable | boolean | True | Whether or not a user can screenshare on an object. | No | . | skipCache | boolean | False | Disable retrieving the shared geometry object from the cache. (geometries only: box, circle, cone, …). | No | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/circle.html#circle-attributes",
    "relUrl": "/content/schemas/message/circle.html#circle-attributes"
  },"258": {
    "doc": "Circle",
    "title": "Circle",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/circle.html",
    "relUrl": "/content/schemas/message/circle.html"
  },"259": {
    "doc": "arena.objects.circle",
    "title": "\narena.objects.circle    ",
    "content": "class Circle(arena.objects.arena_object.Object): Circle object class to manage its properties in the ARENA: Circle Geometry. Parameters . | float radius: radius Defaults to '1' (optional) | int segments: segments Defaults to '32' (optional) | float thetaLength: theta length Defaults to '360' (optional) | float thetaStart: theta start (optional) | . Circle(**kwargs) object_type = &#39;circle&#39; Inherited Members . arena.objects.arena_object.Object type all_objects evt_handler update_handler animations delayed_prop_tasks update_attributes dispatch_animation remove_animation_at_index clear_animations clickable json_preprocess json_postprocess json get add remove exists arena.base_object.BaseObject json_encode ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/circle.html",
    "relUrl": "/content/python-api/objects/circle.html"
  },"260": {
    "doc": "arena.objects.circle",
    "title": "arena.objects.circle",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/circle.html",
    "relUrl": "/content/python-api/objects/circle.html"
  },"261": {
    "doc": "Headless CLI",
    "title": "Running Headless Unity CLI",
    "content": "Coming Soon . Stay tuned for more details… . ",
    "url": "https://docs.arenaxr.org/content/unity/cli.html#running-headless-unity-cli",
    "relUrl": "/content/unity/cli.html#running-headless-unity-cli"
  },"262": {
    "doc": "Headless CLI",
    "title": "Headless CLI",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/unity/cli.html",
    "relUrl": "/content/unity/cli.html"
  },"263": {
    "doc": "Click Listener",
    "title": "Click Listener",
    "content": "Object will listen for mouse events like clicks. ",
    "url": "https://docs.arenaxr.org/content/schemas/message/click-listener.html#click-listener",
    "relUrl": "/content/schemas/message/click-listener.html#click-listener"
  },"264": {
    "doc": "Click Listener",
    "title": "Click Listener Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | enabled | boolean | True | Publish events, set false to disable. | Yes | . | bubble | boolean | True | Set false to prevent click events from bubbling up to parent objects. See Event Bubbling. | Yes | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/click-listener.html#click-listener-attributes",
    "relUrl": "/content/schemas/message/click-listener.html#click-listener-attributes"
  },"265": {
    "doc": "Click Listener",
    "title": "Click Listener",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/click-listener.html",
    "relUrl": "/content/schemas/message/click-listener.html"
  },"266": {
    "doc": "arena.attributes.click_listener",
    "title": "\narena.attributes.click_listener    ",
    "content": "class ClickListener(arena.attributes.attribute.Attribute): ClickListener attribute class to manage its properties in the ARENA: Object will listen for mouse events like clicks. Usage: click_listener=ClickListener(...) or clickable=True . Parameters . | bool bubble: Set false to prevent click events from bubbling up to parent objects. See &lt;https: //developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#event_bubbling&gt; Event Bubbling. Defaults to 'True' (optional) | bool enabled: Publish events, set false to disable. Defaults to 'True' (optional) | . ClickListener(**kwargs) Inherited Members . arena.base_object.BaseObject add json_encode json ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/click_listener.html",
    "relUrl": "/content/python-api/attributes/click_listener.html"
  },"267": {
    "doc": "arena.attributes.click_listener",
    "title": "arena.attributes.click_listener",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/click_listener.html",
    "relUrl": "/content/python-api/attributes/click_listener.html"
  },"268": {
    "doc": "Quick Meetings",
    "title": "Sharing a Link to a Meeting Space",
    "content": "You can use any of our pre-built ARENA scenes for group meetings and unique social experience if you like. We recommend cloning an existing scene so you will be able to control access to the scene for meetings. 1 - Select a Public Scene . 2 - Duplicate Scene into your own namespace . 1 2 3 - Set the scene name for your meeting . 3 4 - Copy and Share URL . 4 5 - Access Control for Scenes . 5 goal . Clone a simple scene and send the link to another user to try a 3D meeting. ",
    "url": "https://docs.arenaxr.org/content/overview/clone.html#sharing-a-link-to-a-meeting-space",
    "relUrl": "/content/overview/clone.html#sharing-a-link-to-a-meeting-space"
  },"269": {
    "doc": "Quick Meetings",
    "title": "Quick Meetings",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/overview/clone.html",
    "relUrl": "/content/overview/clone.html"
  },"270": {
    "doc": "arena.utils.cmd_interpreter",
    "title": "\narena.utils.cmd_interpreter    ",
    "content": "The ArenaCmdInterpreter is a simple line-oriented command interpreter that allows to inspect library/program state. It looks at :envvar:ENABLE_INTERPRETER to enable the interpreter. The .ArenaCmdInterpreter receives a .Scene instance and provides commands to inspect attributes and execute functions (callables) given to the constructor. The commands available are: show: displays attributes info: excutes scene functions that output information help: displays the commands available exit: terminates the program . class ArenaCmdInterpreter(cmd.Cmd): A simple framework for writing line-oriented command interpreters. These are often useful for test harnesses, administrative tools, and prototypes that will later be wrapped in a more sophisticated interface. A Cmd instance or subclass instance is a line-oriented interpreter framework. There is no good reason to instantiate Cmd itself; rather, it's useful as a superclass of an interpreter class you define yourself in order to inherit Cmd's methods and encapsulate action methods. ArenaCmdInterpreter( scene, show_attrs=(&#39;config_data&#39;, &#39;scene&#39;, &#39;users&#39;, &#39;all_objects&#39;, &#39;msg_io&#39;), get_callables=(&#39;persisted_objs&#39;, &#39;persisted_scene_option&#39;, &#39;writable_scenes&#39;, &#39;user_list&#39;), start_cmd_event=None) Instantiate a line-oriented interpreter framework. The optional argument 'completekey' is the readline name of a completion key; it defaults to the Tab key. If completekey is not None and the readline module is available, command completion is done automatically. The optional arguments stdin and stdout specify alternate input and output file objects; if not specified, sys.stdin and sys.stdout are used. intro = &#39;Welcome to the arena-py console. Type help or ? to list available commands.\\n&#39; prompt = &#39;# &#39; file = None enable_interp def do_show(self, arg): def help_show(self): def do_get(self, arg): def help_get(self): def do_exit(self, arg): def help_exit(self): Inherited Members . cmd.Cmd identchars ruler lastcmd doc_leader doc_header misc_header undoc_header nohelp use_rawinput cmdqueue completekey cmdloop precmd postcmd preloop postloop parseline onecmd emptyline default completedefault completenames complete get_names complete_help do_help print_topics columnize ",
    "url": "https://docs.arenaxr.org/content/python-api/utils/cmd_interpreter.html",
    "relUrl": "/content/python-api/utils/cmd_interpreter.html"
  },"271": {
    "doc": "arena.utils.cmd_interpreter",
    "title": "arena.utils.cmd_interpreter",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/utils/cmd_interpreter.html",
    "relUrl": "/content/python-api/utils/cmd_interpreter.html"
  },"272": {
    "doc": "arena.attributes.color",
    "title": "\narena.attributes.color    ",
    "content": "class Color(arena.attributes.attribute.Attribute): Color Attribute. Usage: color=Color(red,green,blue) or color=(red,green,blue) . Color(red=0, green=0, blue=0) hex Inherited Members . arena.base_object.BaseObject add json_encode json ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/color.html",
    "relUrl": "/content/python-api/attributes/color.html"
  },"273": {
    "doc": "arena.attributes.color",
    "title": "arena.attributes.color",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/color.html",
    "relUrl": "/content/python-api/attributes/color.html"
  },"274": {
    "doc": "Cone",
    "title": "Cone",
    "content": "Cone Geometry. All wire objects have a set of basic attributes {object_id, action, type, persist, data}. The data attribute defines the object-specific attributes . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/cone.html#cone",
    "relUrl": "/content/schemas/message/cone.html#cone"
  },"275": {
    "doc": "Cone",
    "title": "Cone Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | object_id | string |   | A uuid or otherwise unique identifier for this object. | Yes | . | persist | boolean | True | Persist this object in the database. | Yes | . | type | string; Must be: object | 'object' | AFrame 3D Object | Yes | . | action | string; One of: ['create', 'delete', 'update'] | 'create' | Message action create, update, delete. | Yes | . | ttl | integer |   | When applied to an entity, the entity will remove itself from DOM after the specified number of seconds. Update is allowed, which will reset the timer to start from that moment. | No | . | data | Cone data |   | Cone Data | Yes | . Cone Data Attributes . | Attribute | Type | Default | Description | Required | . | object_type | string; Must be: cone | cone | 3D object type. | Yes | . | height | number | 1 | height | Yes | . | openEnded | boolean | False | open ended | No | . | radiusBottom | number | 1 | radius bottom | Yes | . | radiusTop | number | 0.01 | radius top | Yes | . | segmentsHeight | integer | 18 | segments height | No | . | segmentsRadial | integer | 36 | segments radial | No | . | thetaLength | number | 360 | theta length | No | . | thetaStart | number | 0 | theta start | No | . | parent | string |   | Parent’s object_id. Child objects inherit attributes of their parent, for example scale and translation. | No | . | position | position |   | 3D object position. | Yes | . | rotation | rotation |   | 3D object rotation in quaternion representation; Right-handed coordinate system. Euler degrees are deprecated in wire message format. | Yes | . | scale | scale |   | 3D object scale. | No | . | animation | animation |   | Animate and tween values. | No | . | armarker | armarker |   | A location marker (such as an AprilTag, a lightAnchor, or an UWB tag), used to anchor scenes, or scene objects, in the real world. | No | . | click-listener | click-listener |   | Object will listen for mouse events like clicks. | No | . | box-collision-listener | box-collision-listener |   | Listen for bounding-box collisions with user camera and hands. Must be applied to an object or model with geometric mesh. Collisions are determined by course bounding-box overlaps. | No | . | collision-listener | string |   | Name of the collision-listener, default can be empty string. Collisions trigger click events. | No | . | blip | blip |   | When the object is created or deleted, it will animate in/out of the scene instead of appearing/disappearing instantly. Must have a geometric mesh. | No | . | static-body | static-body |   | A fixed-position or animated object. Other objects may collide with static bodies, but static bodies themselves are unaffected by gravity and collisions. | No | . | dynamic-body | dynamic-body |   | A freely-moving object. Dynamic bodies have mass, collide with other objects, bounce or slow during collisions, and fall if gravity is enabled. | No | . | goto-landmark | goto-landmark |   | Teleports user to the landmark with the given name. Requires click-listener. | No | . | goto-url | goto-url |   | Load new URL when object is clicked. Requires click-listener. | No | . | hide-on-enter-ar | boolean; Must be: True | True | Hide object when entering AR. Remove component to not hide. | No | . | hide-on-enter-vr | boolean; Must be: True | True | Hide object when entering VR. Remove component to not hide. | No | . | show-on-enter-ar | boolean; Must be: True | True | Show object when entering AR. Hidden otherwise. | No | . | show-on-enter-vr | boolean; Must be: True | True | Show object when entering VR. Hidden otherwise. | No | . | impulse | impulse |   | Apply an impulse to an object to set it in motion. This happens in conjunction with an event. Requires click-listener and physics. | No | . | landmark | landmark |   | Define entities as a landmark; Landmarks appears in the landmark list and you can move (teleport) to them; You can define the behavior of the teleport: if you will be at a fixed or random distance, looking at the landmark, fixed offset or if it is constrained by a navmesh (when it exists). | No | . | material-extras | material-extras |   | Define extra material properties, namely texture encoding, whether to render the material’s color and render order. | No | . | shadow | shadow |   | The shadow component enables shadows for an entity and its children. Adding the shadow component alone is not enough to display shadows in your scene. We must have at least one light with castShadow: true enabled. | No | . | sound | sound |   | The sound component defines the entity as a source of sound or audio. The sound component can be positional and is thus affected by the component’s position. | No | . | textinput | textinput |   | Opens an HTML prompt when clicked. Sends text input as an event on MQTT. Requires click-listener. | No | . | url | string |   | Use File Store paths under ‘store/users/username’, see CDN and other storage options in the description above. | No | . | remote-render | remote-render |   | Whether or not an object should be remote rendered [Experimental]. | No | . | video-control | video-control |   | Adds a video to an entity and controls its playback. | No | . | attribution | attribution |   | Attribution Component. Saves attribution data in any entity. | No | . | spe-particles | spe-particles |   | GPU based particle systems in A-Frame. | No | . | look-at | string |   | The look-at component defines the behavior for an entity to dynamically rotate or face towards another entity or position. Use ‘#my-camera’ to face the user camera, otherwise can take either a vec3 position or a query selector to another entity. | No | . | buffer | boolean | True | Transform geometry into a BufferGeometry to reduce memory usage at the cost of being harder to manipulate (geometries only: box, circle, cone, …). | No | . | jitsi-video | jitsi-video |   | Apply a jitsi video source to the geometry. | No | . | material | material | {'color': '#7f7f7f'} | The material properties of the object’s surface. | No | . | multisrc | multisrc |   | Define multiple visual sources applied to an object. | No | . | screenshareable | boolean | True | Whether or not a user can screenshare on an object. | No | . | skipCache | boolean | False | Disable retrieving the shared geometry object from the cache. (geometries only: box, circle, cone, …). | No | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/cone.html#cone-attributes",
    "relUrl": "/content/schemas/message/cone.html#cone-attributes"
  },"276": {
    "doc": "Cone",
    "title": "Cone",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/cone.html",
    "relUrl": "/content/schemas/message/cone.html"
  },"277": {
    "doc": "arena.objects.cone",
    "title": "\narena.objects.cone    ",
    "content": "class Cone(arena.objects.arena_object.Object): Cone object class to manage its properties in the ARENA: Cone Geometry. Parameters . | float height: height Defaults to '1' (optional) | bool openEnded: open ended (optional) | float radiusBottom: radius bottom Defaults to '1' (optional) | float radiusTop: radius top Defaults to '0.01' (optional) | int segmentsHeight: segments height Defaults to '18' (optional) | int segmentsRadial: segments radial Defaults to '36' (optional) | float thetaLength: theta length Defaults to '360' (optional) | float thetaStart: theta start (optional) | . Cone(**kwargs) object_type = &#39;cone&#39; Inherited Members . arena.objects.arena_object.Object type all_objects evt_handler update_handler animations delayed_prop_tasks update_attributes dispatch_animation remove_animation_at_index clear_animations clickable json_preprocess json_postprocess json get add remove exists arena.base_object.BaseObject json_encode ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/cone.html",
    "relUrl": "/content/python-api/objects/cone.html"
  },"278": {
    "doc": "arena.objects.cone",
    "title": "arena.objects.cone",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/cone.html",
    "relUrl": "/content/python-api/objects/cone.html"
  },"279": {
    "doc": "Contributing",
    "title": "Contributing to ARENA",
    "content": "Thanks for your willingness to help improve our flexible, programmatic, mixed-reality platform! ARENA is a project led by Carnegie Mellon University, a project of the CONIX Research Center, a collaboration between six US-based universities. This guide will help you find the right path to contribute. Feel free to join the ARENA CONIX slack and ask us questions. ",
    "url": "https://docs.arenaxr.org/content/contributing.html#contributing-to-arena",
    "relUrl": "/content/contributing.html#contributing-to-arena"
  },"280": {
    "doc": "Contributing",
    "title": "The Team",
    "content": "Our team is composed of faculty, staff and several students and is continuously being strengthened. See our GitHub for the list of contributors in each repository. ",
    "url": "https://docs.arenaxr.org/content/contributing.html#the-team",
    "relUrl": "/content/contributing.html#the-team"
  },"281": {
    "doc": "Contributing",
    "title": "Research Platform",
    "content": "The ARENA may be deployed by you or us in many different locations. We maintain a production ARENA Server instance at arenaxr.org. ",
    "url": "https://docs.arenaxr.org/content/contributing.html#research-platform",
    "relUrl": "/content/contributing.html#research-platform"
  },"282": {
    "doc": "Contributing",
    "title": "Proposing New Features",
    "content": "If you want to work on something that there is no GitHub issue for, it’s best to document your plan before working on a Pull Request. To do so, follow these steps: . 1. Create a new GitHub issue associated with the relevant repository and propose your change there with: . | Why is the change needed? | How will it be implemented? | . 2. An ARENA team member will respond and let you know if the Issue is acceptable to work on or if some implementation modification is needed. 3. If you have questions or are not sure about the feature, please do ask us questions in our ARENA CONIX slack Slack #questions channel. ",
    "url": "https://docs.arenaxr.org/content/contributing.html#proposing-new-features",
    "relUrl": "/content/contributing.html#proposing-new-features"
  },"283": {
    "doc": "Contributing",
    "title": "Issue Reporting",
    "content": ". | There are 2 basic things that will help us greatly for any issue you report: . | Is it reproducible and what are the steps to reproduce the problem? | Where was the issue? Which hostname and the version in use? | . | Deployed web server issues please include version here from the commit history at https://github.com/arenaxr/arena-services-docker . | Python client issues please include the version here from pip show arena-py. | . ",
    "url": "https://docs.arenaxr.org/content/contributing.html#issue-reporting",
    "relUrl": "/content/contributing.html#issue-reporting"
  },"284": {
    "doc": "Contributing",
    "title": "Pull Requests and Code Review",
    "content": "Some changes will require internal discussion to see if the needs of the project are still being met which can change from time to time. A list of which repo to use are listed at the end of this guide. | A great way to start is to try development of a scene using the Python and scene builder tutorials. | Once familiar, good first issues to help with are labeled with help wanted and good first issue. | . ",
    "url": "https://docs.arenaxr.org/content/contributing.html#pull-requests-and-code-review",
    "relUrl": "/content/contributing.html#pull-requests-and-code-review"
  },"285": {
    "doc": "Contributing",
    "title": "Process for Pull Requests",
    "content": ". | Create your own fork of the appropriate repository and clone it and any submodules. | Create your own branch with the name of your change, and do not use master or main branches for your change. | Create a draft PR for your changes. | Push changes to your PR/branch often. | Submit your PR and request a code review from us. | After all rounds of review feedback are addressed we will manage merging the PR. | . ",
    "url": "https://docs.arenaxr.org/content/contributing.html#process-for-pull-requests",
    "relUrl": "/content/contributing.html#process-for-pull-requests"
  },"286": {
    "doc": "Contributing",
    "title": "Language Style Guides",
    "content": "We use a number of languages and technologies to run the ARENA. You may need to have at least a basic familiarity with JavaScript, Python, and CSS/HTML. As such, we have some guidance for maintaining some style standards in each repo. ",
    "url": "https://docs.arenaxr.org/content/contributing.html#language-style-guides",
    "relUrl": "/content/contributing.html#language-style-guides"
  },"287": {
    "doc": "Contributing",
    "title": "Which Issue Tracker?",
    "content": "The ARENA is composed from a number of repositories. That can be confusing. We recommend searching for an existing issue from our list first and familiarizing yourself with this basic map: . | ARENA Client Website: arenaxr/arena-web-core/issues | ARENA Python client: arenaxr/arena-py/issues | ARENA Unity client: arenaxr/arena-unity/issues | ARENA Docs Website: arenaxr/arena-docs/issues | . Server components: . | ATLAS Server: arenaxr/ATLAS/issues | ARENA MQTT Broker: SilverLineFramework/mosquitto-broker/issues | ARENA Runtime Supervisor: SilverLineFramework/orchestrator/issues | ARENA User Account DB: arenaxr/arena-account/issues | ARENA User Scene Persistence DB: arenaxr/arena-persist/issues | ARENA User File Manager: arenaxr/arena-store/issues | . ",
    "url": "https://docs.arenaxr.org/content/contributing.html#which-issue-tracker",
    "relUrl": "/content/contributing.html#which-issue-tracker"
  },"288": {
    "doc": "Contributing",
    "title": "Code of Conduct",
    "content": "We adhere to the Contributor Covenant Code of Conduct: https://www.contributor-covenant.org/version/2/0/code_of_conduct/code_of_conduct.md . ",
    "url": "https://docs.arenaxr.org/content/contributing.html#code-of-conduct",
    "relUrl": "/content/contributing.html#code-of-conduct"
  },"289": {
    "doc": "Contributing",
    "title": "Contributing",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/contributing.html",
    "relUrl": "/content/contributing.html"
  },"290": {
    "doc": "Cube (deprecated; don't use)",
    "title": "Cube (deprecated; don’t use)",
    "content": "Cube (=Box) Geometry (deprecated); Supported for Legacy reasons; Please use Box in new scenes . All wire objects have a set of basic attributes {object_id, action, type, persist, data}. The data attribute defines the object-specific attributes . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/cube.html#cube-deprecated-dont-use",
    "relUrl": "/content/schemas/message/cube.html#cube-deprecated-dont-use"
  },"291": {
    "doc": "Cube (deprecated; don't use)",
    "title": "Cube (deprecated; don’t use) Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | object_id | string |   | A uuid or otherwise unique identifier for this object. | Yes | . | persist | boolean | True | Persist this object in the database. | Yes | . | type | string; Must be: object | 'object' | AFrame 3D Object | Yes | . | action | string; One of: ['create', 'delete', 'update'] | 'create' | Message action create, update, delete. | Yes | . | ttl | integer |   | When applied to an entity, the entity will remove itself from DOM after the specified number of seconds. Update is allowed, which will reset the timer to start from that moment. | No | . | data | Cube (deprecated; don’t use) data |   | Cube (deprecated; don’t use) Data | Yes | . Cube (deprecated; don’t use) Data Attributes . | Attribute | Type | Default | Description | Required | . | object_type | string; Must be: cube | cube | 3D object type. | Yes | . | depth | number | 1 | depth | Yes | . | height | number | 1 | height | Yes | . | segmentsDepth | integer | 1 | segments depth | No | . | segmentsHeight | integer | 1 | segments height | No | . | segmentsWidth | integer | 1 | segments width | No | . | width | number | 1 | width | Yes | . | parent | string |   | Parent’s object_id. Child objects inherit attributes of their parent, for example scale and translation. | No | . | position | position |   | 3D object position. | Yes | . | rotation | rotation |   | 3D object rotation in quaternion representation; Right-handed coordinate system. Euler degrees are deprecated in wire message format. | Yes | . | scale | scale |   | 3D object scale. | No | . | animation | animation |   | Animate and tween values. | No | . | armarker | armarker |   | A location marker (such as an AprilTag, a lightAnchor, or an UWB tag), used to anchor scenes, or scene objects, in the real world. | No | . | click-listener | click-listener |   | Object will listen for mouse events like clicks. | No | . | box-collision-listener | box-collision-listener |   | Listen for bounding-box collisions with user camera and hands. Must be applied to an object or model with geometric mesh. Collisions are determined by course bounding-box overlaps. | No | . | collision-listener | string |   | Name of the collision-listener, default can be empty string. Collisions trigger click events. | No | . | blip | blip |   | When the object is created or deleted, it will animate in/out of the scene instead of appearing/disappearing instantly. Must have a geometric mesh. | No | . | static-body | static-body |   | A fixed-position or animated object. Other objects may collide with static bodies, but static bodies themselves are unaffected by gravity and collisions. | No | . | dynamic-body | dynamic-body |   | A freely-moving object. Dynamic bodies have mass, collide with other objects, bounce or slow during collisions, and fall if gravity is enabled. | No | . | goto-landmark | goto-landmark |   | Teleports user to the landmark with the given name. Requires click-listener. | No | . | goto-url | goto-url |   | Load new URL when object is clicked. Requires click-listener. | No | . | hide-on-enter-ar | boolean; Must be: True | True | Hide object when entering AR. Remove component to not hide. | No | . | hide-on-enter-vr | boolean; Must be: True | True | Hide object when entering VR. Remove component to not hide. | No | . | show-on-enter-ar | boolean; Must be: True | True | Show object when entering AR. Hidden otherwise. | No | . | show-on-enter-vr | boolean; Must be: True | True | Show object when entering VR. Hidden otherwise. | No | . | impulse | impulse |   | Apply an impulse to an object to set it in motion. This happens in conjunction with an event. Requires click-listener and physics. | No | . | landmark | landmark |   | Define entities as a landmark; Landmarks appears in the landmark list and you can move (teleport) to them; You can define the behavior of the teleport: if you will be at a fixed or random distance, looking at the landmark, fixed offset or if it is constrained by a navmesh (when it exists). | No | . | material-extras | material-extras |   | Define extra material properties, namely texture encoding, whether to render the material’s color and render order. | No | . | shadow | shadow |   | The shadow component enables shadows for an entity and its children. Adding the shadow component alone is not enough to display shadows in your scene. We must have at least one light with castShadow: true enabled. | No | . | sound | sound |   | The sound component defines the entity as a source of sound or audio. The sound component can be positional and is thus affected by the component’s position. | No | . | textinput | textinput |   | Opens an HTML prompt when clicked. Sends text input as an event on MQTT. Requires click-listener. | No | . | url | string |   | Use File Store paths under ‘store/users/username’, see CDN and other storage options in the description above. | No | . | remote-render | remote-render |   | Whether or not an object should be remote rendered [Experimental]. | No | . | video-control | video-control |   | Adds a video to an entity and controls its playback. | No | . | attribution | attribution |   | Attribution Component. Saves attribution data in any entity. | No | . | spe-particles | spe-particles |   | GPU based particle systems in A-Frame. | No | . | look-at | string |   | The look-at component defines the behavior for an entity to dynamically rotate or face towards another entity or position. Use ‘#my-camera’ to face the user camera, otherwise can take either a vec3 position or a query selector to another entity. | No | . | buffer | boolean | True | Transform geometry into a BufferGeometry to reduce memory usage at the cost of being harder to manipulate (geometries only: box, circle, cone, …). | No | . | jitsi-video | jitsi-video |   | Apply a jitsi video source to the geometry. | No | . | material | material | {'color': '#7f7f7f'} | The material properties of the object’s surface. | No | . | multisrc | multisrc |   | Define multiple visual sources applied to an object. | No | . | screenshareable | boolean | True | Whether or not a user can screenshare on an object. | No | . | skipCache | boolean | False | Disable retrieving the shared geometry object from the cache. (geometries only: box, circle, cone, …). | No | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/cube.html#cube-deprecated-dont-use-attributes",
    "relUrl": "/content/schemas/message/cube.html#cube-deprecated-dont-use-attributes"
  },"292": {
    "doc": "Cube (deprecated; don't use)",
    "title": "Cube (deprecated; don't use)",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/cube.html",
    "relUrl": "/content/schemas/message/cube.html"
  },"293": {
    "doc": "Cylinder",
    "title": "Cylinder",
    "content": "Cylinder Geometry. All wire objects have a set of basic attributes {object_id, action, type, persist, data}. The data attribute defines the object-specific attributes . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/cylinder.html#cylinder",
    "relUrl": "/content/schemas/message/cylinder.html#cylinder"
  },"294": {
    "doc": "Cylinder",
    "title": "Cylinder Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | object_id | string |   | A uuid or otherwise unique identifier for this object. | Yes | . | persist | boolean | True | Persist this object in the database. | Yes | . | type | string; Must be: object | 'object' | AFrame 3D Object | Yes | . | action | string; One of: ['create', 'delete', 'update'] | 'create' | Message action create, update, delete. | Yes | . | ttl | integer |   | When applied to an entity, the entity will remove itself from DOM after the specified number of seconds. Update is allowed, which will reset the timer to start from that moment. | No | . | data | Cylinder data |   | Cylinder Data | Yes | . Cylinder Data Attributes . | Attribute | Type | Default | Description | Required | . | object_type | string; Must be: cylinder | cylinder | 3D object type. | Yes | . | height | number | 1 | height | Yes | . | openEnded | boolean | False | open ended | No | . | radius | number | 1 | radius | Yes | . | segmentsHeight | integer | 18 | segments height | No | . | segmentsRadial | integer | 36 | segments radial | No | . | thetaLength | number | 360 | theta length | No | . | thetaStart | number | 0 | theta start | No | . | parent | string |   | Parent’s object_id. Child objects inherit attributes of their parent, for example scale and translation. | No | . | position | position |   | 3D object position. | Yes | . | rotation | rotation |   | 3D object rotation in quaternion representation; Right-handed coordinate system. Euler degrees are deprecated in wire message format. | Yes | . | scale | scale |   | 3D object scale. | No | . | animation | animation |   | Animate and tween values. | No | . | armarker | armarker |   | A location marker (such as an AprilTag, a lightAnchor, or an UWB tag), used to anchor scenes, or scene objects, in the real world. | No | . | click-listener | click-listener |   | Object will listen for mouse events like clicks. | No | . | box-collision-listener | box-collision-listener |   | Listen for bounding-box collisions with user camera and hands. Must be applied to an object or model with geometric mesh. Collisions are determined by course bounding-box overlaps. | No | . | collision-listener | string |   | Name of the collision-listener, default can be empty string. Collisions trigger click events. | No | . | blip | blip |   | When the object is created or deleted, it will animate in/out of the scene instead of appearing/disappearing instantly. Must have a geometric mesh. | No | . | static-body | static-body |   | A fixed-position or animated object. Other objects may collide with static bodies, but static bodies themselves are unaffected by gravity and collisions. | No | . | dynamic-body | dynamic-body |   | A freely-moving object. Dynamic bodies have mass, collide with other objects, bounce or slow during collisions, and fall if gravity is enabled. | No | . | goto-landmark | goto-landmark |   | Teleports user to the landmark with the given name. Requires click-listener. | No | . | goto-url | goto-url |   | Load new URL when object is clicked. Requires click-listener. | No | . | hide-on-enter-ar | boolean; Must be: True | True | Hide object when entering AR. Remove component to not hide. | No | . | hide-on-enter-vr | boolean; Must be: True | True | Hide object when entering VR. Remove component to not hide. | No | . | show-on-enter-ar | boolean; Must be: True | True | Show object when entering AR. Hidden otherwise. | No | . | show-on-enter-vr | boolean; Must be: True | True | Show object when entering VR. Hidden otherwise. | No | . | impulse | impulse |   | Apply an impulse to an object to set it in motion. This happens in conjunction with an event. Requires click-listener and physics. | No | . | landmark | landmark |   | Define entities as a landmark; Landmarks appears in the landmark list and you can move (teleport) to them; You can define the behavior of the teleport: if you will be at a fixed or random distance, looking at the landmark, fixed offset or if it is constrained by a navmesh (when it exists). | No | . | material-extras | material-extras |   | Define extra material properties, namely texture encoding, whether to render the material’s color and render order. | No | . | shadow | shadow |   | The shadow component enables shadows for an entity and its children. Adding the shadow component alone is not enough to display shadows in your scene. We must have at least one light with castShadow: true enabled. | No | . | sound | sound |   | The sound component defines the entity as a source of sound or audio. The sound component can be positional and is thus affected by the component’s position. | No | . | textinput | textinput |   | Opens an HTML prompt when clicked. Sends text input as an event on MQTT. Requires click-listener. | No | . | url | string |   | Use File Store paths under ‘store/users/username’, see CDN and other storage options in the description above. | No | . | remote-render | remote-render |   | Whether or not an object should be remote rendered [Experimental]. | No | . | video-control | video-control |   | Adds a video to an entity and controls its playback. | No | . | attribution | attribution |   | Attribution Component. Saves attribution data in any entity. | No | . | spe-particles | spe-particles |   | GPU based particle systems in A-Frame. | No | . | look-at | string |   | The look-at component defines the behavior for an entity to dynamically rotate or face towards another entity or position. Use ‘#my-camera’ to face the user camera, otherwise can take either a vec3 position or a query selector to another entity. | No | . | buffer | boolean | True | Transform geometry into a BufferGeometry to reduce memory usage at the cost of being harder to manipulate (geometries only: box, circle, cone, …). | No | . | jitsi-video | jitsi-video |   | Apply a jitsi video source to the geometry. | No | . | material | material | {'color': '#7f7f7f'} | The material properties of the object’s surface. | No | . | multisrc | multisrc |   | Define multiple visual sources applied to an object. | No | . | screenshareable | boolean | True | Whether or not a user can screenshare on an object. | No | . | skipCache | boolean | False | Disable retrieving the shared geometry object from the cache. (geometries only: box, circle, cone, …). | No | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/cylinder.html#cylinder-attributes",
    "relUrl": "/content/schemas/message/cylinder.html#cylinder-attributes"
  },"295": {
    "doc": "Cylinder",
    "title": "Cylinder",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/cylinder.html",
    "relUrl": "/content/schemas/message/cylinder.html"
  },"296": {
    "doc": "arena.objects.cylinder",
    "title": "\narena.objects.cylinder    ",
    "content": "class Cylinder(arena.objects.arena_object.Object): Cylinder object class to manage its properties in the ARENA: Cylinder Geometry. Parameters . | float height: height Defaults to '1' (optional) | bool openEnded: open ended (optional) | float radius: radius Defaults to '1' (optional) | int segmentsHeight: segments height Defaults to '18' (optional) | int segmentsRadial: segments radial Defaults to '36' (optional) | float thetaLength: theta length Defaults to '360' (optional) | float thetaStart: theta start (optional) | . Cylinder(**kwargs) object_type = &#39;cylinder&#39; Inherited Members . arena.objects.arena_object.Object type all_objects evt_handler update_handler animations delayed_prop_tasks update_attributes dispatch_animation remove_animation_at_index clear_animations clickable json_preprocess json_postprocess json get add remove exists arena.base_object.BaseObject json_encode ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/cylinder.html",
    "relUrl": "/content/python-api/objects/cylinder.html"
  },"297": {
    "doc": "arena.objects.cylinder",
    "title": "arena.objects.cylinder",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/cylinder.html",
    "relUrl": "/content/python-api/objects/cylinder.html"
  },"298": {
    "doc": "arena.attributes.data",
    "title": "\narena.attributes.data    ",
    "content": "class Data(arena.attributes.attribute.Attribute): Data attribute class to manage its properties in the ARENA: Wraps all attributes in JSON. Usage: data=Data(...) . Parameters . | dict animation: Animate and tween values. More properties at https://aframe.io/docs/1.5.0/components/animation.html A-Frame Animation component. Easing properties are detailed at &lt;https: //easings.net&gt; easings.net. (optional) | dict animation_mixer: A list of available animations can usually be found by inspecting the model file or its documentation. All animations will play by default. To play only a specific set of animations, use wildcards: animation-mixer='clip: run_*'. More properties at &lt;https: //github.com/n5ro/aframe-extras/tree/master/src/loaders#animation&gt; A-Frame Extras Animation. (optional) | dict armarker: A location marker (such as an AprilTag, a lightAnchor, or an UWB tag), used to anchor scenes, or scene objects, in the real world. (optional) | dict attribution: Attribution Component. Saves attribution data in any entity. (optional) | dict blip: When the object is created or deleted, it will animate in/out of the scene instead of appearing/disappearing instantly. Must have a geometric mesh. (optional) | dict box_collision_listener: Listen for bounding-box collisions with user camera and hands. Must be applied to an object or model with geometric mesh. Collisions are determined by course bounding-box overlaps. (optional) | bool buffer: Transform geometry into a BufferGeometry to reduce memory usage at the cost of being harder to manipulate (geometries only: box, circle, cone, ...). Defaults to 'True' (optional) | dict click_listener: Object will listen for mouse events like clicks. (optional) | str collision_listener: Name of the collision-listener, default can be empty string. Collisions trigger click events. (optional) | dict dynamic_body: A freely-moving object. Dynamic bodies have mass, collide with other objects, bounce or slow during collisions, and fall if gravity is enabled. More properties at &lt;https: //github.com/c-frame/aframe-physics-system/blob/master/CannonDriver.md&gt; A-Frame Physics System. (optional) | dict gltf_model_lod: Simple switch between the default gltf-model and a detailed one when a user camera is within specified distance (optional) | dict gltf_morph: Allows you to target and control a gltf model's morphTargets created in Blender. More properties at &lt;https: //github.com/elbobo/aframe-gltf-morph-component&gt; A-Frame GLTF Morph component. (optional) | dict goto_landmark: Teleports user to the landmark with the given name. Requires click-listener. (optional) | dict goto_url: Load new URL when object is clicked. Requires click-listener. (optional) | bool hide_on_enter_ar: Hide object when entering AR. Remove component to not hide. (optional) | bool hide_on_enter_vr: Hide object when entering VR. Remove component to not hide. (optional) | dict impulse: Apply an impulse to an object to set it in motion. This happens in conjunction with an event. Requires click-listener and physics. (optional) | dict jitsi_video: Apply a jitsi video source to the geometry. (optional) | dict landmark: Define entities as a landmark; Landmarks appears in the landmark list and you can move (teleport) to them; You can define the behavior of the teleport: if you will be at a fixed or random distance, looking at the landmark, fixed offset or if it is constrained by a navmesh (when it exists). (optional) | str look_at: The look-at component defines the behavior for an entity to dynamically rotate or face towards another entity or position. Use '#my-camera' to face the user camera, otherwise can take either a vec3 position or a query selector to another entity. (optional) | dict material: The material properties of the object's surface. More properties at &lt;https: //aframe.io/docs/1.5.0/components/material.html&gt; A-Frame Material. (optional) | dict material_extras: Define extra material properties, namely texture encoding, whether to render the material's color and render order. The properties set here access directly Three.js material component. More properties at &lt;https: //threejs.org/docs/#api/en/materials/Material&gt; THREE.js Material. (optional) | dict modelUpdate: The GLTF-specific modelUpdate attribute is an object with child component names as keys. The top-level keys are the names of the child components to be updated. The values of each are nested position and rotation attributes to set as new values, respectively. Either position or rotation can be omitted if unchanged. (optional) | dict multisrc: Define multiple visual sources applied to an object. (optional) | str parent: Parent's object_id. Child objects inherit attributes of their parent, for example scale and translation. (optional) | dict position: 3D object position. (optional) | dict remote_render: Whether or not an object should be remote rendered [Experimental]. (optional) | dict rotation: 3D object rotation in quaternion representation; Right-handed coordinate system. Euler degrees are deprecated in wire message format. (optional) | dict scale: 3D object scale. (optional) | bool screenshareable: Whether or not a user can screenshare on an object. Defaults to 'True' (optional) | dict shadow: The shadow component enables shadows for an entity and its children. Adding the shadow component alone is not enough to display shadows in your scene. We must have at least one light with castShadow: true enabled. (optional) | bool show_on_enter_ar: Show object when entering AR. Hidden otherwise. (optional) | bool show_on_enter_vr: Show object when entering VR. Hidden otherwise. (optional) | bool skipCache: Disable retrieving the shared geometry object from the cache. (geometries only: box, circle, cone, ...). (optional) | dict sound: The sound component defines the entity as a source of sound or audio. The sound component can be positional and is thus affected by the component's position. More properties at &lt;https: //aframe.io/docs/1.5.0/components/sound.html&gt; A-Frame Sound. (optional) | dict spe_particles: GPU based particle systems in A-Frame. More properties at &lt;https: //github.com/harlyq/aframe-spe-particles-component&gt; A-Frame SPE Particles component. (optional) | dict static_body: A fixed-position or animated object. Other objects may collide with static bodies, but static bodies themselves are unaffected by gravity and collisions. More properties at &lt;https: //github.com/c-frame/aframe-physics-system/blob/master/CannonDriver.md&gt; A-Frame Physics System. (optional) | dict textinput: Opens an HTML prompt when clicked. Sends text input as an event on MQTT. Requires click-listener. (optional) | str url: Use File Store paths under 'store/users/username', see CDN and other storage options in the description above. (optional) | dict video_control: Adds a video to an entity and controls its playback. (optional) | . Data(**kwargs) @classmethod def update_data(cls, data, new_data): Inherited Members . arena.base_object.BaseObject add json_encode json ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/data.html",
    "relUrl": "/content/python-api/attributes/data.html"
  },"299": {
    "doc": "arena.attributes.data",
    "title": "arena.attributes.data",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/data.html",
    "relUrl": "/content/python-api/attributes/data.html"
  },"300": {
    "doc": "Debug A-Frame",
    "title": "Debug A-Frame",
    "content": "Our ARENA deployment of A-Frame includes the A-Frame Inspector, which is a local-only scene editor, and useful to locate, observe, and test objects in ARENA scenes. We have added a wrapper application around A-Frame Inspector called Build 3D, which adds the ability to become a remote distributed scene editor. Examine the list of elements on the left side. Each element or object you select will show it’s details and attributes on the right side. You may edit any attributes here you wish, however, remember that the A-Frame Scene Inspector will not persist any changes to the persistence database. We do have a way to visually manipulate objects and save changes that we will share next. ",
    "url": "https://docs.arenaxr.org/content/interface/debug.html",
    "relUrl": "/content/interface/debug.html"
  },"301": {
    "doc": "Debug A-Frame",
    "title": "Build 3D",
    "content": "Build 3D is for editing persisted scene objects and configuration in 3D just as they would be on the 3D browser view. Build 3D leverages the A-Frame Inspector, with some critical differences, namely that changes are shared to other users. Usage: . | Enter on your example scene by clicking: expand settings (v), then the 3D Editor link. | Optionally, you can enter from the JSON Build Page, clicking on the Edit 3D button to the right of any object in your list of scene objects. | Be sure to “Play” the scene to allow your ability to publish MQTT changes by clicking the Play (▶) button. | From this point, any changes you make, including add/remove objects/components, should be reflected in the bottom logging panel of MQTT publish events. | If you want to edit JSON from this view, an easy way back to JSON Build is to select the object, open the build3d-mqtt-object component, and toggle on openJsonEditor. | Exit by clicking the Back to Scene button. Note: This will reload a new scene page. | . ",
    "url": "https://docs.arenaxr.org/content/interface/debug.html#build-3d",
    "relUrl": "/content/interface/debug.html#build-3d"
  },"302": {
    "doc": "Debug A-Frame",
    "title": "A-Frame Scene Inspector",
    "content": "Since the ARENA’s rendering uses the A-Frame web 3D rendering engine, you can open the A-Frame Scene Inspector on any scene to examine and manipulate any of the A-Frame elements in your scene. Usage: . | Enter on your example scene by typing &lt;ctrl&gt; + &lt;alt&gt; + i on most systems. | Exit by clicking the Back to Scene button. | . ",
    "url": "https://docs.arenaxr.org/content/interface/debug.html#a-frame-scene-inspector",
    "relUrl": "/content/interface/debug.html#a-frame-scene-inspector"
  },"303": {
    "doc": "Debug A-Frame",
    "title": "Help Commands",
    "content": "tip . While in the Build 3D or A-Frame Inspector views, press the H key to pull up a list of super-useful A-Frame Inspector commands. ",
    "url": "https://docs.arenaxr.org/content/interface/debug.html#help-commands",
    "relUrl": "/content/interface/debug.html#help-commands"
  },"304": {
    "doc": "Debug Visually",
    "title": "Debugging ARENA Web Browser Visually",
    "content": "When running programs in Python or Unity, you have a plethora of debug tools at your disposal to debug lines of code. For debugging the visual elements of rendered scenes, here are some other tools to help, and some guidance of where they are useful. Each tool has an expansive or limited capacity to display object messages (Read Objects), and add/change/delete object messages (Write Objects), as noted . | Visual Object Editors | Format | Read Objects | Write Objects | . | Python Console Interface | MQTT | All | None | . | Build JSON | JSON | All | All | . | Build 3D | 3D | All | All | . | A-Frame Inspector | 3D | All | None | . | Unity Editor | 3D | Most1 | All | . | WebXR API Emulators | 3D | Camera/Hands | Camera/Hands | . | AR Builder | 3D | All | Primitives/GLTFs | . 1 The arena-unity library is still in development. Objects currently rendered are all Primitives, GLTFs, Lights, Lines, Text, Images. Others still to be rendered are: PCD, Threejs, URDF, UI Panels, Gaussian Splat. ",
    "url": "https://docs.arenaxr.org/content/overview/debug.html#debugging-arena-web-browser-visually",
    "relUrl": "/content/overview/debug.html#debugging-arena-web-browser-visually"
  },"305": {
    "doc": "Debug Visually",
    "title": "Python Console Interface",
    "content": "There is a console interface tutorial to the arena-py Python library. This is designed to have a way to inspect the program from the console, without having to send a heartbeat or write your own command/response interface. ",
    "url": "https://docs.arenaxr.org/content/overview/debug.html#python-console-interface",
    "relUrl": "/content/overview/debug.html#python-console-interface"
  },"306": {
    "doc": "Debug Visually",
    "title": "Build (JSON) Page",
    "content": "There is a JSON scene build tutorial for ARENA scenes. This is for editing persisted scene objects and configuration in JSON format with full support of all objects and their components. ",
    "url": "https://docs.arenaxr.org/content/overview/debug.html#build-json-page",
    "relUrl": "/content/overview/debug.html#build-json-page"
  },"307": {
    "doc": "Debug Visually",
    "title": "Build 3D",
    "content": "There is a Build 3D tutorial for ARENA scenes using Build 3D. This is for editing persisted scene objects and configuration in 3D just as they would be on the 3D browser view. Build 3D leverages the A-Frame Inspector, with some critical differences, namely that changes are shared to other users. ",
    "url": "https://docs.arenaxr.org/content/overview/debug.html#build-3d",
    "relUrl": "/content/overview/debug.html#build-3d"
  },"308": {
    "doc": "Debug Visually",
    "title": "A-Frame Inspector",
    "content": "There is a A-Frame Inspector tutorial for ARENA scenes using A-Frame Inspector. NOTE: The default A-Frame Inspector does not publish MQTT updates. Any changes you make are local only. warning . A-Frame Inspector and Build 3D are similar, but operate critically differently. Learn to tell them apart: The A-Frame Inspector has opaque black control panels, and Build 3D has transparent black control panels. ",
    "url": "https://docs.arenaxr.org/content/overview/debug.html#a-frame-inspector",
    "relUrl": "/content/overview/debug.html#a-frame-inspector"
  },"309": {
    "doc": "Debug Visually",
    "title": "Unity Editor",
    "content": "There is a Unity 3D scene editing tutorial for ARENA scenes. This is for editing persisted scene objects and configuration in 3D in a Unity rendering window. ",
    "url": "https://docs.arenaxr.org/content/overview/debug.html#unity-editor",
    "relUrl": "/content/overview/debug.html#unity-editor"
  },"310": {
    "doc": "Debug Visually",
    "title": "WebXR API Emulators",
    "content": "Since ARENA’s web view runs on WebXR, we can use one of the WebXR API Emulators to test Immersive VR (headset) features without a headset. | WebXR API Emulator by Mozilla Mixed Reality for Firefox and Chrome. Emulates Quest, Go, Gear VR, Vive, Cardboard devices. | Immersive Web Emulator by Meta for Chrome. Emulates Quest, Rift devices. | . Usage: . | Go to the one of the above browser addon stores to install. | Open your ARENA scene web view and the ARENA detects that you have a XR device (emulated) and it will let you enter the immersive (VR、AR) mode. | Open the WebXR tab in the browser developer tool (Firefox, Chrome) to control the emulated devices. You can move the headset and controllers, and trigger the controller buttons. | . ",
    "url": "https://docs.arenaxr.org/content/overview/debug.html#webxr-api-emulators",
    "relUrl": "/content/overview/debug.html#webxr-api-emulators"
  },"311": {
    "doc": "Debug Visually",
    "title": "AR Builder",
    "content": "We also have a Python program, AR Builder (ARB), which you can use to create and edit objects for your scene. You can use it in VR (virtual reality) as a way to edit your scene and save changes to the persistence database. Importantly, you can use it in AR (augmented reality) in combination with supported browsers and localization techniques to anchor scene objects in physical space. See our section on miXed Reality (XR) for details. note . Check out the Platforms Section for details on browsers and platforms that support XR in ARENA. In either case, ARB allows any user in the scene to edit, so it can be used collaboratively by multiple users remotely as VR, in person as AR, or as XR (miXed Reality), a combination of both. goal . Use a tool like A-Frame Inspector to navigate a real-time ARENA scene graph and seek out an object to discover its properties and feel free to change them and observe the rendered changes. ",
    "url": "https://docs.arenaxr.org/content/overview/debug.html#ar-builder",
    "relUrl": "/content/overview/debug.html#ar-builder"
  },"312": {
    "doc": "Debug Visually",
    "title": "Debug Visually",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/overview/debug.html",
    "relUrl": "/content/overview/debug.html"
  },"313": {
    "doc": "Debugging Programs",
    "title": "Python Console Interface",
    "content": "There is a console interface to the arena-py library. This is designed to have a way to inspect the program from the console, without having to send a heartbeat or write your own command/response interface. Enable it with the environment variable: . ENABLE_INTERPRETER=1 . A session looks like this (look for lines starting with #): . Using Scene from 'scene' input parameter: example Using Host from 'host' input parameter: arenaxr.org ===== Using local MQTT token. ARENA Token Username: cli ARENA Token valid for: 183 days, 23:25:18.051479h Fetching ARENA configuration... ===== Loading: https://arenaxr.org/cli/example, realm=realm Connecting to the ARENA... Connected! ===== Type help or ? to list available commands. # help Documented commands (type help &lt;topic&gt;): ======================================== exit get help quit show # show Display scene attributes: ['config_data', 'scene', 'users', 'auth', 'all_objects', 'msg_io'] # show config_data { \"ARENADefaults\": { \"ATLASurl\": \"//atlas.conix.io\", \"camHeight\": 1.6, \"camUpdateIntervalMs\": 100, \"graphTopic\": \"$NETWORK\", \"headModelPath\": \"/media/models/avatars/robobit.glb\", \"jitsiHost\": \"jitsi0.andrew.cmu.edu:8443\", \"latencyTopic\": \"$NETWORK/latency\", \"mqttHost\": \"arenaxr.org\", \"mqttPath\": [ \"/mqtt/\", \"/mqtt1/\", \"/mqtt2/\" ], \"namespace\": \"public\", \"persistHost\": \"arenaxr.org\", \"persistPath\": \"/persist/\", \"realm\": \"realm\", \"sceneName\": \"lobby\", \"startCoords\": { \"x\": 0, \"y\": 0, \"z\": 0 }, \"userName\": \"Anonymous\", \"vioTopic\": \"/topic/vio/\" } } # exit This will terminate the ARENA program. Are you sure [Y/N]? y Exiting... You can also interact with it from /programs: . ",
    "url": "https://docs.arenaxr.org/content/programs/debug.html#python-console-interface",
    "relUrl": "/content/programs/debug.html#python-console-interface"
  },"314": {
    "doc": "Debugging Programs",
    "title": "Debugging Programs",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/programs/debug.html",
    "relUrl": "/content/programs/debug.html"
  },"315": {
    "doc": "Object Definitions Reference",
    "title": "ARENA Object",
    "content": "ARENA objects follow the structure of Scene Message object, with general object properties, paired with a more granular detailed data sub-object which varies in form and follow the examples below. ARENA 3D Environment is built on top of A-Frame, and it supports the majority of A-Frame’s primitives (e.g., geometries like boxes, circles, spheres) and components (that can be attached to objects, such as position, rotation, material, sound). See our clarification of the relationship between ARENA and A-Frame properties. Tip . In most cases, arbitrary A-Frame properties which are applied in HTML as attributes can be applied to ARENA Objects. We link the corresponding A-Frame object definition for completeness in the tables below. ",
    "url": "https://docs.arenaxr.org/content/schemas/definitions.html#arena-object",
    "relUrl": "/content/schemas/definitions.html#arena-object"
  },"316": {
    "doc": "Object Definitions Reference",
    "title": "Over-the-Wire Message Examples",
    "content": "ARENA object schemas are the basis for the over-the-wire message format. Below you can find some additional message examples and links to the respective object definitions. Object Message . Scene Message object with a data property of the Object Data object. { \"object_id\": \"cube_1\", \"action\": \"create\", \"type\": \"object\", \"data\": { \"object_type\": \"box\", \"position\": { \"x\": 1, \"y\": 1, \"z\": -1 }, \"rotation\": { \"x\": 0, \"y\": 0, \"z\": 0, \"w\": 1 }, \"scale\": { \"x\": 1, \"y\": 1, \"z\": 1 }, \"material\": { \"color\": \"#FF0000\" } } } . Event Message . Scene Message object with a data property of the Event Data object. { \"object_id\": \"fallBox2\", \"action\": \"clientEvent\", \"type\": \"mousedown\", \"data\": { \"position\": { \"x\": -0.993, \"y\": 0.342, \"z\": -1.797 }, \"source\": \"camera_8715_er\" } } . Program Message . Scene Message object with a data property of the Program Data object. { \"object_id\": \"6aafedf3-e313-4785-a456-939de8677f07\", \"action\": \"update\", \"persist\": true, \"type\": \"program\", \"data\": { \"name\": \"wiselab/arb\", \"instantiate\": \"single\", \"filename\": \"arb.py\", \"filetype\": \"PY\", \"args\": [\"${scene}\", \"-b\", \" ${mqtth}\"] } } . Scene Options Message . Scene Message object with a data property of the Scene Options Data object. { \"object_id\": \"e9a16478-2606-4cd0-bb9f-b03879bc8baa\", \"action\": \"update\", \"persist\": true, \"type\": \"scene-options\", \"data\": { \"env-presets\": { \"active\": true, \"lighting\": \"distant\", \"lightPosition\": { \"x\": 0, \"y\": 1, \"z\": -10 }, \"ground\": \"hills\", \"groundTexture\": \"squares\", \"groundColor\": \"#444241\", \"groundYScale\": 0.5 }, \"scene-options\": { \"jitsiServer\": \"jitsi1.andrew.cmu.edu\", \"clickableOnlyEvents\": true, \"privateScene\": true } } } . ",
    "url": "https://docs.arenaxr.org/content/schemas/definitions.html#over-the-wire-message-examples",
    "relUrl": "/content/schemas/definitions.html#over-the-wire-message-examples"
  },"317": {
    "doc": "Object Definitions Reference",
    "title": "“Scene Message” object",
    "content": "This is the primary payload body of every MQTT scene topic in the ARENA. See our reference of ARENA supported objects and their properties. ",
    "url": "https://docs.arenaxr.org/content/schemas/definitions.html#scene-message-object",
    "relUrl": "/content/schemas/definitions.html#scene-message-object"
  },"318": {
    "doc": "Object Definitions Reference",
    "title": "Actions",
    "content": "The create, update, and delete actions are similar to typical C(R)UD operations. | create - Upserts an object. If the object already does exist, data fields will be merged. | update - Merges the data attributes with a currently existing object. To remove an attribute, set the value to null. | delete - Delete an object. No data field required. | . ",
    "url": "https://docs.arenaxr.org/content/schemas/definitions.html#actions",
    "relUrl": "/content/schemas/definitions.html#actions"
  },"319": {
    "doc": "Object Definitions Reference",
    "title": "Object Definitions Reference",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/definitions.html",
    "relUrl": "/content/schemas/definitions.html"
  },"320": {
    "doc": "Python Programs",
    "title": "Python Scripting for ARENA",
    "content": "The Python library provides a development option for ARENA applications to add simple interactions and scripting. Our current API allows us to create and update objects in a scene, define animations, and set up callbacks on events and timers. The library provides a scheduler and a design pattern familiar to game developers, which include decorators to create one-shot, periodic and delayed (start after a given time) tasks. Any entity represented in Python is automatically updated upon arrival of network messages and we provide calls to load any pre-existing scene content upon startup. Draw objects and run programs in the ARENA using Python! 😀👍 . You can define the appearance and behavior of objects in a scene using python programs, which take advantage of the fact that all objects in a scene are networked via a MQTT Publish-Subscribe (PubSub) messaging bus: . Note that the python program can be hosted anywhere with access to the MQTT bus. For simplicity, we will assume that your program is running on your local machine. However, the execution and hosting of programs can be handled by the ARENA itself, using ARTS. ",
    "url": "https://docs.arenaxr.org/content/overview/dev-guide.html#python-scripting-for-arena",
    "relUrl": "/content/overview/dev-guide.html#python-scripting-for-arena"
  },"321": {
    "doc": "Python Programs",
    "title": "Setup",
    "content": "First, if we do not already have a compatible version of Python installed on our development machine, we must install Python 3.8 or above: . https://www.python.org/downloads/ . ",
    "url": "https://docs.arenaxr.org/content/overview/dev-guide.html#setup",
    "relUrl": "/content/overview/dev-guide.html#setup"
  },"322": {
    "doc": "Python Programs",
    "title": "Install the ARENA Python library",
    "content": "Then, we must install the arena-py library using pip: https://pypi.org/project/arena-py/ . The easiest way to begin programming in the ARENA is to install the Python library and create your first Python program. ARENA programs communicate over MQTT messages which govern all objects and their properties. This library is a wrapper which will allow you to easily send and receive those messages. tip . Use the Search ARENA Documentation bar at the very top of every page on this site to find examples and information on anything you need. ",
    "url": "https://docs.arenaxr.org/content/overview/dev-guide.html#install-the-arena-python-library",
    "relUrl": "/content/overview/dev-guide.html#install-the-arena-python-library"
  },"323": {
    "doc": "Python Programs",
    "title": "Create a box and observe",
    "content": "Now, let us create a very simple Python program in the scene example, under the username you defined the first time you entered the ARENA. Start by opening the scene in your browser and notice it is empty, with default environment settings. note . Open the example scene under your ARENA username by entering the following URL in your browser: http://arenaxr.org/&lt;your-username&gt;/example . Copy the python script below, and paste it into a box.py file. After saving the file, execute the script (e.g. python3 box.py; make sure you installed the python library first). from arena import * # this creates an object for scene 'example' at the given ARENA host scene = Scene(host=\"arenaxr.org\", scene=\"example\") # define a task that will add a box to the scene @scene.run_once def make_box(): scene.add_object(Box()) # run the tasks defined for this scene scene.run_tasks() . Looking at the scene in your browser will let you see the box. Watch out, if you are at the origin, the box will be underneath you. By default, objects are generated in a random color, with no rotation, at x, y, z position (0, 0, 0), and with no other properties applied. Some of the other properties you can add to objects are detailed in our Python Examples. Notice that the box seems stuck in the ground, which is due to the box’s origin at its center positioned at scene coordinates (0, 0, 0). If you enable Flying mode (see User Guide), you can move below the ground plane and view the other half of the box. Type Ctrl-C to end the program. Now, go back to your browser and refresh the page. You will notice that the box disappeared. We will explain what is up with that in a moment. Now, let us create two boxes, one at x, y, z (1, 1, 1) and another at x, y, z (2, 2, 2). from arena import * scene = Scene(host=\"arenaxr.org\", scene=\"example\") @scene.run_once def make_box(): # red box at (1, 1, -3) box1 = Box(position=Position(1,1,-3), material=Material(color=(255,0,0))) scene.add_object(box1) # green box at (2, 2, -3) box2 = Box(position=Position(2,2,-3), material=Material(color=(0,255,0))) scene.add_object(box2) scene.run_tasks() . Once you run the script above, you can go back to the scene example in your browser to see the two boxes: . ",
    "url": "https://docs.arenaxr.org/content/overview/dev-guide.html#create-a-box-and-observe",
    "relUrl": "/content/overview/dev-guide.html#create-a-box-and-observe"
  },"324": {
    "doc": "Python Programs",
    "title": "Running from the Command Line",
    "content": "The target of which server, user and scene are set by the Scene(host=\"...\",scene=\"...\",namespace=\"...\",debug=False) function call. It is also possible to override these using shell environmental variables at the command line as shown below. This allows a simple way to re-target applications for your own environment without having to change the parameters manually in the code. export MQTTH=arenaxr.org # ARENA webserver main host export REALM=realm export SCENE=scene export NAMESPACE=namespace python3 box.py ... ===== Loading: https://arenaxr.org/namespace/scene, realm=realm Connecting to the ARENA... Connected! ===== ... If not specified the namespace is your current logged in user-id. The most common use-case is to simply update SCENE and MQTTH. ",
    "url": "https://docs.arenaxr.org/content/overview/dev-guide.html#running-from-the-command-line",
    "relUrl": "/content/overview/dev-guide.html#running-from-the-command-line"
  },"325": {
    "doc": "Python Programs",
    "title": "Clients and Scene Callbacks",
    "content": "As a web browser user of the ARENA, you are connecting to the ARENA MQTT broker as one client connection, in which you are publishing your “camera” perspective as you move, and subscribing to changes in other objects and other users’ “camera” moves. Every time you run a Python program you are also connecting to the broker as another client connection, in which the above program publishes a message creating a box, and also subscribes you to other users’ “camera” moves, and objects. Let’s try observing some of those other messages but adding the following code to your Python program. Add the scene_callback function, and also alter your arena.init() call, to accept the new callback and allow you to observe all the messages you have subscribed to in this scene. def on_msg_callback(obj): print(\"scene_callback: \", obj) scene.on_msg_callback = on_msg_callback . Move yourself around in the browser view and notice all the camera updates and positions and rotation changes as you move. This is way too much information to be human readable! However, you can filter out these messages for what you need, or even better, if you only need feedback for a specific object, like our box, as we cover next. ",
    "url": "https://docs.arenaxr.org/content/overview/dev-guide.html#clients-and-scene-callbacks",
    "relUrl": "/content/overview/dev-guide.html#clients-and-scene-callbacks"
  },"326": {
    "doc": "Python Programs",
    "title": "Object callbacks",
    "content": "One way to reduce the flood of messages for your Python program is to define a callback specifically for one object, our box for example. Update your program to comment out all messages subscribed in the scene, add a callback just for your box object, and update the creation of your box object with a click-listener and the new box_callback. def on_msg_callback(obj): # print(\"scene_callback: \", obj) def box_callback(evt): print(\"box_callback: \", evt) box = Box(clickable=True, evt_handler=box_callback) . Now, in your scene use your mouse to click on the box and notice the messages you receive just from the box. You have useful information like: what type of event - mouse up/down/enter/leave, the owner of the event, the position of the owner, the position of the click. You can use this information to programmatically decide how to respond and begin creating a rich, interactive, 3d experience for your users. | What should mousedown do for this object? Change its color? | What should mouseenter or mouseleave do? Change its opacity? | Many more ideas are available in our examples. | . ",
    "url": "https://docs.arenaxr.org/content/overview/dev-guide.html#object-callbacks",
    "relUrl": "/content/overview/dev-guide.html#object-callbacks"
  },"327": {
    "doc": "Python Programs",
    "title": "Animate a GLTF model",
    "content": "A more advanced manipulation of objects in the ARENA is using 3d models as GLTF. Here we are going to use a GLTF model of a duck and some animation rules to make it rotate. from arena import * scene = Scene(host=\"arenaxr.org\", scene=\"example\") obj = GLTF(object_id=\"duck_1\", position=(-1, 1, -3), url=\"store/models/Duck.glb\") obj.dispatch_animation( Animation( property=\"rotation\", start=(0,0,0), end=(0,180,0), easing=\"linear\", dur=1000 ) ) scene.run_animations(obj) scene.run_tasks() . At your leisure, read more about methods to generate 3d content and animate objects and models. ",
    "url": "https://docs.arenaxr.org/content/overview/dev-guide.html#animate-a-gltf-model",
    "relUrl": "/content/overview/dev-guide.html#animate-a-gltf-model"
  },"328": {
    "doc": "Python Programs",
    "title": "Use persistence, reload browser",
    "content": "Up until now, everything you have created has been non-persistent. That is, objects are only rendered in real-time for any browsers open to the example as MQTT messages are received. So, if you refresh your browser, notice that all the objects we created are gone, new visitors to this scene will not see them. To backup your scene objects into our persistence database you will have to specify persist=True in Python definitions. This is also true when ARENA objects are created in other scenes. The underlying message needs to specify if the object state is to be persisted or not. Go back to the previous python code and try to add persist=True to the duck object: . obj = Model(object_id=\"duck_1\", position=(-1, 1, -3), url=\"store/models/Duck.glb\" persist=True) . If you run the program again, you will notice that the duck remains in the scene, even across a refresh. goal . Create an ARENA Python script that triggers your animation when a user clicks on your scanned object! You can also write a script to trigger animations when the user gets close to the object, when a user interacts with another object, etc. Again, be creative here! . More links/info/tutorials/samples: . | Further Python tutorials | Python Example Apps | Python Click Event Tutorials | Python Animation Tutorials | . ",
    "url": "https://docs.arenaxr.org/content/overview/dev-guide.html#use-persistence-reload-browser",
    "relUrl": "/content/overview/dev-guide.html#use-persistence-reload-browser"
  },"329": {
    "doc": "Python Programs",
    "title": "Python Programs",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/overview/dev-guide.html",
    "relUrl": "/content/overview/dev-guide.html"
  },"330": {
    "doc": "arena.device",
    "title": "\narena.device    ",
    "content": "class Device(arena.arena_mqtt.ArenaMQTT): Gives access to an ARENA device. Can create and execute various user-defined functions/tasks. Parameters . | str host: Hostname of the ARENA webserver (required). | str realm: Reserved topic fork for future use (optional). | str namespace: Username of authenticated user or other namespace (automatic). | str device: The name of the device, without namespace (required). | . Device( host=&#39;arenaxr.org&#39;, realm=&#39;realm&#39;, network_latency_interval=10000, on_msg_callback=None, end_program_callback=None, debug=False, **kwargs) async def process_message(self): def publish(self, topic, payload_obj): Publishes to mqtt broker. def on_publish(self, client, userdata, mid): Inherited Members . arena.arena_mqtt.ArenaMQTT scene device auth debug username remote_auth_token mqttc_id config_url config_data mqtt_host subscribe_topic latency_topic ignore_topic mqttc can_publish on_msg_callback end_program_callback event_loop mqtt_connect_evt msg_queue generate_client_id network_latency_update run_once run_after_interval run_async run_forever run_tasks stop_tasks sleep on_connect on_message on_disconnect disconnect message_callback_add message_callback_remove rcv_queue_len pub_queue_len client_id ",
    "url": "https://docs.arenaxr.org/content/python-api/device.html",
    "relUrl": "/content/python-api/device.html"
  },"331": {
    "doc": "arena.device",
    "title": "arena.device",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/device.html",
    "relUrl": "/content/python-api/device.html"
  },"332": {
    "doc": "Digital Twins",
    "title": "Create a Digital Twin in the ARENA",
    "content": "Digital Twin, as term can be overloaded. It can mean a digital Data model of sensor data relating to a physical space, or a digital 3D model of a physical space. We will use the best of both of these perspectives to create a truly Hybrid XR Digital Twin in the ARENA. ",
    "url": "https://docs.arenaxr.org/content/overview/digital-twin.html#create-a-digital-twin-in-the-arena",
    "relUrl": "/content/overview/digital-twin.html#create-a-digital-twin-in-the-arena"
  },"333": {
    "doc": "Digital Twins",
    "title": "Stage Your Space For Scanning",
    "content": "Pick a room you want to Twin, and prepare it for scanning. Most of these recommendations are to ensure your scan is as clean as possible, with the least amount of visual artifacts. | Doors: Close any doors in the room possible, it will reduce trailing, incomplete model sections. | People/Pets: Make sure the room has no other people or pets in it, this will reduce phantom partial objects which the scan may pick up. Make sure you don’t scan your own feet as well! | Fans/Machines: Similar to People/Pets, moving objects will create phantoms you may not want. | Screens: Consider turning off, TVs, computer monitors, and other screens that may have moving pictures or text. Bonus: empty screens give you a nice canvas to replace your own digital twin content. | Lights: Turn on lights and lamps in the room, they will only help highlight features in the room and give your scan better details. | AprilTag: Place the origin AprilTag from the last section in a central place on the floor to include in your scan. Choose a location where it can remain, undisturbed. | . ",
    "url": "https://docs.arenaxr.org/content/overview/digital-twin.html#stage-your-space-for-scanning",
    "relUrl": "/content/overview/digital-twin.html#stage-your-space-for-scanning"
  },"334": {
    "doc": "Digital Twins",
    "title": "Scan Your Space",
    "content": "There are a range of scanning cameras and software to scan a room-scale 3D model, and a few techniques to keep in mind as you scan. We have a longer list of 3d scanning tools available for LiDAR, NERF, and Photogrammerty options. | Scan software depends on room size and expense. For beginners we recommend using Scaniverse on a iPad/iPhone: . | Small room, free with iPhone: use Scaniverse | Small/Medium room, more expensive: use Photogrammetry | Large room, most expensive: use Matterport | . | Start your scan standing on top the the origin AprilTag, in this way your scan model’s internal origin point will be as close as possible to the AprilTag, reducing later adjustments to the model’s 3d-world pose. | Export your scan as a .GLB file. Check the options for export quality and, after testing your model in the ARENA, you may want to repeat this step choosing different options to improve rendering time. The size of the model matters, but is also hard to predict. | For Scaniverse, you can save the file locally on your iPad/iPhone. | . ",
    "url": "https://docs.arenaxr.org/content/overview/digital-twin.html#scan-your-space",
    "relUrl": "/content/overview/digital-twin.html#scan-your-space"
  },"335": {
    "doc": "Digital Twins",
    "title": "Upload Your Space",
    "content": "We are going to use the scene you created in the Building a Scene tutorial, and add your room scale model to it. | From your phone, enter the build page for your scene. | There are multiple paths to upload files on the ARENA File Store and Dropbox, which you can review. Currently we will use the simplest method, under Add/Edit Object, select Type: GLTF Model, then click [Upload File &amp; Publish]. Select the model and it will be uploaded for you automatically. | Make sure the option for Room-scale digital twin model? Hide in AR, is unchecked. We don’t want to hide it before we finish aligning the model in space. | . | . | Now, you will have to update position and rotation a little, then update the object by pressing the [+ Add/Update Object] button. The model’s position y-axis will need be elevated a bit to account for the distance between your camera and the floor AprilTag, perhaps 1.5m. The model’s rotation y-axis (Euler) you will have to experiment with, to match the default rotation of your model. | Position: 0, 1.5, 0, (x, y, z) | Rotation: 0, ??, 0, (x, y, z) | . | Try using your iPad/iPhone to test the position and rotation entering your scene in AR mode as we did in the localization tutorial, to make sure your model lines up to the AprilTag. | Once your model is in place, disable the view in AR, by adding the Hide in AR property, this time set it to checked and press the [+ Add/Update Object] button again. | . ",
    "url": "https://docs.arenaxr.org/content/overview/digital-twin.html#upload-your-space",
    "relUrl": "/content/overview/digital-twin.html#upload-your-space"
  },"336": {
    "doc": "Digital Twins",
    "title": "Program Your Space",
    "content": "All this so far helps you Twin your physical space in 3D, but now, let us add some interactivity the Twinned data. Your experience in previous Python tutorials will help you generate interactions from buttons and other objects. Here is some guidance when building a digital twin application. | Data: What data is useful in proximity to your space? What useful displays or controls were previously impractical or inappropriate? Consider these data classes: . | Sensor data embedded in walls or machines: network, electric, compute, pipes and filtration. | Sensors which cannot be blocked for light access: foliage, plants, solar panels. | System components which are hidden for aesthetics, but difficult to find for maintenance. | . | Text I/O: There are multiple ways to render text, data, and allow user input. Try these strategies: . | ARENA UI Panels | Text Display | Text Input | Object Click Events | . | Text Color: Pay attention to the overall colors of your room model, you want any text you display to be well contrasted. ARENA UI Panels have light or dark themes, and text in general can be any color. | Portal/Videosphere: Videospheres and Portals are a nice to have for hybrid interaction and can align well to a 3D model twin, but consider your goal. Do you want to host a hybrid meeting, or provide an XR interaction of your valuable data? | . goal . Scan your space and add it to your scene using these techniques to create a replica of your physical space for virtual visitors. Then, run a Python application which provides a live feed of data, perhaps showing data which is inconvenient or impractical to display physically, but useful to show/hide/control in XR in proximity to the physical world. ",
    "url": "https://docs.arenaxr.org/content/overview/digital-twin.html#program-your-space",
    "relUrl": "/content/overview/digital-twin.html#program-your-space"
  },"337": {
    "doc": "Digital Twins",
    "title": "Digital Twins",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/overview/digital-twin.html",
    "relUrl": "/content/overview/digital-twin.html"
  },"338": {
    "doc": "SketchUp Conversion",
    "title": "Converting Models",
    "content": "Models in the ARENA need to be in the *.GLTF or *.GLB format. Most models on Sketchfab can be downloaded as GLTF models, however there are a lot of models in the SketchUp format. ",
    "url": "https://docs.arenaxr.org/content/3d-content/dimension.html#converting-models",
    "relUrl": "/content/3d-content/dimension.html#converting-models"
  },"339": {
    "doc": "SketchUp Conversion",
    "title": "Using Adobe Dimension",
    "content": "To convert a model from SketchUp to GLB using Adobe Dimension (in this case, we’re using Adobe Dimension 2020), first click on “Create New” in the menu. In Dimension, there should be a blank file open now. Go to the top left to File &gt; Import &gt; 3D Model. Find your SketchUp model and select it. Your model should be visible in the scene now. In some cases, like the model of a building, there will be a texture like Google Earth Terrain, which we don’t want. In the scene list of objects on the upper right, even when expanded, the Google Earth Terrain isn’t visible right now. Double click on the terrain under the building to make it visible in the Scene list. Now, the Google Earth objects should be visible. Select them and delete them. Move the model or resize it however you desire. Then, in the scene list on the right, ake sure that the top level folder or object of the model is selected. Then, go to File &gt; Export &gt; Selected Models. When selecting the format, select GLB, not GLTF. For some reason, the exported GLTF files from dimension don’t seem to work on GLTFViewer/ARENA. You can change the name of the file and export location in “Save To”. Click Export, and you’re done! Now you can upload to the filestore and add to the ARENA. ",
    "url": "https://docs.arenaxr.org/content/3d-content/dimension.html#using-adobe-dimension",
    "relUrl": "/content/3d-content/dimension.html#using-adobe-dimension"
  },"340": {
    "doc": "SketchUp Conversion",
    "title": "SketchUp Conversion",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/3d-content/dimension.html",
    "relUrl": "/content/3d-content/dimension.html"
  },"341": {
    "doc": "Dodecahedron",
    "title": "Dodecahedron",
    "content": "Dodecahedron Geometry. All wire objects have a set of basic attributes {object_id, action, type, persist, data}. The data attribute defines the object-specific attributes . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/dodecahedron.html#dodecahedron",
    "relUrl": "/content/schemas/message/dodecahedron.html#dodecahedron"
  },"342": {
    "doc": "Dodecahedron",
    "title": "Dodecahedron Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | object_id | string |   | A uuid or otherwise unique identifier for this object. | Yes | . | persist | boolean | True | Persist this object in the database. | Yes | . | type | string; Must be: object | 'object' | AFrame 3D Object | Yes | . | action | string; One of: ['create', 'delete', 'update'] | 'create' | Message action create, update, delete. | Yes | . | ttl | integer |   | When applied to an entity, the entity will remove itself from DOM after the specified number of seconds. Update is allowed, which will reset the timer to start from that moment. | No | . | data | Dodecahedron data |   | Dodecahedron Data | Yes | . Dodecahedron Data Attributes . | Attribute | Type | Default | Description | Required | . | object_type | string; Must be: dodecahedron | dodecahedron | 3D object type. | Yes | . | detail | integer | 0 | detail | No | . | radius | number | 1 | radius | Yes | . | parent | string |   | Parent’s object_id. Child objects inherit attributes of their parent, for example scale and translation. | No | . | position | position |   | 3D object position. | Yes | . | rotation | rotation |   | 3D object rotation in quaternion representation; Right-handed coordinate system. Euler degrees are deprecated in wire message format. | Yes | . | scale | scale |   | 3D object scale. | No | . | animation | animation |   | Animate and tween values. | No | . | armarker | armarker |   | A location marker (such as an AprilTag, a lightAnchor, or an UWB tag), used to anchor scenes, or scene objects, in the real world. | No | . | click-listener | click-listener |   | Object will listen for mouse events like clicks. | No | . | box-collision-listener | box-collision-listener |   | Listen for bounding-box collisions with user camera and hands. Must be applied to an object or model with geometric mesh. Collisions are determined by course bounding-box overlaps. | No | . | collision-listener | string |   | Name of the collision-listener, default can be empty string. Collisions trigger click events. | No | . | blip | blip |   | When the object is created or deleted, it will animate in/out of the scene instead of appearing/disappearing instantly. Must have a geometric mesh. | No | . | static-body | static-body |   | A fixed-position or animated object. Other objects may collide with static bodies, but static bodies themselves are unaffected by gravity and collisions. | No | . | dynamic-body | dynamic-body |   | A freely-moving object. Dynamic bodies have mass, collide with other objects, bounce or slow during collisions, and fall if gravity is enabled. | No | . | goto-landmark | goto-landmark |   | Teleports user to the landmark with the given name. Requires click-listener. | No | . | goto-url | goto-url |   | Load new URL when object is clicked. Requires click-listener. | No | . | hide-on-enter-ar | boolean; Must be: True | True | Hide object when entering AR. Remove component to not hide. | No | . | hide-on-enter-vr | boolean; Must be: True | True | Hide object when entering VR. Remove component to not hide. | No | . | show-on-enter-ar | boolean; Must be: True | True | Show object when entering AR. Hidden otherwise. | No | . | show-on-enter-vr | boolean; Must be: True | True | Show object when entering VR. Hidden otherwise. | No | . | impulse | impulse |   | Apply an impulse to an object to set it in motion. This happens in conjunction with an event. Requires click-listener and physics. | No | . | landmark | landmark |   | Define entities as a landmark; Landmarks appears in the landmark list and you can move (teleport) to them; You can define the behavior of the teleport: if you will be at a fixed or random distance, looking at the landmark, fixed offset or if it is constrained by a navmesh (when it exists). | No | . | material-extras | material-extras |   | Define extra material properties, namely texture encoding, whether to render the material’s color and render order. | No | . | shadow | shadow |   | The shadow component enables shadows for an entity and its children. Adding the shadow component alone is not enough to display shadows in your scene. We must have at least one light with castShadow: true enabled. | No | . | sound | sound |   | The sound component defines the entity as a source of sound or audio. The sound component can be positional and is thus affected by the component’s position. | No | . | textinput | textinput |   | Opens an HTML prompt when clicked. Sends text input as an event on MQTT. Requires click-listener. | No | . | url | string |   | Use File Store paths under ‘store/users/username’, see CDN and other storage options in the description above. | No | . | remote-render | remote-render |   | Whether or not an object should be remote rendered [Experimental]. | No | . | video-control | video-control |   | Adds a video to an entity and controls its playback. | No | . | attribution | attribution |   | Attribution Component. Saves attribution data in any entity. | No | . | spe-particles | spe-particles |   | GPU based particle systems in A-Frame. | No | . | look-at | string |   | The look-at component defines the behavior for an entity to dynamically rotate or face towards another entity or position. Use ‘#my-camera’ to face the user camera, otherwise can take either a vec3 position or a query selector to another entity. | No | . | buffer | boolean | True | Transform geometry into a BufferGeometry to reduce memory usage at the cost of being harder to manipulate (geometries only: box, circle, cone, …). | No | . | jitsi-video | jitsi-video |   | Apply a jitsi video source to the geometry. | No | . | material | material | {'color': '#7f7f7f'} | The material properties of the object’s surface. | No | . | multisrc | multisrc |   | Define multiple visual sources applied to an object. | No | . | screenshareable | boolean | True | Whether or not a user can screenshare on an object. | No | . | skipCache | boolean | False | Disable retrieving the shared geometry object from the cache. (geometries only: box, circle, cone, …). | No | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/dodecahedron.html#dodecahedron-attributes",
    "relUrl": "/content/schemas/message/dodecahedron.html#dodecahedron-attributes"
  },"343": {
    "doc": "Dodecahedron",
    "title": "Dodecahedron",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/dodecahedron.html",
    "relUrl": "/content/schemas/message/dodecahedron.html"
  },"344": {
    "doc": "arena.objects.dodecahedron",
    "title": "\narena.objects.dodecahedron    ",
    "content": "class Dodecahedron(arena.objects.arena_object.Object): Dodecahedron object class to manage its properties in the ARENA: Dodecahedron Geometry. Parameters . | int detail: detail (optional) | float radius: radius Defaults to '1' (optional) | . Dodecahedron(**kwargs) object_type = &#39;dodecahedron&#39; Inherited Members . arena.objects.arena_object.Object type all_objects evt_handler update_handler animations delayed_prop_tasks update_attributes dispatch_animation remove_animation_at_index clear_animations clickable json_preprocess json_postprocess json get add remove exists arena.base_object.BaseObject json_encode ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/dodecahedron.html",
    "relUrl": "/content/python-api/objects/dodecahedron.html"
  },"345": {
    "doc": "arena.objects.dodecahedron",
    "title": "arena.objects.dodecahedron",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/dodecahedron.html",
    "relUrl": "/content/python-api/objects/dodecahedron.html"
  },"346": {
    "doc": "Downscaling Models",
    "title": "Downscaling 3D Model Size",
    "content": "Some models are far too large to quickly and easily load in an online 3D space. Using Blender, you can change the size of a GLTF model easily. ",
    "url": "https://docs.arenaxr.org/content/3d-content/downscaling.html#downscaling-3d-model-size",
    "relUrl": "/content/3d-content/downscaling.html#downscaling-3d-model-size"
  },"347": {
    "doc": "Downscaling Models",
    "title": "Using Blender",
    "content": "When you first start Blender, open a new General file. By default, a new file will load a cube in the middle of the scene. Select the cube in the top right Scene Collection list, then right click and delete it. There will be no need for a cube here. ",
    "url": "https://docs.arenaxr.org/content/3d-content/downscaling.html#using-blender",
    "relUrl": "/content/3d-content/downscaling.html#using-blender"
  },"348": {
    "doc": "Downscaling Models",
    "title": "Importing",
    "content": "Go to File &gt; Import &gt; glTF 2.0, and then locate your desired model. In this case, a 3d model of the Mellon Institute is being used. ",
    "url": "https://docs.arenaxr.org/content/3d-content/downscaling.html#importing",
    "relUrl": "/content/3d-content/downscaling.html#importing"
  },"349": {
    "doc": "Downscaling Models",
    "title": "Changing Size",
    "content": "When you first load the model, you are inside of it. The scale of the model is massive. Zooming out will show the shape of the model, however there are no textures on it in the default Layout tab in Blender. The textures are still linked to the model, but will not show up during this process until it is finalized and exported. The scale of the model is currently 1, 1, 1. In the Scene Collection window, make sure that the imported model is selected. In the Transform tab under the Scene Collection window, the location, rotation, and scale can be changed, among other things. For the time being, set the scale of X, Y, and Z to 0.6. To get an idea of how large the model is, use the measuring tool in the menu on the left of the screen. Click on one edge of the model, and drag and release it at the end of one side of the model. In this case, the Mellon Institute scaled to 60% is still about 42 meters long, which will be huge in the ARENA. For this model, scaling it down to 10% and remeasuring shows it is a more reasonable size. ",
    "url": "https://docs.arenaxr.org/content/3d-content/downscaling.html#changing-size",
    "relUrl": "/content/3d-content/downscaling.html#changing-size"
  },"350": {
    "doc": "Downscaling Models",
    "title": "Exporting",
    "content": "Now, go to File &gt; Export and choose to export the file as a GLTF or GLB file. The textures should scale to match the model and be applied when exporting. ",
    "url": "https://docs.arenaxr.org/content/3d-content/downscaling.html#exporting",
    "relUrl": "/content/3d-content/downscaling.html#exporting"
  },"351": {
    "doc": "Downscaling Models",
    "title": "Downscaling Models",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/3d-content/downscaling.html",
    "relUrl": "/content/3d-content/downscaling.html"
  },"352": {
    "doc": "Physics Dynamic Body",
    "title": "Physics Dynamic Body",
    "content": "A freely-moving object. Dynamic bodies have mass, collide with other objects, bounce or slow during collisions, and fall if gravity is enabled. More properties at A-Frame Physics System. ",
    "url": "https://docs.arenaxr.org/content/schemas/message/dynamic-body.html#physics-dynamic-body",
    "relUrl": "/content/schemas/message/dynamic-body.html#physics-dynamic-body"
  },"353": {
    "doc": "Physics Dynamic Body",
    "title": "Physics Dynamic Body Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | mass | number | 5 | Simulated mass of the object, &gt; 0. | No | . | linearDamping | number | 0.01 | Resistance to movement. | No | . | angularDamping | number | 0.01 | Resistance to rotation. | No | . | shape | string; One of: ['auto', 'box', 'cylinder', 'sphere', 'hull', 'none'] | 'auto' | Body components will attempt to find an appropriate CANNON.js shape to fit your model. When defining an object you may choose a shape or leave the default, auto. Select a shape carefully, as there are performance implications with different choices. | No | . | cylinderAxis | string; One of: ['x', 'y', 'z'] | 'y' | Override default axis of bounding cylinder. Requires shape:cylinder. | No | . | sphereRadius | number |   | Override default radius of bounding sphere. Requires shape:sphere. NaN by default. | No | . | type | string; One of: ['dynamic', 'static'] | 'dynamic' | Define the result of collisions. Dynamic can be moved, Static cannot be moved. | No | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/dynamic-body.html#physics-dynamic-body-attributes",
    "relUrl": "/content/schemas/message/dynamic-body.html#physics-dynamic-body-attributes"
  },"354": {
    "doc": "Physics Dynamic Body",
    "title": "Physics Dynamic Body",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/dynamic-body.html",
    "relUrl": "/content/schemas/message/dynamic-body.html"
  },"355": {
    "doc": "arena.attributes.dynamic_body",
    "title": "\narena.attributes.dynamic_body    ",
    "content": "class DynamicBody(arena.attributes.attribute.Attribute): DynamicBody attribute class to manage its properties in the ARENA: A freely-moving object. Dynamic bodies have mass, collide with other objects, bounce or slow during collisions, and fall if gravity is enabled. More properties at https://github.com/c-frame/aframe-physics-system/blob/master/CannonDriver.md A-Frame Physics System. Usage: dynamic_body=DynamicBody(...) . Parameters . | float angularDamping: Resistance to rotation. Defaults to '0.01' (optional) | str cylinderAxis: Override default axis of bounding cylinder. Requires shape: cylinder. Allows [x, y, z] Defaults to 'y' (optional) | float linearDamping: Resistance to movement. Defaults to '0.01' (optional) | float mass: Simulated mass of the object, &gt; 0. Defaults to '5' (optional) | str shape: Body components will attempt to find an appropriate CANNON.js shape to fit your model. When defining an object you may choose a shape or leave the default, auto. Select a shape carefully, as there are performance implications with different choices. Allows [auto, box, cylinder, sphere, hull, none] Defaults to 'auto' (optional) | float sphereRadius: Override default radius of bounding sphere. Requires shape: sphere. NaN by default. (optional) | str type: Define the result of collisions. Dynamic can be moved, Static cannot be moved. Allows [dynamic, static] Defaults to 'dynamic' (optional) | . DynamicBody(type=&#39;static&#39;, **kwargs) Inherited Members . arena.base_object.BaseObject add json_encode json class Physics(DynamicBody): Alternate name for DynamicBody. Usage: physics=Physics(...) . Inherited Members . DynamicBody DynamicBody arena.base_object.BaseObject add json_encode json ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/dynamic_body.html",
    "relUrl": "/content/python-api/attributes/dynamic_body.html"
  },"356": {
    "doc": "arena.attributes.dynamic_body",
    "title": "arena.attributes.dynamic_body",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/dynamic_body.html",
    "relUrl": "/content/python-api/attributes/dynamic_body.html"
  },"357": {
    "doc": "Editor",
    "title": "arena-unity Editor",
    "content": "The ArenaUnity package can be used to collaboratively stage and edit ARENA scenes. Be sure to use the project setup instructions to install the package. For the Runtime interface, see the ARENA Unity Runtime instructions. ",
    "url": "https://docs.arenaxr.org/content/unity/editor.html#arena-unity-editor",
    "relUrl": "/content/unity/editor.html#arena-unity-editor"
  },"358": {
    "doc": "Editor",
    "title": "Signin",
    "content": "In the Unity Editor, pressing Play will begin the signin authorization flow. ",
    "url": "https://docs.arenaxr.org/content/unity/editor.html#signin",
    "relUrl": "/content/unity/editor.html#signin"
  },"359": {
    "doc": "Editor",
    "title": "Signout",
    "content": "Two options: . | Editor: Select the menu item ARENA &gt; Signout. | Runtime (Play): Click the Signout button on the ArenaClientScene Component. | . ",
    "url": "https://docs.arenaxr.org/content/unity/editor.html#signout",
    "relUrl": "/content/unity/editor.html#signout"
  },"360": {
    "doc": "Editor",
    "title": "Exporting Unity Objects as GLTF",
    "content": "See our model import/export documentation. ",
    "url": "https://docs.arenaxr.org/content/unity/editor.html#exporting-unity-objects-as-gltf",
    "relUrl": "/content/unity/editor.html#exporting-unity-objects-as-gltf"
  },"361": {
    "doc": "Editor",
    "title": "During Runtime (Play)",
    "content": ". | If objects are stored in the ARENA Persistence Database, they will be child objects of the ARENA GameObject. | You may create or change an object and if it is a child of the ARENA GameObject, its properties will be published to the ARENA Persistence Database. | Incoming authorized messages may also add/change/remove your ARENA Unity objects. | . ",
    "url": "https://docs.arenaxr.org/content/unity/editor.html#during-runtime-play",
    "relUrl": "/content/unity/editor.html#during-runtime-play"
  },"362": {
    "doc": "Editor",
    "title": "Hierarchy Window: Arena Client Runtime",
    "content": "Here, any ARENA objects are highlighted in green text, and the Play button should open the list of ARENA objects automatically. Sorting Objects . | Settings:Edit &gt; Preferences &gt; General &gt; Enable Alpha Numeric Sorting | Change the sorting mode with top right button of the Hierarchy window. | . ",
    "url": "https://docs.arenaxr.org/content/unity/editor.html#hierarchy-window-arena-client-runtime",
    "relUrl": "/content/unity/editor.html#hierarchy-window-arena-client-runtime"
  },"363": {
    "doc": "Editor",
    "title": "Game Window",
    "content": "This is a display of the currently focused Camera in the scene. Navigation . Set the Inspector: ArenaClientScene object option Camera Auto Sync to true, enter the ARENA scene web page, then navigation in the ARENA will also move the Game view. Other Cameras . In the Inspector: ArenaClientScene object option Camera For Display, select from other cameras present on the MQTT bus. Caution: Some GLTF models also come with embedded Camera objects which may show up here. ",
    "url": "https://docs.arenaxr.org/content/unity/editor.html#game-window",
    "relUrl": "/content/unity/editor.html#game-window"
  },"364": {
    "doc": "Editor",
    "title": "Scene Window",
    "content": "This is the editor’s view of the scene, allowing you to manipulate object Transforms graphically using toolbar options. Navigation . Use the Unity controls. ",
    "url": "https://docs.arenaxr.org/content/unity/editor.html#scene-window",
    "relUrl": "/content/unity/editor.html#scene-window"
  },"365": {
    "doc": "Editor",
    "title": "Project Window",
    "content": "Any imported models, images or other resources are stored locally here in the Assets/ArenaUnity folder, mimicking their own URL structure. You can review sub-elements of GLTF models here and their animations. To save space and download time, any video and audio files are not yet imported. ",
    "url": "https://docs.arenaxr.org/content/unity/editor.html#project-window",
    "relUrl": "/content/unity/editor.html#project-window"
  },"366": {
    "doc": "Editor",
    "title": "Console Window",
    "content": "The Console will output status, warning, and error logging here as well as MQTT messages you specify here according to the Log Mqtt options specified in the next section. ",
    "url": "https://docs.arenaxr.org/content/unity/editor.html#console-window",
    "relUrl": "/content/unity/editor.html#console-window"
  },"367": {
    "doc": "Editor",
    "title": "Inspector Window: ArenaClientScene",
    "content": "The ArenaClientScene Script controls the connection and authentication to the ARENA MQTT broker, as well as some client-side ARENA scene state. | name | type | default | description | . | Signout | button | – | Manual button to signout from the ARENA and stop the Runtime. | . | Scene Url | string | null | Browser URL for scene as a clickable link highlighted in blue text. | . | Script | ArenaClientScene | – | The script instance to manage the MQTT runtime. | . | Broker Address | string | arenaxr.org | Host name of the ARENA MQTT broker | . | Namespace Name | string | null | Namespace (automated with username), but can be overridden | . | Scene Name | string | example | Name of the scene, without namespace (‘example’, not ‘username/example’ | . | Camera For Display | Camera | MainCamera | Cameras for Display 1 | . | Camera Auto Sync | bool | false | Synchronize camera display to first ARENA user in the scene | . | Log Mqtt Objects | bool | false | Console log MQTT object messages | . | Log Mqtt Users | bool | false | Console log MQTT user messages | . | Log Mqtt Events | bool | false | Console log MQTT client event messages | . | Log Mqtt Non Persist | bool | false | Console log MQTT non-persist messages | . | Transform Publish Interval | int | 30 | Publish per frames frequency to publish detected transform changes (0 to stop) | . | Email | string | null | Authenticated user email account | . | Permissions | string | null | MQTT JWT Auth Payload and Claims | . ",
    "url": "https://docs.arenaxr.org/content/unity/editor.html#inspector-window-arenaclientscene",
    "relUrl": "/content/unity/editor.html#inspector-window-arenaclientscene"
  },"368": {
    "doc": "Editor",
    "title": "Inspector Window: ArenaObject",
    "content": "The ArenaObject Script monitors Transform and Name changes to an ARENA object, as well as a few other requests, like delete. It also allows the user to manually edit and update ARENA object JSON message data. | name | type | default | description | . | Publish Unity Data | button | – | Manual button to publish an object update. Enabled only for ARENA message type object (transform changes will update automatically). | . | Script | ArenaObject | – | The script instance to manage an ARENA object runtime. | . | Message Type | string | object | Message type in persistence storage schema | . | Persist | bool | true | Persist this object in the ARENA server database (default true = persist on server) | . | Json Data | string | null | ARENA JSON-encoded message data attributes. This can be manually edited and published with the Publish Json Data button. | . | Publish Json Data | button | – | Manual button to publish edited Json Data. Enabled when Json Data is well formatted. | . | Animation | AnimationClip[], buttons | [] | List of animations when included in model. Adds Play, Stop, Rewind buttons for each AnimationClip. | . ",
    "url": "https://docs.arenaxr.org/content/unity/editor.html#inspector-window-arenaobject",
    "relUrl": "/content/unity/editor.html#inspector-window-arenaobject"
  },"369": {
    "doc": "Editor",
    "title": "Inspector Window: ArenaMesh",
    "content": "Each primitive mesh ArenaObject in our ARENA scene is rendered by a custom mesh that preserves its non-inherited size attributes for the Mesh, separate from its inherited size attributes for Scale. Each primitive has a different set of attributes which we mimic from A-Frame’s geometries. The ArenaMesh scripts available are as follows. | ArenaMeshCircle | ArenaMeshCone | ArenaMeshBox | ArenaMeshCylinder | ArenaMeshIcosahedron | ArenaMeshOctahedron | ArenaMeshPlane | ArenaMeshRing | ArenaMeshSphere | ArenaMeshTorus | . ",
    "url": "https://docs.arenaxr.org/content/unity/editor.html#inspector-window-arenamesh",
    "relUrl": "/content/unity/editor.html#inspector-window-arenamesh"
  },"370": {
    "doc": "Editor",
    "title": "ARENA Mesh Tool",
    "content": "The ARENA Mesh Tool is a Unity CustomTool which allows you to manipulate the Mesh dimensions of ARENA primitive geometries without having to modify the Scale component to change the size of an object. Scale is inherited by children objects and Mesh is not inherited. ",
    "url": "https://docs.arenaxr.org/content/unity/editor.html#arena-mesh-tool",
    "relUrl": "/content/unity/editor.html#arena-mesh-tool"
  },"371": {
    "doc": "Editor",
    "title": "Editor",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/unity/editor.html",
    "relUrl": "/content/unity/editor.html"
  },"372": {
    "doc": "arena.objects.entity",
    "title": "\narena.objects.entity    ",
    "content": "class Entity(arena.objects.arena_object.Object): Entity object class to manage its properties in the ARENA: Entities are the base of all objects in the scene. Entities are containers into which components can be attached. Parameters . | dict geometry: geometry (optional) | dict panel: panel (optional) | . Entity(**kwargs) object_type = &#39;entity&#39; Inherited Members . arena.objects.arena_object.Object type all_objects evt_handler update_handler animations delayed_prop_tasks update_attributes dispatch_animation remove_animation_at_index clear_animations clickable json_preprocess json_postprocess json get add remove exists arena.base_object.BaseObject json_encode ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/entity.html",
    "relUrl": "/content/python-api/objects/entity.html"
  },"373": {
    "doc": "arena.objects.entity",
    "title": "arena.objects.entity",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/entity.html",
    "relUrl": "/content/python-api/objects/entity.html"
  },"374": {
    "doc": "Entity (generic object)",
    "title": "Entity (generic object)",
    "content": "Entities are the base of all objects in the scene. Entities are containers into which components can be attached. All wire objects have a set of basic attributes {object_id, action, type, persist, data}. The data attribute defines the object-specific attributes . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/entity.html#entity-generic-object",
    "relUrl": "/content/schemas/message/entity.html#entity-generic-object"
  },"375": {
    "doc": "Entity (generic object)",
    "title": "Entity (generic object) Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | object_id | string |   | A uuid or otherwise unique identifier for this object. | Yes | . | persist | boolean | True | Persist this object in the database. | Yes | . | type | string; Must be: object | 'object' | AFrame 3D Object | Yes | . | action | string; One of: ['create', 'delete', 'update'] | 'create' | Message action create, update, delete. | Yes | . | ttl | integer |   | When applied to an entity, the entity will remove itself from DOM after the specified number of seconds. Update is allowed, which will reset the timer to start from that moment. | No | . | data | Entity (generic object) data |   | Entity (generic object) Data | Yes | . Entity (generic object) Data Attributes . | Attribute | Type | Default | Description | Required | . | object_type | string; Must be: entity | entity | 3D object type. | Yes | . | geometry | geometry |   | The primitive mesh geometry. | No | . | panel | panel |   | The rounded UI panel primitive. | No | . | parent | string |   | Parent’s object_id. Child objects inherit attributes of their parent, for example scale and translation. | No | . | position | position |   | 3D object position. | Yes | . | rotation | rotation |   | 3D object rotation in quaternion representation; Right-handed coordinate system. Euler degrees are deprecated in wire message format. | Yes | . | scale | scale |   | 3D object scale. | No | . | animation | animation |   | Animate and tween values. | No | . | armarker | armarker |   | A location marker (such as an AprilTag, a lightAnchor, or an UWB tag), used to anchor scenes, or scene objects, in the real world. | No | . | click-listener | click-listener |   | Object will listen for mouse events like clicks. | No | . | box-collision-listener | box-collision-listener |   | Listen for bounding-box collisions with user camera and hands. Must be applied to an object or model with geometric mesh. Collisions are determined by course bounding-box overlaps. | No | . | collision-listener | string |   | Name of the collision-listener, default can be empty string. Collisions trigger click events. | No | . | blip | blip |   | When the object is created or deleted, it will animate in/out of the scene instead of appearing/disappearing instantly. Must have a geometric mesh. | No | . | static-body | static-body |   | A fixed-position or animated object. Other objects may collide with static bodies, but static bodies themselves are unaffected by gravity and collisions. | No | . | dynamic-body | dynamic-body |   | A freely-moving object. Dynamic bodies have mass, collide with other objects, bounce or slow during collisions, and fall if gravity is enabled. | No | . | goto-landmark | goto-landmark |   | Teleports user to the landmark with the given name. Requires click-listener. | No | . | goto-url | goto-url |   | Load new URL when object is clicked. Requires click-listener. | No | . | hide-on-enter-ar | boolean; Must be: True | True | Hide object when entering AR. Remove component to not hide. | No | . | hide-on-enter-vr | boolean; Must be: True | True | Hide object when entering VR. Remove component to not hide. | No | . | show-on-enter-ar | boolean; Must be: True | True | Show object when entering AR. Hidden otherwise. | No | . | show-on-enter-vr | boolean; Must be: True | True | Show object when entering VR. Hidden otherwise. | No | . | impulse | impulse |   | Apply an impulse to an object to set it in motion. This happens in conjunction with an event. Requires click-listener and physics. | No | . | landmark | landmark |   | Define entities as a landmark; Landmarks appears in the landmark list and you can move (teleport) to them; You can define the behavior of the teleport: if you will be at a fixed or random distance, looking at the landmark, fixed offset or if it is constrained by a navmesh (when it exists). | No | . | material-extras | material-extras |   | Define extra material properties, namely texture encoding, whether to render the material’s color and render order. | No | . | shadow | shadow |   | The shadow component enables shadows for an entity and its children. Adding the shadow component alone is not enough to display shadows in your scene. We must have at least one light with castShadow: true enabled. | No | . | sound | sound |   | The sound component defines the entity as a source of sound or audio. The sound component can be positional and is thus affected by the component’s position. | No | . | textinput | textinput |   | Opens an HTML prompt when clicked. Sends text input as an event on MQTT. Requires click-listener. | No | . | url | string |   | Use File Store paths under ‘store/users/username’, see CDN and other storage options in the description above. | No | . | remote-render | remote-render |   | Whether or not an object should be remote rendered [Experimental]. | No | . | video-control | video-control |   | Adds a video to an entity and controls its playback. | No | . | attribution | attribution |   | Attribution Component. Saves attribution data in any entity. | No | . | spe-particles | spe-particles |   | GPU based particle systems in A-Frame. | No | . | look-at | string |   | The look-at component defines the behavior for an entity to dynamically rotate or face towards another entity or position. Use ‘#my-camera’ to face the user camera, otherwise can take either a vec3 position or a query selector to another entity. | No | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/entity.html#entity-generic-object-attributes",
    "relUrl": "/content/schemas/message/entity.html#entity-generic-object-attributes"
  },"376": {
    "doc": "Entity (generic object)",
    "title": "Entity (generic object)",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/entity.html",
    "relUrl": "/content/schemas/message/entity.html"
  },"377": {
    "doc": "Environment Presets",
    "title": "Environment Presets",
    "content": "A-Frame Environment presets. More properties at A-Frame Environment Component. ",
    "url": "https://docs.arenaxr.org/content/schemas/message/env-presets.html#environment-presets",
    "relUrl": "/content/schemas/message/env-presets.html#environment-presets"
  },"378": {
    "doc": "Environment Presets",
    "title": "Environment Presets Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | active | boolean | True | Shows or hides the environment presets component. Use this instead of using the visible attribute. | Yes | . | dressing | string; One of: ['apparatus', 'arches', 'cubes', 'cylinders', 'hexagons', 'mushrooms', 'none', 'pyramids', 'stones', 'torii', 'towers', 'trees'] | 'none' | Dressing is the term we use here for the set of additional objects that are put on the ground for decoration. | No | . | dressingAmount | integer | 10 | Number of objects used for dressing. | No | . | dressingColor | string | '#795449' | Base color of dressing objects. | No | . | dressingOnPlayArea | number | 0 | Amount of dressing on play area. | No | . | dressingScale | number | 5 | Height (in meters) of dressing objects. | No | . | dressingUniformScale | boolean | True | If false, a different value is used for each coordinate x, y, z in the random variance of size. | No | . | dressingVariance | vector3 | {'x': 1, 'y': 1, 'z': 1} | Maximum x,y,z meters to randomize the size and rotation of each dressing object. Use 0 0 0 for no variation in size nor rotation. | No | . | flatShading | boolean | False | Whether to show everything smoothed (false) or polygonal (true). | No | . | fog | number | 0 | Amount of fog (0 = none, 1 = full fog). The color is estimated automatically. | No | . | grid | string; One of: ['1x1', '2x2', 'crosses', 'dots', 'none', 'xlines', 'ylines'] | 'none' | 1x1 and 2x2 are rectangular grids of 1 and 2 meters side, respectively. | No | . | gridColor | string | '#ccc' | Color of the grid. | No | . | ground | string; One of: ['canyon', 'flat', 'hills', 'noise', 'none', 'spikes'] | 'hills' | Orography style. | No | . | groundColor | string | '#553e35' | Main color of the ground. | No | . | groundColor2 | string | '#694439' | Secondary color of the ground. Used for textures, ignored if groundTexture is none. | No | . | groundScale | vector3 | {'x': 1, 'y': 1, 'z': 1} | Ground dimensions (in meters). | No | . | groundTexture | string; One of: ['checkerboard', 'none', 'squares', 'walkernoise'] | 'none' | Texture applied to the ground. | No | . | groundYScale | number | 3 | Maximum height (in meters) of ground’s features (hills, mountains, peaks..). | No | . | hideInAR | boolean | True | If true, hide the environment when entering AR. | No | . | horizonColor | string | '#ffa500' | Horizon Color | No | . | lighting | string; One of: ['distant', 'none', 'point'] | 'distant' | A hemisphere light and a key light (directional or point) are added to the scene automatically when using the component. Use none if you don’t want this automatic lighting set being added. The color and intensity are estimated automatically. | No | . | lightPosition | vector3 | {'x': 0, 'y': 1, 'z': -0.2} | Position of the main light. If skyType is atmospheric, only the orientation matters (is a directional light) and it can turn the scene into night when lowered towards the horizon. | No | . | playArea | number | 1 | Radius of the area in the center reserved for the player and the gameplay. The ground is flat in there and no objects are placed inside. | No | . | preset | string; One of: ['arches', 'checkerboard', 'contact', 'default', 'dream', 'egypt', 'forest', 'goaland', 'goldmine', 'japan', 'none', 'osiris', 'poison', 'starry', 'threetowers', 'tron', 'volcano', 'yavapai'] | 'default' | An A-frame preset environment. | Yes | . | seed | integer | 1 | Seed for randomization. If you don’t like the layout of the elements, try another value for the seed. | No | . | shadow | boolean | False | Shadows on/off. Sky light casts shadows on the ground of all those objects with shadow component applied. | No | . | shadowSize | number | 10 | Size of the shadow, if applied. | No | . | skyColor | string | '#ffa500' | Sky Color | No | . | skyType | string; One of: ['atmosphere', 'color', 'gradient', 'none'] | 'color' | A sky type. | No | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/env-presets.html#environment-presets-attributes",
    "relUrl": "/content/schemas/message/env-presets.html#environment-presets-attributes"
  },"379": {
    "doc": "Environment Presets",
    "title": "Environment Presets",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/env-presets.html",
    "relUrl": "/content/schemas/message/env-presets.html"
  },"380": {
    "doc": "arena.env",
    "title": "\narena.env    ",
    "content": "REALM = &#39;REALM&#39; .. envvar:: REALM . The :envvar:REALM defines the ARENA Realm to listen to. After connecting, the library listens to a scene topic as follows: {REALM}/s/{NAMESPACE}/{SCENE}. This variable overrides arguments passed in the scene's constructor. SCENE = &#39;SCENE&#39; .. envvar:: SCENE . The :envvar:SCENE defines ARENA Scene to listen to. After connecting, the library listens to a scene topic as follows: {REALM}/s/{NAMESPACE}/{SCENE}. This variable overrides arguments passed in the scene's constructor. NAMESPACE = &#39;NAMESPACE&#39; .. envvar:: NAMESPACE . The :envvar:NAMESPACE defines ARENA Namespace to listen to. After connecting, the library listens to a scene topic as follows: {REALM}/s/{NAMESPACE}/{SCENE}. This variable overrides arguments passed in the scene's constructor. ARENA_USERNAME = &#39;ARENA_USERNAME&#39; .. envvar:: ARENA_USERNAME . The :envvar:ARENA_USERNAME defines username used to authenticate. If undefined, will try to use local authentication information previously saved. ARENA_PASSWORD = &#39;ARENA_PASSWORD&#39; .. envvar:: ARENA_PASSWORD . The :envvar:ARENA_PASSWORD defines password used to authenticate. If undefined, will try to use local authentication information previously saved. MQTTH = &#39;MQTTH&#39; .. envvar:: MQTTH . The :envvar:MQTTH defines the MQTT host used by the library. This variable allows to use a broker different from the host argument passed to the scene constructor . DEVICE = &#39;DEVICE&#39; .. envvar:: DEVICE . The :envvar:DEVICE defines the name of a device, to publish and listen to. After connecting, the library listens to device topic as follows: {REALM}/d/{NAMESPACE}/{SCENE}. This variable overrides arguments passed in the command line. PROGRAM_OBJECT_ID = &#39;PROGRAM_OBJECT_ID&#39; .. envvar:: PROGRAM_OBJECT_ID . The :envvar:PROGRAM_OBJECT_ID indicates the object id in ARENA persist for this program. This is passed by the runtime and used to identify the program object that represents the currently running program. ENABLE_INTERPRETER = &#39;ENABLE_INTERPRETER&#39; .. envvar:: ENABLE_INTERPRETER . The :envvar:ENABLE_INTERPRETER enables the a simple command line interpreter that can be used to inspect library/program state. Set this variable with a value of true, 1 or t (case insensitive) to enable the interpreter. Default: 'false' . ARENA_TELEMETRY = &#39;ARENA_TELEMETRY&#39; .. envvar:: ARENA_TELEMETRY . The :envvar:ARENA_TELEMETRY environment variable enables the library's telemetry to generate traces, metrics, and logs. Set this variable with a value of otlp, mqtt or console (case insensitive) to enable telemetry using OpenTelemetry (OTEL) and its Protocol (OTLP), send JSON OTEL spans to MQTT, or to the console. OTLP_ENDPOINT = &#39;OTLP_ENDPOINT&#39; .. envvar:: OTLP_ENDPOINT . The :envvar:OTLP_ENDPOINT environment variable is used when OTLP telemetry is enabled (ARENA_TELEMETRY=otlp) to define the telemtry endpoint. Our implementation uses OpenTelemetry (OTEL) and its Protocol (OTLP) for encoding and transport. Default: \"http://localhost:4317\" . OTEL_LOG_LEVEL = &#39;OTEL_LOG_LEVEL&#39; .. envvar:: OTEL_LOG_LEVEL . The :envvar:OTEL_LOG_LEVEL environment variable sets the log level used by the logger implementation (ArenaTelemetry) using OpenTelemetry (OTEL). Default: \"info\". PROGRAM_STATS_UPDATE_INTERVAL_MS = &#39;PROGRAM_STATS_UPDATE_INTERVAL_MS&#39; .. envvar:: PROGRAM_STATS_UPDATE_INTERVAL_MS . The :envvar:PROGRAM_STATS_UPDATE_INTERVAL_MS environment variable defines how often program stats are published . Default: 5000. ENV_DEFAULTS = {&#39;ENABLE_INTERPRETER&#39;: &#39;false&#39;, &#39;OTLP_ENDPOINT&#39;: &#39;http://localhost:4317&#39;, &#39;OTEL_LOG_LEVEL&#39;: &#39;info&#39;, &#39;PROGRAM_STATS_UPDATE_INTERVAL_MS&#39;: 5000} ",
    "url": "https://docs.arenaxr.org/content/python-api/env.html",
    "relUrl": "/content/python-api/env.html"
  },"381": {
    "doc": "arena.env",
    "title": "arena.env",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/env.html",
    "relUrl": "/content/python-api/env.html"
  },"382": {
    "doc": "arena.events.event",
    "title": "\narena.events.event    ",
    "content": "class Event(arena.base_object.BaseObject): Event class. Wrapper around JSON for events. Event(**kwargs) Inherited Members . arena.base_object.BaseObject add json_encode json ",
    "url": "https://docs.arenaxr.org/content/python-api/events/event.html",
    "relUrl": "/content/python-api/events/event.html"
  },"383": {
    "doc": "arena.events.event",
    "title": "arena.events.event",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/events/event.html",
    "relUrl": "/content/python-api/events/event.html"
  },"384": {
    "doc": "Event",
    "title": "Event",
    "content": "Generate an event message for an object. All wire objects have a set of basic attributes {object_id, action, type, persist, data}. The data attribute defines the object-specific attributes . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/event.html#event",
    "relUrl": "/content/schemas/message/event.html#event"
  },"385": {
    "doc": "Event",
    "title": "Event Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | object_id | string |   | A uuid or otherwise unique identifier for this object. | Yes | . | persist | boolean | False | Persist this object in the database. | No | . | type | string; One of: ['mousedown', 'mouseup', 'mouseenter', 'mouseleave', 'triggerdown', 'triggerup', 'gripdown', 'gripup', 'menudown', 'menuup', 'systemdown', 'systemup', 'trackpaddown', 'trackpadup', 'soundplay', 'soundpause', 'soundstop'] |   | One of the client event action types like ‘mousedown’. | Yes | . | action | string; Must be: clientEvent | 'clientEvent' | Message action client event. | Yes | . | data | Event data |   | Event Data | Yes | . Event Data Attributes . | Attribute | Type | Default | Description | Required | . | source | string |   | The object_id of event origination. e.g camera or client program connection id. | Yes | . | position | vector3 |   | The event destination position in 3D. | Yes | . | clickPos | vector3 | {'x': 0, 'y': 1.6, 'z': 0} | The event origination position in 3D. | No | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/event.html#event-attributes",
    "relUrl": "/content/schemas/message/event.html#event-attributes"
  },"386": {
    "doc": "Event",
    "title": "Event",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/event.html",
    "relUrl": "/content/schemas/message/event.html"
  },"387": {
    "doc": "arena.event_loop.event_loop",
    "title": "\narena.event_loop.event_loop    ",
    "content": "class EventLoop: Wrapper for an asyncio event loop. EventLoop(shutdown_func=None) tasks loop shutdown_func def add_task(self, worker): def shutdown_wrapper(self, *args): def create_future(self): def run(self): def stop(self): ",
    "url": "https://docs.arenaxr.org/content/python-api/event_loop/event_loop.html",
    "relUrl": "/content/python-api/event_loop/event_loop.html"
  },"388": {
    "doc": "arena.event_loop.event_loop",
    "title": "arena.event_loop.event_loop",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/event_loop/event_loop.html",
    "relUrl": "/content/python-api/event_loop/event_loop.html"
  },"389": {
    "doc": "arena.event_loop",
    "title": "\narena.event_loop    ",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/python-api/event_loop.html",
    "relUrl": "/content/python-api/event_loop.html"
  },"390": {
    "doc": "arena.event_loop",
    "title": "arena.event_loop",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/event_loop.html",
    "relUrl": "/content/python-api/event_loop.html"
  },"391": {
    "doc": "Events",
    "title": "Events in arena-py",
    "content": "Events are ways to interact with user input in the ARENA. See object definition reference. ",
    "url": "https://docs.arenaxr.org/content/python/events.html#events-in-arena-py",
    "relUrl": "/content/python/events.html#events-in-arena-py"
  },"392": {
    "doc": "Events",
    "title": "Event handlers",
    "content": "To handle events in arena-py, you must set a function to the evt_handler parameter. When you attach an evt_handler to an Object, you will receive Event objects in your handler. Below is how you access attributes of the Event object. # [scene] is the Scene that called the callback # [evt] will be an Event instance # [msg] is the raw JSON message as a dict def click_handler(scene, evt, msg): ## Get Event type evt.type # == \"buttonClick\", \"mousedown\", \"mouseup\", \"mouseenter\", \"mouseleave\", etc. ## Get Event data evt.data.clickPos evt.data.position evt.data.source evt.data.buttonName evt.data.buttonIndex # etc. box = Box(..., evt_handler=click_handler) # note the use of \"evt_handler=click_handler\" # could also do box.evt_handler = click_handler # or box.update_attributes(evt_handler=click_handler) . ",
    "url": "https://docs.arenaxr.org/content/python/events.html#event-handlers",
    "relUrl": "/content/python/events.html#event-handlers"
  },"393": {
    "doc": "Events",
    "title": "Generating events with arena-py Scenes",
    "content": "Click Events . There are several types of click events that you can generate (mousedown, mouseup, mouseenter, mouseleave, triggerdown, triggerup): . scene.generate_click_event(obj, type, ...) # add a click listener to an object to be able to click it obj.update_attributes(clickable=True) # generate a \"fake\" click event from arena-py scene.generate_click_event( obj, type=\"mouseup\" ) # arena-py will \"click\" obj with mouseup. In JSON, \"source\" will be defined as \"arena_lib_[some random ID here]\". Camera Manipulation Events . You can also move a user’s camera and/or make it look at a specific location or object: . scene.manipulate_camera(obj, type, ...) # move camera: scene.manipulate_camera( camera, position=(rando(),1.6,rando()), rotation=(0,0,0,1) ) # make camera look at something/some position: scene.look_at( camera, target=box # can also do a position: (0,0,0) ) . Generic Events . If there is an event that does not exist yet, you can use this to have more freedom in the event type: . # define custom event evt = Event(type=\"my_custom_event\", position=(3,4,5), target=sphere) # generate custom event with arena-py client scene.generate_custom_event(evt, action=\"clientEvent\") . ",
    "url": "https://docs.arenaxr.org/content/python/events.html#generating-events-with-arena-py-scenes",
    "relUrl": "/content/python/events.html#generating-events-with-arena-py-scenes"
  },"394": {
    "doc": "Events",
    "title": "Appendix",
    "content": "Event(object_id, action, type, ...) . ",
    "url": "https://docs.arenaxr.org/content/python/events.html#appendix",
    "relUrl": "/content/python/events.html#appendix"
  },"395": {
    "doc": "Events",
    "title": "Events",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/python/events.html",
    "relUrl": "/content/python/events.html"
  },"396": {
    "doc": "arena.events",
    "title": "\narena.events    ",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/python-api/events.html",
    "relUrl": "/content/python-api/events.html"
  },"397": {
    "doc": "arena.events",
    "title": "arena.events",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/events.html",
    "relUrl": "/content/python-api/events.html"
  },"398": {
    "doc": "Examples Index",
    "title": "ARENA Examples Index",
    "content": "An alphabetical glossary of every example of the ARENA’s features. These examples are all configurable by sending or storing the wire-format messages for the ARENA protocol. ",
    "url": "https://docs.arenaxr.org/content/examples.html#arena-examples-index",
    "relUrl": "/content/examples.html#arena-examples-index"
  },"399": {
    "doc": "Examples Index",
    "title": "Support",
    "content": "Which Web/Python/Unity platform supports each of these features? Take a look at our version support for each type: . | Rendering Features Support | Browser Support | . ",
    "url": "https://docs.arenaxr.org/content/examples.html#support",
    "relUrl": "/content/examples.html#support"
  },"400": {
    "doc": "Examples Index",
    "title": "Examples",
    "content": "Thumbnail images can be clicked for a larger view. Multiple links are provided to examples of each feature. | Example | Thumbnail | Description | Type: Links | . | Action (Message) |   | The scene graph action: create, update (merge), delete. | Graph: Tutorial | . | Animation | | Animate and tween values. | Attribute: Schema Message Python Tutorial | . | Animation Mixer | | Control playing animations stored in a GLTF model. | Attribute: Schema Message Python Tutorial | . | AR Hide/Show | | Hide/Show object (hide-on-enter-ar) when entering AR. | Attribute: Schema | . | AR Marker | | A location marker used to anchor scenes/objects, in the real world | Attribute: Schema Python Tutorial | . | ARTS | | ARTS, a runtime supervisor for programs | Application | . | ATLAS | | ATLAS, a geolocation index of AR scenes. | Application Tutorial forthcoming | . | Attribution | | Attribution Component. Saves attribution data in any entity | Attribute: Schema Python Tutorial | . | Audio | | User’s Microphone On/Off state (requires microphone permission) | User: Tutorial | . | Blip | | When the object is created or deleted, it will animate in/out | Attribute: Schema Python | . | Box | | Box Geometry (Unity Cube) | Object: Schema Message Python Tutorial | . | Box Collision | | Listen for bounding-box collisions with user camera and hands (box-collision-listener) | Attribute: Schema Python | . | Buffer Geometry | | Reduce geometry memory usage while being harder to manipulate (buffer) | Attribute: Schema | . | Build | | Build is a JSON editor for the persisted scene graph. | Application Tutorial | . | Build 3D | | Build3D is a visual 3D editor for the persisted scene graph (based on Inspector) | Application Tutorial | . | Callbacks |   | A handler in a program to receive an ARENA Event. | Concept Tutorial | . | Camera | | Camera is the pose and component data representing a user avatar | Object: Schema Message Python | . | Capsule | | Capsule Geometry | Object: Schema Python | . | Chat | | A messaging tool for other users in the ARENA | User: Tutorial | . | Child |   | See Parent. | Concept | . | Circle | | Circle Geometry | Object: Schema Python | . | Click | | Object will listen for clicks (click-listener) | Attribute: Schema Message Python | . | Collision | | Collisions trigger click events (collision-listener) | Attribute: Schema | . | Color | | Color of the material (as hex code), supported in the material.color attribute. | Attribute: Schema Message Python | . | Cone | | Cone Geometry | Object: Schema Python | . | Conference |   | Using the ARENA scene as a 3D zoom room, video conference, meeting. | Concept Tutorial | . | Cube | | Cube Geometry (deprecated, see Box) | Object: | . | Cylinder | | Cylinder Geometry | Object: Schema Python | . | Data Block |   | The scene graph data Attributes, storing component details. | Graph: | . | Display Name | | The user-editable display name, derived from the Google account byu default | User: Tutorial | . | Dodecahedron | | Dodecahedron Geometry | Object: Schema Python | . | Entity | | Entities are containers into which components can be attached | Object: Schema Python | . | Event | | Events are ephemeral messages used for events like controller actions | Object: Schema Message Python | . | Facial Recognition Avatar | | Recognizes your facial feature points from your camera and animates a 3d head | User: Tutorial | . | File Store | | The filestore interface for user file editing and uploading. | Application Tutorial | . | Flight/Fly | | The user state to navigate on a 2D ground plane or 3D flight. | User: Tutorial | . | Gaussian Splat | | Load 3D Gaussian Splat | Object: Schema Python | . | Geometry |   | Geometry (Mesh) is the ordered collection of vertices to make a 3D primitive. | Concept | . | GLTF LOD | | Switch between default and detailed GLTF models | Attribute: Schema Tutorial | . | GLTF Model | | GLTF Models afford consistent cross-platform rendering of 3D assets | Object: Schema Message Python Tutorial | . | GLTF Model Update | | Allows translation of named GLTF model sub-components. | Attribute: Schema Message Python | . | GLTF Morph | | Target and control a GLTF model morphTargets created in Blender | Attribute: Schema Python | . | Go to Landmark | | Teleports user to the landmark with the given name | Attribute: Schema Python | . | Go to URL | | Goto given URL | Attribute: Schema Message Python | . | Hand Left | | Hand Left is the metadata pose and controller type of the user avatar | Object: Schema Python | . | Hand Right | | Hand Right is the metadata pose and controller type of the user avatar | Object: Schema Python | . | Health Check | | A clickable warning/error icon when critical errors happen in a scene | User: Tutorial | . | Icosahedron | | Icosahedron Geometry | Object: Schema Python | . | Image | | Display an image on a plane | Object: Schema Message Python | . | Impulse | | The force applied using physics. | Attribute: Schema Message Python | . | Inspector | | The A-Frame Inspector, a visual 3D scene graph debugger | Application Tutorial | . | Jitsi Video | | Apply Jitsi video source to the geometry | Attribute: Schema Python | . | Landmark | | Landmarks allow you to jump to certain places of interest in a scene | Attribute: Schema Message Python Tutorial | . | Light | | A light | Object: Schema Message Python | . | Line | | Draw a line | Object: Schema Message Python | . | Look At | | Dynamically rotate or face towards another entity or position (look-at) | Attribute: Schema Message Python | . | Material | | The material properties of the object’s surface. | Attribute: Schema Message Python | . | Material Extras | | Define extra material properties: texture encoding, render order | Attribute: Schema Python | . | Multi-Src | | Define multiple visual sources applied to an object. | Attribute: Schema Message Python | . | Namespace |   | Your ARENA account namespace (same as User Name) | Concept Tutorial | . | Nav Mesh | | Invisible 3D model surface for users to move upon. | Scene: Tutorial | . | Navigation Controller | | Using the VR Helmet Controller to hop around a scene. | User: Tutorial | . | Navigation Keys | | Using the VR Desktop keyboard keys to move around a scene. | User: Tutorial | . | Network Graph | | A web interface of MQTT message traffic | Application Tutorial | . | Null |   | Any JSON attribute may be removed by setting it equal to null | Graph: Python Tutorial | . | Object ID |   | The scene graph name ID for the entity, must be unique in the scene. | Graph: | . | Ocean | | Ocean | Object: Schema Python | . | Octahedron | | Octahedron Geometry | Object: Schema Python | . | Origin Marker |   | Origin Tag | Concept Tutorial | . | Overwrite |   | The scene graph directive to erase and overwrite this entity’s data, not merge | Graph: | . | Parent | | Parent’s object_id. Child objects inherit scale and translation (parent) | Attribute: Schema Message Python | . | Particles (SPE) | | GPU based particle systems in A-Frame. | Attribute: Schema Message Python Tutorial | . | PCD Model | | Load a Point-Cloud data (PCD) model | Object: Schema Python | . | Persist |   | The scene graph directive to store the entity in the persistence database. | Graph: Tutorial | . | Physics (Dynamic) | | Physics type attached to the object (dynamic-body). | Attribute: Schema Message Python | . | Physics (Static) | | Physics type attached to the object (static-body). | Attribute: Schema Message Python | . | Plane | | Plane Geometry (Unity Quad/Plane) | Object: Schema Python | . | Position | | 3D object position | Attribute: Schema Message Python | . | Program | | ARENA program data | Program: Message Tutorial | . | Remote Render | | Whether or not an object should be remote rendered [Experimental] | Attribute: Schema Tutorial | . | Ring | | Ring Geometry | Object: Schema Python | . | Rotation | | 3D object rotation in quaternions; Right-handed coordinates | Attribute: Schema Message Python | . | Rounded Box | | Rounded Box Geometry | Object: Schema Python | . | Scale | | 3D object scale | Attribute: Schema Message Python | . | Scene | | The main 3D rendered scene web interface | Application Tutorial | . | Scenes List | | A list of scenes to browse and scene entry URL options. | Application Tutorial | . | Screenshareable | | Whether or not a user can screen share on an object (screenshareable) | Attribute: Schema Tutorial | . | Segment |   | Segments are the rows of triangles used to render a Mesh Geometry Primitive | Concept | . | Shadow | | Defines how objects cast and receive shadow | Attribute: Schema Python | . | Sign In |   | Signin, login | User: Tutorial | . | Sign Out |   | Signout, logout | User: Tutorial | . | Skip Cache | | Disable retrieving the shared geometry object from the cache (skipCache) | Attribute: Schema | . | Sound | | Positional sound is thus affected by the component’s position | Attribute: Schema Message Python | . | Speed | | The user setting defining how fast to move when using Navigation Keys | User: Tutorial | . | Sphere | | Sphere Geometry | Object: Schema Python | . | Spot AR | | SpotAR is a mode for viewing AR-tagged content in restricted browsers (Safari) | Application Tutorial | . | Start/Spawn Position |   | The scene options to control the variance of position to enter the scene | Scene: Tutorial | . | Tetrahedron | | Tetrahedron Geometry | Object: Schema Python | . | Text | | Display text | Object: Schema Message Python | . | Text Input | | Opens an HTML prompt when clicked. Sends text xas an event on MQTT | Attribute: Schema Python | . | Thickline | | Draw a thick line that can have a custom width | Object: Schema Message Python | . | Three.js Scene | | Load a Three.js Scene | Object: Schema Python | . | Torus | | Torus Geometry | Object: Schema Python | . | Torus Knot | | Torus Knot Geometry | Object: Schema Message Python | . | Triangle | | Triangle Geometry | Object: Schema Python | . | TTL |   | The scene graph directive Time-To-Live specifying auto-delete time | Graph: Message | . | UI Button Panel | | ARENAUI Button Panel | Object: Schema Python Tutorial | . | UI Card | | ARENAUI Card | Object: Schema Python Tutorial | . | UI Prompt | | ARENAUI Prompt | Object: Schema Python Tutorial | . | URDF Model | | URDF Models are used to express robotic shapes and joint parameters | Object: Schema Python | . | User Account | | The User’s account profile and scene permissions. | Application Tutorial | . | User List | | A scene tool to list connect users and their Jitsi (video conference) state | User: Tutorial | . | User Name |   | Your ARENA account username (same as Namespace) | Concept Tutorial | . | Video | | User’s Camera On/Off state (requires camera permission) | User: Tutorial | . | Video Control | | Video Control | Attribute: Schema Python | . | Video Quality | | An indicator above a user when Jitsi video quality is poor | User: Tutorial | . | Videosphere | | Video sphere 360 video bubble | Object: Schema Message Python Tutorial | . | VR Hide/Show | | Hide/Show object (hide-on-enter-vr) when entering VR. | Attribute: Schema | . | WebXR | | WebXR is an API for building web-accessible XR scenes. | Application Tutorial | . ",
    "url": "https://docs.arenaxr.org/content/examples.html#examples",
    "relUrl": "/content/examples.html#examples"
  },"401": {
    "doc": "Examples Index",
    "title": "Wire Format Types",
    "content": "User Option . User preferences to alter default behavior. For reference, a list of some user settings. Graph Property . A property of the entity as it relates to the scene graph. Object (3D) . Base 3D entity to which multiple components can be attached. For reference, a list of all 3D Objects. Attribute (3D Object) . A component or effect which can be optionally added to an entity. Program . ARENA remote runtime, Python or WebAssembly (WASM). For reference, a list of all program attributes . Scene Option . ARENA Scene Options. For reference, a list of all scene options . Environment Setting . A-Frame Environment presets. More properties at repo supermedium/aframe-environment-component. Renderer Setting . These settings are fed into three.js WebGLRenderer properties. For reference, a list of all renderer settings . Post-Processing Effect . These effects are enabled in desktop and XR views. For reference, a list of all post-processing effects . ",
    "url": "https://docs.arenaxr.org/content/examples.html#wire-format-types",
    "relUrl": "/content/examples.html#wire-format-types"
  },"402": {
    "doc": "Examples Index",
    "title": "Examples Index",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/examples.html",
    "relUrl": "/content/examples.html"
  },"403": {
    "doc": "File Store",
    "title": "ARENA File Store Storage",
    "content": "To add models or programs to the ARENA, they will have to be stored somewhere. The file store is where most of these files are currently located, and can easily be accessed. We only allow 3 different methods of storage currently: the ARENA File Store, CDN, and Dropbox, as follows. | ARENA File Store Url: store/users/wiselab/build/blumbach.glb | ARENA File Store CDN Url: https://arena-cdn.conix.io/store/users/wiselab/build/blumbach.glb | Dropbox Url: https://www.dropbox.com/s/pgytn552kzukm8f/blumbach.glb?dl=0 | . ",
    "url": "https://docs.arenaxr.org/content/interface/filestore.html#arena-file-store-storage",
    "relUrl": "/content/interface/filestore.html#arena-file-store-storage"
  },"404": {
    "doc": "File Store",
    "title": "User Space",
    "content": "Every user automatically has space publicly available: https://arenaxr.org/store/users/[your username]. ",
    "url": "https://docs.arenaxr.org/content/interface/filestore.html#user-space",
    "relUrl": "/content/interface/filestore.html#user-space"
  },"405": {
    "doc": "File Store",
    "title": "Uploading Models",
    "content": "Think about how you want to a user to load large files from a web browser. The answer to these questions may effect the storage methods below: . | Will this take a long time to load? | Should you decimate your model to improve loading? | Will you need a CDN to improve download latency/bandwidth? | Do you want expanded storage you can purchase from Dropbox? | . File Store Upload on Build Page . This example will highlight the ARENA File Store strategy. Under Add/Edit Object, select Type: GLTF Model, then click the [Upload File &amp; Publish] button at the top of the build page . Select the model and it will be uploaded for you automatically. File Store Web Interface . | After logging into the ARENA file store, there will be options to create a new folder or file on the left of the screen. You can upload entire folders or files, either by clicking the “upload” button on the top right, or dragging them to the page. You can copy a filestore path or file link by opening the file or folder and clicking the copy path link button . | | . Most of the 3D models are stored in the folder “models”. To add a 3D model, make sure that it is in *.GLB/*.GLTF format, and upload the models. If it is a GLTF in a folder with multiple files, make sure to upload all of it. Keep this in mind when adding the object to a scene, as you will have to specify the GLTF file name within the folder (but not the textures or other components). File Store CDN . You may choose to have our CDN store the files for faster loading. In that case, just store files paths under ‘store/users/' and to use CDN, prefix with `https://arena-cdn.conix.io/` (e.g. `https://arena-cdn.conix.io/store/users/wiselab/build/blumbach.glb`). warning . We have a synchronization process when using this CDN access method. Be aware that it may take up to 5 minutes for your files to be available through our CDN link. Dropbox . In order to use it in the ARENA, we uploaded a .glb copy to dropbox and shared it publicly: https://www.dropbox.com/s/pgytn552kzukm8f/blumbach.glb?dl=0 . note . Why Dropbox? ARENA internally converts dropbox share links into dl.dropboxusercontent.com, which currently allows the ARENA to use the content hosted at dropbox due to Cross-origin Resource Sharing. You can host up to 2GB of your models and other media/content on Dropbox as well for free. ",
    "url": "https://docs.arenaxr.org/content/interface/filestore.html#uploading-models",
    "relUrl": "/content/interface/filestore.html#uploading-models"
  },"406": {
    "doc": "File Store",
    "title": "Uploading Programs",
    "content": "To upload a Python or WASM program to the ARENA, follow the same steps as uploading a 3D model. Either create a new file/folder, or upload the files/folders with the programs. ",
    "url": "https://docs.arenaxr.org/content/interface/filestore.html#uploading-programs",
    "relUrl": "/content/interface/filestore.html#uploading-programs"
  },"407": {
    "doc": "File Store",
    "title": "Additional Notes",
    "content": "Keep in mind the locations of your files, as you will need to know them when trying to add them to the ARENA using the build page. ",
    "url": "https://docs.arenaxr.org/content/interface/filestore.html#additional-notes",
    "relUrl": "/content/interface/filestore.html#additional-notes"
  },"408": {
    "doc": "File Store",
    "title": "File Store",
    "content": "| ",
    "url": "https://docs.arenaxr.org/content/interface/filestore.html",
    "relUrl": "/content/interface/filestore.html"
  },"409": {
    "doc": "arena.objects.gaussian_splatting",
    "title": "\narena.objects.gaussian_splatting    ",
    "content": "class GaussianSplatting(arena.objects.arena_object.Object): GaussianSplatting object class to manage its properties in the ARENA: Load a 3D Gaussian Splat for Real-Time Radiance Field Rendering. More information: https://github.com/quadjr/aframe-gaussian-splatting A-Frame Gaussian Splatting. See guidance to store paths under https://docs.arenaxr.org/content/interface/filestore.html ARENA File Store, CDN, or DropBox. Parameters . | str cutoutEntity: Selector to a box primitive that uses scale and position to define the bounds of splat points to render. (optional) | float pixelRatio: Pixel ratio for rendering. Reducing the value decreases the resolution and improves performance. If a negative value is set, the device's native value will be applied. Defaults to '1.0' (optional) | str src: Use File Store paths under 'store/users/username', see CDN and other storage options in the description above. (optional) | float xrPixelRatio: Same as pixelRatio. Applied to XR devices. Defaults to '0.5' (optional) | . GaussianSplatting(**kwargs) object_type = &#39;gaussian_splatting&#39; Inherited Members . arena.objects.arena_object.Object type all_objects evt_handler update_handler animations delayed_prop_tasks update_attributes dispatch_animation remove_animation_at_index clear_animations clickable json_preprocess json_postprocess json get add remove exists arena.base_object.BaseObject json_encode ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/gaussian_splatting.html",
    "relUrl": "/content/python-api/objects/gaussian_splatting.html"
  },"410": {
    "doc": "arena.objects.gaussian_splatting",
    "title": "arena.objects.gaussian_splatting",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/gaussian_splatting.html",
    "relUrl": "/content/python-api/objects/gaussian_splatting.html"
  },"411": {
    "doc": "3D Gaussian Splat",
    "title": "3D Gaussian Splat",
    "content": "Load a 3D Gaussian Splat for Real-Time Radiance Field Rendering. More information: A-Frame Gaussian Splatting. See guidance to store paths under ARENA File Store, CDN, or DropBox. All wire objects have a set of basic attributes {object_id, action, type, persist, data}. The data attribute defines the object-specific attributes . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/gaussian_splatting.html#3d-gaussian-splat",
    "relUrl": "/content/schemas/message/gaussian_splatting.html#3d-gaussian-splat"
  },"412": {
    "doc": "3D Gaussian Splat",
    "title": "3D Gaussian Splat Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | object_id | string |   | A uuid or otherwise unique identifier for this object. | Yes | . | persist | boolean | True | Persist this object in the database. | Yes | . | type | string; Must be: object | 'object' | AFrame 3D Object | Yes | . | action | string; One of: ['create', 'delete', 'update'] | 'create' | Message action create, update, delete. | Yes | . | ttl | integer |   | When applied to an entity, the entity will remove itself from DOM after the specified number of seconds. Update is allowed, which will reset the timer to start from that moment. | No | . | data | 3D Gaussian Splat data |   | 3D Gaussian Splat | Yes | . 3D Gaussian Splat Data Attributes . | Attribute | Type | Default | Description | Required | . | object_type | string; Must be: gaussian_splatting | gaussian_splatting | 3D object type. | Yes | . | src | string |   | Use File Store paths under ‘store/users/username’, see CDN and other storage options in the description above. | Yes | . | cutoutEntity | string | '' | Selector to a box primitive that uses scale and position to define the bounds of splat points to render. | No | . | pixelRatio | number | 1.0 | Pixel ratio for rendering. Reducing the value decreases the resolution and improves performance. If a negative value is set, the device’s native value will be applied. | No | . | xrPixelRatio | number | 0.5 | Same as pixelRatio. Applied to XR devices. | No | . | parent | string |   | Parent’s object_id. Child objects inherit attributes of their parent, for example scale and translation. | No | . | position | position |   | 3D object position. | Yes | . | rotation | rotation |   | 3D object rotation in quaternion representation; Right-handed coordinate system. Euler degrees are deprecated in wire message format. | Yes | . | scale | scale |   | 3D object scale. | Yes | . | animation | animation |   | Animate and tween values. | No | . | armarker | armarker |   | A location marker (such as an AprilTag, a lightAnchor, or an UWB tag), used to anchor scenes, or scene objects, in the real world. | No | . | click-listener | click-listener |   | Object will listen for mouse events like clicks. | No | . | box-collision-listener | box-collision-listener |   | Listen for bounding-box collisions with user camera and hands. Must be applied to an object or model with geometric mesh. Collisions are determined by course bounding-box overlaps. | No | . | collision-listener | string |   | Name of the collision-listener, default can be empty string. Collisions trigger click events. | No | . | blip | blip |   | When the object is created or deleted, it will animate in/out of the scene instead of appearing/disappearing instantly. Must have a geometric mesh. | No | . | static-body | static-body |   | A fixed-position or animated object. Other objects may collide with static bodies, but static bodies themselves are unaffected by gravity and collisions. | No | . | dynamic-body | dynamic-body |   | A freely-moving object. Dynamic bodies have mass, collide with other objects, bounce or slow during collisions, and fall if gravity is enabled. | No | . | goto-landmark | goto-landmark |   | Teleports user to the landmark with the given name. Requires click-listener. | No | . | goto-url | goto-url |   | Load new URL when object is clicked. Requires click-listener. | No | . | hide-on-enter-ar | boolean; Must be: True | True | Hide object when entering AR. Remove component to not hide. | No | . | hide-on-enter-vr | boolean; Must be: True | True | Hide object when entering VR. Remove component to not hide. | No | . | show-on-enter-ar | boolean; Must be: True | True | Show object when entering AR. Hidden otherwise. | No | . | show-on-enter-vr | boolean; Must be: True | True | Show object when entering VR. Hidden otherwise. | No | . | impulse | impulse |   | Apply an impulse to an object to set it in motion. This happens in conjunction with an event. Requires click-listener and physics. | No | . | landmark | landmark |   | Define entities as a landmark; Landmarks appears in the landmark list and you can move (teleport) to them; You can define the behavior of the teleport: if you will be at a fixed or random distance, looking at the landmark, fixed offset or if it is constrained by a navmesh (when it exists). | No | . | material-extras | material-extras |   | Define extra material properties, namely texture encoding, whether to render the material’s color and render order. | No | . | shadow | shadow |   | The shadow component enables shadows for an entity and its children. Adding the shadow component alone is not enough to display shadows in your scene. We must have at least one light with castShadow: true enabled. | No | . | sound | sound |   | The sound component defines the entity as a source of sound or audio. The sound component can be positional and is thus affected by the component’s position. | No | . | textinput | textinput |   | Opens an HTML prompt when clicked. Sends text input as an event on MQTT. Requires click-listener. | No | . | url | string |   | Use File Store paths under ‘store/users/username’, see CDN and other storage options in the description above. | No | . | remote-render | remote-render |   | Whether or not an object should be remote rendered [Experimental]. | No | . | video-control | video-control |   | Adds a video to an entity and controls its playback. | No | . | attribution | attribution |   | Attribution Component. Saves attribution data in any entity. | No | . | spe-particles | spe-particles |   | GPU based particle systems in A-Frame. | No | . | look-at | string |   | The look-at component defines the behavior for an entity to dynamically rotate or face towards another entity or position. Use ‘#my-camera’ to face the user camera, otherwise can take either a vec3 position or a query selector to another entity. | No | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/gaussian_splatting.html#3d-gaussian-splat-attributes",
    "relUrl": "/content/schemas/message/gaussian_splatting.html#3d-gaussian-splat-attributes"
  },"413": {
    "doc": "3D Gaussian Splat",
    "title": "3D Gaussian Splat",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/gaussian_splatting.html",
    "relUrl": "/content/schemas/message/gaussian_splatting.html"
  },"414": {
    "doc": "Geometry",
    "title": "Geometry",
    "content": "The primitive mesh geometry. ",
    "url": "https://docs.arenaxr.org/content/schemas/message/geometry.html#geometry",
    "relUrl": "/content/schemas/message/geometry.html#geometry"
  },"415": {
    "doc": "Geometry",
    "title": "Geometry Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | primitive | string; One of: ['box', 'capsule', 'circle', 'cone', 'cylinder', 'dodecahedron', 'icosahedron', 'octahedron', 'plane', 'ring', 'roundedbox', 'sphere', 'tetrahedron', 'torus', 'torusKnot', 'triangle'] | 'box' | The geometry primitive. | Yes | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/geometry.html#geometry-attributes",
    "relUrl": "/content/schemas/message/geometry.html#geometry-attributes"
  },"416": {
    "doc": "Geometry",
    "title": "Geometry",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/geometry.html",
    "relUrl": "/content/schemas/message/geometry.html"
  },"417": {
    "doc": "GLTF Files",
    "title": "GLTF Files",
    "content": "Here are some notes to help you convert GLTF models used in the ARENA. ",
    "url": "https://docs.arenaxr.org/content/3d-content/gltf-files.html",
    "relUrl": "/content/3d-content/gltf-files.html"
  },"418": {
    "doc": "GLTF Files",
    "title": "Sketchfab",
    "content": "Sketchfab GLTF models don’t always come in convenient single .glb files. Sometimes they consist of a main .gltf file that refers to several textures and other files in a textures/ folder and .glb file. And to make matters worse, the default name is scene.gltf. But if you put everything from the download into a folder of it’s own, you can keep it separate from other scene.gltf files, and they will find the right files through relative paths. For example . ls /var/www/html/models/nara scene.bin scene.gltf textures . ",
    "url": "https://docs.arenaxr.org/content/3d-content/gltf-files.html#sketchfab",
    "relUrl": "/content/3d-content/gltf-files.html#sketchfab"
  },"419": {
    "doc": "GLTF Files",
    "title": "SketchUp",
    "content": "Getting from SketchUp to GLTF is a bit of an adventure: . | The online converters don’t generate valid GLTFs. | The SketchUp GLTF export plugin was written for SketchUp 2016 and seems to hang SketchUp 2020 — these models were created in SketchUp 2017, so the 2016 version refuses to open them. | What worked was installing Adobe Dimension, opening the SketchUp file there, and exporting it. | . Dimension doesn’t seem to edit these models well, so if you want to patch up some textures, it’s recommended to do that in SketchUp first, then saving a copy, using Dimension to convert to GLTF. ",
    "url": "https://docs.arenaxr.org/content/3d-content/gltf-files.html#sketchup",
    "relUrl": "/content/3d-content/gltf-files.html#sketchup"
  },"420": {
    "doc": "GLTF Files",
    "title": "Adobe Dimension",
    "content": "For Adobe Dimension, the general conversion steps are: . | Open a new file in Dimension | Import the file | Double click the Google Earth terrain in the view | Select terrain in the scene hierarchy, delete it | Select the top level folder in the scene for the model | File&gt;Export the file to glb | . ",
    "url": "https://docs.arenaxr.org/content/3d-content/gltf-files.html#adobe-dimension",
    "relUrl": "/content/3d-content/gltf-files.html#adobe-dimension"
  },"421": {
    "doc": "GLTF Files",
    "title": "GLTF Viewer",
    "content": "Drag-and-drop preview tool for glTF 2.0 3D models: https://gltf-viewer.donmccurdy.com/. ",
    "url": "https://docs.arenaxr.org/content/3d-content/gltf-files.html#gltf-viewer",
    "relUrl": "/content/3d-content/gltf-files.html#gltf-viewer"
  },"422": {
    "doc": "GLTF Files",
    "title": "GLTF Attribution",
    "content": "ARENA automatically collects GLTF model metadata to be displayed in the scene credits, accessible from Settings-&gt;Scene Credits. Checkout the credits for a scene created with these Spinosaurus and Jurassic Park Gate models: . | | . Important . Please make sure your GLTF files contain metadata to credit authors as explained below. Attribution Metadata . The ARENA looks for authorship metadata in the format used by Sketchfab, and models downloaded from Sketchfab will have such metadata. For example: . \"asset\": { \"extras\": { \"author\": \"Vaptor-Studio (https://sketchfab.com/VapTor)\", \"license\": \"CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)\", \"source\": \"https://sketchfab.com/models/2135501583704537907645bf723685e7\", \"title\": \"Spinosaurus\" }, \"generator\": \"Sketchfab-5.74.0\", \"version\": \"2.0\" } . You can always use a text editor to open your GLTF file and search/add the above metadata. It must be inside the asset mandatory property. If creating models in Blender, you can add this metadata as Scene custom properties: . When exporting the GLTF model in Blender (File-&gt;Export), check ‘Custom Properties’ in the data to include in the export: . Metadata exported from blender will be included in the GLTF file in the scene.extras property. Don’t worry; ARENA will look for its existence and use it. ",
    "url": "https://docs.arenaxr.org/content/3d-content/gltf-files.html#gltf-attribution",
    "relUrl": "/content/3d-content/gltf-files.html#gltf-attribution"
  },"423": {
    "doc": "GLTF Files",
    "title": "GLTF Model LOD (Level of Detail)",
    "content": "Detailed GLTF models and textures can often have significant resource and visual load. For a given object, you can use a lower fidelity version or stand-in until a user is within a specified distance, at which point the gltf source is swapped out for a more detailed version. To use this feature, assign the gltf-model-lod component to your object, with the gltf-model component parameter set to the lower fidelity model URL. Set the detailedUrl parameter to that of the corresponding detailed model, and choose a desired detailedDistance to switch between the models. Note that the distance is from the center of the object, so larger models should account for the additional distance from the center to the edge of the model. ",
    "url": "https://docs.arenaxr.org/content/3d-content/gltf-files.html#gltf-model-lod-level-of-detail",
    "relUrl": "/content/3d-content/gltf-files.html#gltf-model-lod-level-of-detail"
  },"424": {
    "doc": "GLTF Files",
    "title": "Chronos GLTF sample models",
    "content": "The Chronos GLTF sample models are available on the ARENA main (andrew.andrew.cmu.edu) server, accessible from the store/models/&lt;model-filename.glb&gt; path: . | 2CylinderEngine.glb | Cameras.gltf | MultiUVTest.glb | TriangleWithoutIndices.gltf | hat2.glb |   | . | 2CylinderEngine.gltf | CesiumMan.glb | MultiUVTest.gltf | TwoSidedPlane.gltf | helios |   | . | AlphaBlendModeTest.glb | CesiumMan.gltf | NormalTangentMirrorTest.glb | UnlitTest.glb | hololens.glb |   | . | AlphaBlendModeTest.gltf | CesiumMilkTruck.glb | NormalTangentMirrorTest.gltf | UnlitTest.gltf | izzy |   | . | AnimatedCube.gltf | CesiumMilkTruck.gltf | NormalTangentTest.glb | VC.glb | marcus2.glb |   | . | AnimatedMorphCube.glb | Corset.glb | NormalTangentTest.gltf | VC.gltf | marcus3.glb |   | . | AnimatedMorphCube.gltf | Corset.gltf | OrientationTest.glb | VertexColorTest.glb | monkey |   | . | AnimatedMorphSphere.glb | Court.glb | OrientationTest.gltf | VertexColorTest.gltf | nara |   | . | AnimatedMorphSphere.gltf | Cube.gltf | Plane.mtl | WaterBottle.glb | nuno.glb |   | . | AnimatedTriangle.gltf | Cube.mtl | Plane.obj | WaterBottle.gltf | palm |   | . | AntiqueCamera.glb | Cube.obj | ReciprocatingSaw.glb | anthony.glb | peacock |   | . | AntiqueCamera.gltf | DamagedHelmet.glb | ReciprocatingSaw.gltf | avocadoman | rearbody.mtl |   | . | Avocado.glb | DamagedHelmet.gltf | RiggedFigure.glb | baby_yoda | rearbody.obj |   | . | Avocado.gltf | Drone.glb | RiggedFigure.gltf | body.mtl | rhetoritician |   | . | BarramundiFish.glb | Duck.glb | RiggedSimple.glb | body.obj | scene.bin |   | . | BarramundiFish.gltf | Duck.gltf | RiggedSimple.gltf | cat | skull |   | . | BoomBox.glb | Earth.glb | Scene.bin | chicken | sphere_clicktest.gltf |   | . | BoomBox.gltf | EnvironmentTest.gltf | SciFiHelmet.gltf | chickenmove | tail.mtl |   | . | BoomBoxWithAxes.gltf | Flags.glb | Shuttle.glb | cow | tail.obj |   | . | Box.glb | FlightHelmet.gltf | SimpleMeshes.gltf | cow2 | throne |   | . | Box.gltf | GearboxAssy.glb | SimpleMorph.gltf | crown | tiles.mtl |   | . | BoxAnimated.glb | GearboxAssy.gltf | SimpleSparseAccessor.gltf | cybertruck | tiles.obj |   | . | BoxAnimated.gltf | Head.gltf | SmilingFace.glb | drone-small.glb | toni.glb |   | . | BoxInterleaved.glb | Head2.glb | Snoop.glb | drone.gltf | tri_prism.glb |   | . | BoxInterleaved.gltf | InterpolationTest.glb | SpecGlossVsMetalRough.glb | enginside.mtl | valve_index_left.gltf |   | . | BoxTextured.glb | InterpolationTest.gltf | SpecGlossVsMetalRough.gltf | enginside.obj | valve_index_right.gltf |   | . | BoxTextured.gltf | Lantern.glb | Sponza.gltf | engmount.mtl | vr_controller_vive.mtl |   | . | BoxTexturedNonPowerOfTwo.glb | Lantern.gltf | Stringlights.glb | engmount.obj | vr_controller_vive.obj |   | . | BoxTexturedNonPowerOfTwo.gltf | MetalRoughSpheres.glb | Suzanne.gltf | engout.mtl | windows.mtl |   | . | BoxVertexColors.glb | MetalRoughSpheres.gltf | TextureCoordinateTest.glb | engout.obj | windows.obj |   | . | BoxVertexColors.gltf | Monster.glb | TextureCoordinateTest.gltf | engrim.mtl | wings.mtl |   | . | BrainStem.glb | Monster.gltf | TextureSettingsTest.glb | engrim.obj | wings.obj |   | . | BrainStem.gltf | Moon.glb | TextureSettingsTest.gltf | er1k.glb |   |   | . | Buggy.glb | MorphPrimitivesTest.glb | TextureTransformTest.gltf | frog |   |   | . | Buggy.gltf | MorphPrimitivesTest.gltf | Triangle.gltf | goose |   |   | . ",
    "url": "https://docs.arenaxr.org/content/3d-content/gltf-files.html#chronos-gltf-sample-models",
    "relUrl": "/content/3d-content/gltf-files.html#chronos-gltf-sample-models"
  },"425": {
    "doc": "GLTF Model Level of Detail",
    "title": "GLTF Model Level of Detail",
    "content": "Simple switch between the default gltf-model and a detailed one when a user camera is within specified distance . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/gltf-model-lod.html#gltf-model-level-of-detail",
    "relUrl": "/content/schemas/message/gltf-model-lod.html#gltf-model-level-of-detail"
  },"426": {
    "doc": "GLTF Model Level of Detail",
    "title": "GLTF Model Level of Detail Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | detailedUrl | string | '' | Alternative ‘detailed’ gltf model to load by URL. | Yes | . | detailedDistance | number | 10 | At what distance to switch between the models. | Yes | . | updateRate | number | 333 | How often user camera is checked for LOD (default 333ms). | Yes | . | retainCache | boolean | False | Whether to skip freeing the detailed model from browser cache (default false). | Yes | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/gltf-model-lod.html#gltf-model-level-of-detail-attributes",
    "relUrl": "/content/schemas/message/gltf-model-lod.html#gltf-model-level-of-detail-attributes"
  },"427": {
    "doc": "GLTF Model Level of Detail",
    "title": "GLTF Model Level of Detail",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/gltf-model-lod.html",
    "relUrl": "/content/schemas/message/gltf-model-lod.html"
  },"428": {
    "doc": "GLTF Model",
    "title": "GLTF Model",
    "content": "Load a GLTF model. Besides applying standard rotation and position attributes to the center-point of the GLTF model, the individual child components can also be manually manipulated. See format details in the modelUpdate data attribute. See guidance to store paths under ARENA File Store, CDN, or DropBox. All wire objects have a set of basic attributes {object_id, action, type, persist, data}. The data attribute defines the object-specific attributes . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/gltf-model.html#gltf-model",
    "relUrl": "/content/schemas/message/gltf-model.html#gltf-model"
  },"429": {
    "doc": "GLTF Model",
    "title": "GLTF Model Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | object_id | string |   | A uuid or otherwise unique identifier for this object. | Yes | . | persist | boolean | True | Persist this object in the database. | Yes | . | type | string; Must be: object | 'object' | AFrame 3D Object | Yes | . | action | string; One of: ['create', 'delete', 'update'] | 'create' | Message action create, update, delete. | Yes | . | ttl | integer |   | When applied to an entity, the entity will remove itself from DOM after the specified number of seconds. Update is allowed, which will reset the timer to start from that moment. | No | . | data | GLTF Model data |   | GLTF Model Data | Yes | . GLTF Model Data Attributes . | Attribute | Type | Default | Description | Required | . | object_type | string; Must be: gltf-model | gltf-model | 3D object type. | Yes | . | url | string |   | Use File Store paths under ‘store/users/username’, see CDN and other storage options in the description above. | Yes | . | parent | string |   | Parent’s object_id. Child objects inherit attributes of their parent, for example scale and translation. | No | . | position | position |   | 3D object position. | Yes | . | rotation | rotation |   | 3D object rotation in quaternion representation; Right-handed coordinate system. Euler degrees are deprecated in wire message format. | Yes | . | scale | scale |   | 3D object scale. | Yes | . | animation | animation |   | Animate and tween values. | No | . | armarker | armarker |   | A location marker (such as an AprilTag, a lightAnchor, or an UWB tag), used to anchor scenes, or scene objects, in the real world. | No | . | click-listener | click-listener |   | Object will listen for mouse events like clicks. | No | . | box-collision-listener | box-collision-listener |   | Listen for bounding-box collisions with user camera and hands. Must be applied to an object or model with geometric mesh. Collisions are determined by course bounding-box overlaps. | No | . | collision-listener | string |   | Name of the collision-listener, default can be empty string. Collisions trigger click events. | No | . | blip | blip |   | When the object is created or deleted, it will animate in/out of the scene instead of appearing/disappearing instantly. Must have a geometric mesh. | No | . | static-body | static-body |   | A fixed-position or animated object. Other objects may collide with static bodies, but static bodies themselves are unaffected by gravity and collisions. | No | . | dynamic-body | dynamic-body |   | A freely-moving object. Dynamic bodies have mass, collide with other objects, bounce or slow during collisions, and fall if gravity is enabled. | No | . | goto-landmark | goto-landmark |   | Teleports user to the landmark with the given name. Requires click-listener. | No | . | goto-url | goto-url |   | Load new URL when object is clicked. Requires click-listener. | No | . | hide-on-enter-ar | boolean; Must be: True | True | Hide object when entering AR. Remove component to not hide. | No | . | hide-on-enter-vr | boolean; Must be: True | True | Hide object when entering VR. Remove component to not hide. | No | . | show-on-enter-ar | boolean; Must be: True | True | Show object when entering AR. Hidden otherwise. | No | . | show-on-enter-vr | boolean; Must be: True | True | Show object when entering VR. Hidden otherwise. | No | . | impulse | impulse |   | Apply an impulse to an object to set it in motion. This happens in conjunction with an event. Requires click-listener and physics. | No | . | landmark | landmark |   | Define entities as a landmark; Landmarks appears in the landmark list and you can move (teleport) to them; You can define the behavior of the teleport: if you will be at a fixed or random distance, looking at the landmark, fixed offset or if it is constrained by a navmesh (when it exists). | No | . | material-extras | material-extras |   | Define extra material properties, namely texture encoding, whether to render the material’s color and render order. | No | . | shadow | shadow |   | The shadow component enables shadows for an entity and its children. Adding the shadow component alone is not enough to display shadows in your scene. We must have at least one light with castShadow: true enabled. | No | . | sound | sound |   | The sound component defines the entity as a source of sound or audio. The sound component can be positional and is thus affected by the component’s position. | No | . | textinput | textinput |   | Opens an HTML prompt when clicked. Sends text input as an event on MQTT. Requires click-listener. | No | . | remote-render | remote-render |   | Whether or not an object should be remote rendered [Experimental]. | No | . | video-control | video-control |   | Adds a video to an entity and controls its playback. | No | . | attribution | attribution |   | Attribution Component. Saves attribution data in any entity. | No | . | spe-particles | spe-particles |   | GPU based particle systems in A-Frame. | No | . | look-at | string |   | The look-at component defines the behavior for an entity to dynamically rotate or face towards another entity or position. Use ‘#my-camera’ to face the user camera, otherwise can take either a vec3 position or a query selector to another entity. | No | . | animation-mixer | animation-mixer |   | A list of available animations can usually be found by inspecting the model file or its documentation. All animations will play by default. To play only a specific set of animations, use wildcards: animation-mixer=’clip: run_*’. | No | . | gltf-morph | gltf-morph |   | Allows you to target and control a gltf model’s morphTargets created in Blender. | No | . | gltf-model-lod | gltf-model-lod |   | Simple switch between the default gltf-model and a detailed one when a user camera is within specified distance | No | . | modelUpdate | modelUpdate |   | The GLTF-specific modelUpdate attribute is an object with child component names as keys. The top-level keys are the names of the child components to be updated. The values of each are nested position and rotation attributes to set as new values, respectively. Either position or rotation can be omitted if unchanged. | No | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/gltf-model.html#gltf-model-attributes",
    "relUrl": "/content/schemas/message/gltf-model.html#gltf-model-attributes"
  },"430": {
    "doc": "GLTF Model",
    "title": "GLTF Model",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/gltf-model.html",
    "relUrl": "/content/schemas/message/gltf-model.html"
  },"431": {
    "doc": "GLTF Morph",
    "title": "GLTF Morph",
    "content": "Allows you to target and control a gltf model’s morphTargets created in Blender. More properties at A-Frame GLTF Morph component. ",
    "url": "https://docs.arenaxr.org/content/schemas/message/gltf-morph.html#gltf-morph",
    "relUrl": "/content/schemas/message/gltf-morph.html#gltf-morph"
  },"432": {
    "doc": "GLTF Morph",
    "title": "GLTF Morph Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | morphtarget | string | '' | Name of morphTarget, can be found as part of the GLTF model. | Yes | . | value | number | 0 | Value that you want to set that morphTarget to (0 - 1). | Yes | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/gltf-morph.html#gltf-morph-attributes",
    "relUrl": "/content/schemas/message/gltf-morph.html#gltf-morph-attributes"
  },"433": {
    "doc": "GLTF Morph",
    "title": "GLTF Morph",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/gltf-morph.html",
    "relUrl": "/content/schemas/message/gltf-morph.html"
  },"434": {
    "doc": "arena.objects.gltf_model",
    "title": "\narena.objects.gltf_model    ",
    "content": "class GltfModel(arena.objects.arena_object.Object): GltfModel object class to manage its properties in the ARENA: Load a GLTF model. Besides applying standard rotation and position attributes to the center-point of the GLTF model, the individual child components can also be manually manipulated. See format details in the modelUpdate data attribute. See guidance to store paths under https://docs.arenaxr.org/content/interface/filestore.html ARENA File Store, CDN, or DropBox. Parameters . | str url: Use File Store paths under 'store/users/username', see CDN and other storage options in the description above. (optional) | . GltfModel(url=&#39;&#39;, **kwargs) object_type = &#39;gltf-model&#39; morphs def update_morph(self, morph): def remove_morph(self, morph): def clear_morphs(self): def json_preprocess(self, **kwargs): def json_postprocess(self, json_payload, json_data): Inherited Members . arena.objects.arena_object.Object type all_objects evt_handler update_handler animations delayed_prop_tasks update_attributes dispatch_animation remove_animation_at_index clear_animations clickable json get add remove exists arena.base_object.BaseObject json_encode class GLTF(GltfModel): Another name for GltfModel. Inherited Members . GltfModel GltfModel object_type morphs update_morph remove_morph clear_morphs json_preprocess json_postprocess arena.objects.arena_object.Object type all_objects evt_handler update_handler animations delayed_prop_tasks update_attributes dispatch_animation remove_animation_at_index clear_animations clickable json get add remove exists arena.base_object.BaseObject json_encode class Model(GltfModel): Another name for GltfModel. Inherited Members . GltfModel GltfModel object_type morphs update_morph remove_morph clear_morphs json_preprocess json_postprocess arena.objects.arena_object.Object type all_objects evt_handler update_handler animations delayed_prop_tasks update_attributes dispatch_animation remove_animation_at_index clear_animations clickable json get add remove exists arena.base_object.BaseObject json_encode ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/gltf_model.html",
    "relUrl": "/content/python-api/objects/gltf_model.html"
  },"435": {
    "doc": "arena.objects.gltf_model",
    "title": "arena.objects.gltf_model",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/gltf_model.html",
    "relUrl": "/content/python-api/objects/gltf_model.html"
  },"436": {
    "doc": "arena.attributes.gltf_model_lod",
    "title": "\narena.attributes.gltf_model_lod    ",
    "content": "class GltfModelLod(arena.attributes.attribute.Attribute): GltfModelLod attribute class to manage its properties in the ARENA: Simple switch between the default gltf-model and a detailed one when a user camera is within specified distance Usage: gltf_model_lod=GltfModelLod(...) . Parameters . | float detailedDistance: At what distance to switch between the models. Defaults to '10' (optional) | str detailedUrl: Alternative 'detailed' gltf model to load by URL. (optional) | bool retainCache: Whether to skip freeing the detailed model from browser cache (default false). (optional) | float updateRate: How often user camera is checked for LOD (default 333ms). Defaults to '333' (optional) | . GltfModelLod(**kwargs) Inherited Members . arena.base_object.BaseObject add json_encode json ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/gltf_model_lod.html",
    "relUrl": "/content/python-api/attributes/gltf_model_lod.html"
  },"437": {
    "doc": "arena.attributes.gltf_model_lod",
    "title": "arena.attributes.gltf_model_lod",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/gltf_model_lod.html",
    "relUrl": "/content/python-api/attributes/gltf_model_lod.html"
  },"438": {
    "doc": "arena.attributes.gltf_morph",
    "title": "\narena.attributes.gltf_morph    ",
    "content": "class GltfMorph(arena.attributes.attribute.Attribute): GltfMorph attribute class to manage its properties in the ARENA: Allows you to target and control a gltf model's morphTargets created in Blender. More properties at https://github.com/elbobo/aframe-gltf-morph-component A-Frame GLTF Morph component. Usage: gltf_morph=GltfMorph(...) . Parameters . | str morphtarget: Name of morphTarget, can be found as part of the GLTF model. (optional) | float value: Value that you want to set that morphTarget to (0 - 1). (optional) | . GltfMorph(morphtarget, value) morphtarget value Inherited Members . arena.base_object.BaseObject add json_encode json class Morph(GltfMorph): Alternate name for GltfMorph. Usage: gltf_morph=Morph(...) . Inherited Members . GltfMorph GltfMorph morphtarget value arena.base_object.BaseObject add json_encode json ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/gltf_morph.html",
    "relUrl": "/content/python-api/attributes/gltf_morph.html"
  },"439": {
    "doc": "arena.attributes.gltf_morph",
    "title": "arena.attributes.gltf_morph",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/gltf_morph.html",
    "relUrl": "/content/python-api/attributes/gltf_morph.html"
  },"440": {
    "doc": "Goto Landmark",
    "title": "Goto Landmark",
    "content": "Teleports user to the landmark with the given name. Requires click-listener. ",
    "url": "https://docs.arenaxr.org/content/schemas/message/goto-landmark.html#goto-landmark",
    "relUrl": "/content/schemas/message/goto-landmark.html#goto-landmark"
  },"441": {
    "doc": "Goto Landmark",
    "title": "Goto Landmark Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | on | string; One of: ['mousedown', 'mouseup'] | 'mousedown' | Event to listen ‘on’. | Yes | . | landmark | string | '' | Id of landmark to teleport to. | Yes | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/goto-landmark.html#goto-landmark-attributes",
    "relUrl": "/content/schemas/message/goto-landmark.html#goto-landmark-attributes"
  },"442": {
    "doc": "Goto Landmark",
    "title": "Goto Landmark",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/goto-landmark.html",
    "relUrl": "/content/schemas/message/goto-landmark.html"
  },"443": {
    "doc": "Goto URL",
    "title": "Goto URL",
    "content": "Load new URL when object is clicked. Requires click-listener. ",
    "url": "https://docs.arenaxr.org/content/schemas/message/goto-url.html#goto-url",
    "relUrl": "/content/schemas/message/goto-url.html#goto-url"
  },"444": {
    "doc": "Goto URL",
    "title": "Goto URL Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | dest | string; One of: ['popup', 'newtab', 'sametab'] | 'sametab' | Where to open the URL. | Yes | . | on | string; One of: ['mousedown', 'mouseup'] | 'mousedown' | A case-sensitive string representing the event type to listen for. See Web Events. | Yes | . | url | string | '' | The destination url, e.g. https://example.com. | Yes | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/goto-url.html#goto-url-attributes",
    "relUrl": "/content/schemas/message/goto-url.html#goto-url-attributes"
  },"445": {
    "doc": "Goto URL",
    "title": "Goto URL",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/goto-url.html",
    "relUrl": "/content/schemas/message/goto-url.html"
  },"446": {
    "doc": "arena.attributes.goto_landmark",
    "title": "\narena.attributes.goto_landmark    ",
    "content": "class GotoLandmark(arena.attributes.attribute.Attribute): GotoLandmark attribute class to manage its properties in the ARENA: Teleports user to the landmark with the given name. Requires click-listener. Usage: goto_landmark=GotoLandmark(...) . Parameters . | str landmark: Id of landmark to teleport to. (optional) | str on: Event to listen 'on'. Allows [mousedown, mouseup] Defaults to 'mousedown' (optional) | . GotoLandmark(**kwargs) Inherited Members . arena.base_object.BaseObject add json_encode json ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/goto_landmark.html",
    "relUrl": "/content/python-api/attributes/goto_landmark.html"
  },"447": {
    "doc": "arena.attributes.goto_landmark",
    "title": "arena.attributes.goto_landmark",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/goto_landmark.html",
    "relUrl": "/content/python-api/attributes/goto_landmark.html"
  },"448": {
    "doc": "arena.attributes.goto_url",
    "title": "\narena.attributes.goto_url    ",
    "content": "class GotoUrl(arena.attributes.attribute.Attribute): GotoUrl attribute class to manage its properties in the ARENA: Load new URL when object is clicked. Requires click-listener. Usage: goto_url=GotoUrl(...) . Parameters . | str dest: Where to open the URL. Allows [popup, newtab, sametab] Defaults to 'sametab' (optional) | str on: A case-sensitive string representing the event type to listen for. See &lt;https: //developer.mozilla.org/en-US/docs/Web/Events&gt; Web Events. Allows [mousedown, mouseup] Defaults to 'mousedown' (optional) | str url: The destination url, e.g. https: //example.com. (optional) | . GotoUrl(url, dest=&#39;static&#39;, on=&#39;mousedown&#39;, **kwargs) Inherited Members . arena.base_object.BaseObject add json_encode json ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/goto_url.html",
    "relUrl": "/content/python-api/attributes/goto_url.html"
  },"449": {
    "doc": "arena.attributes.goto_url",
    "title": "arena.attributes.goto_url",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/goto_url.html",
    "relUrl": "/content/python-api/attributes/goto_url.html"
  },"450": {
    "doc": "Hand",
    "title": "Hand",
    "content": "Hand is the (left or right) hand metadata pose and controller type of the user avatar. All wire objects have a set of basic attributes {object_id, action, type, persist, data}. The data attribute defines the object-specific attributes . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/hand.html#hand",
    "relUrl": "/content/schemas/message/hand.html#hand"
  },"451": {
    "doc": "Hand",
    "title": "Hand Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | object_id | string |   | A uuid or otherwise unique identifier for this object. | Yes | . | persist | boolean | True | Persist this object in the database. | Yes | . | type | string; Must be: object | 'object' | AFrame 3D Object | Yes | . | action | string; One of: ['create', 'delete', 'update'] | 'create' | Message action create, update, delete. | Yes | . | ttl | integer |   | When applied to an entity, the entity will remove itself from DOM after the specified number of seconds. Update is allowed, which will reset the timer to start from that moment. | No | . | data | Hand data |   | Hand Data | Yes | . Hand Data Attributes . | Attribute | Type | Default | Description | Required | . | object_type | string; One of: ['handLeft', 'handRight'] | handLeft | 3D object type. | Yes | . | url | string | 'static/models/hands/valve_index_left.gltf' | Path to user avatar hand model. | Yes | . | dep | string | '' | Camera object_id this hand belongs to. | Yes | . | parent | string |   | Parent’s object_id. Child objects inherit attributes of their parent, for example scale and translation. | No | . | position | position |   | 3D object position. | Yes | . | rotation | rotation |   | 3D object rotation in quaternion representation; Right-handed coordinate system. Euler degrees are deprecated in wire message format. | Yes | . | scale | scale |   | 3D object scale. | No | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/hand.html#hand-attributes",
    "relUrl": "/content/schemas/message/hand.html#hand-attributes"
  },"452": {
    "doc": "Hand",
    "title": "Hand",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/hand.html",
    "relUrl": "/content/schemas/message/hand.html"
  },"453": {
    "doc": "arena.objects.hand_left",
    "title": "\narena.objects.hand_left    ",
    "content": "class HandLeft(arena.objects.arena_object.Object): HandLeft object class to manage its properties in the ARENA: Hand is the (left or right) hand metadata pose and controller type of the user avatar. Parameters . | str dep: Camera object_id this hand belongs to. (optional) | str url: Path to user avatar hand model. Defaults to 'static/models/hands/valve_index_left.gltf' (optional) | . HandLeft(**kwargs) object_type = &#39;handLeft&#39; camera Inherited Members . arena.objects.arena_object.Object type all_objects evt_handler update_handler animations delayed_prop_tasks update_attributes dispatch_animation remove_animation_at_index clear_animations clickable json_preprocess json_postprocess json get add remove exists arena.base_object.BaseObject json_encode ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/hand_left.html",
    "relUrl": "/content/python-api/objects/hand_left.html"
  },"454": {
    "doc": "arena.objects.hand_left",
    "title": "arena.objects.hand_left",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/hand_left.html",
    "relUrl": "/content/python-api/objects/hand_left.html"
  },"455": {
    "doc": "arena.objects.hand_right",
    "title": "\narena.objects.hand_right    ",
    "content": "class HandRight(arena.objects.arena_object.Object): HandRight object class to manage its properties in the ARENA: Hand is the (left or right) hand metadata pose and controller type of the user avatar. Parameters . | str dep: Camera object_id this hand belongs to. (optional) | str url: Path to user avatar hand model. Defaults to 'static/models/hands/valve_index_left.gltf' (optional) | . HandRight(**kwargs) object_type = &#39;handRight&#39; camera Inherited Members . arena.objects.arena_object.Object type all_objects evt_handler update_handler animations delayed_prop_tasks update_attributes dispatch_animation remove_animation_at_index clear_animations clickable json_preprocess json_postprocess json get add remove exists arena.base_object.BaseObject json_encode ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/hand_right.html",
    "relUrl": "/content/python-api/objects/hand_right.html"
  },"456": {
    "doc": "arena.objects.hand_right",
    "title": "arena.objects.hand_right",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/hand_right.html",
    "relUrl": "/content/python-api/objects/hand_right.html"
  },"457": {
    "doc": "Icosahedron",
    "title": "Icosahedron",
    "content": "Icosahedron Geometry. All wire objects have a set of basic attributes {object_id, action, type, persist, data}. The data attribute defines the object-specific attributes . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/icosahedron.html#icosahedron",
    "relUrl": "/content/schemas/message/icosahedron.html#icosahedron"
  },"458": {
    "doc": "Icosahedron",
    "title": "Icosahedron Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | object_id | string |   | A uuid or otherwise unique identifier for this object. | Yes | . | persist | boolean | True | Persist this object in the database. | Yes | . | type | string; Must be: object | 'object' | AFrame 3D Object | Yes | . | action | string; One of: ['create', 'delete', 'update'] | 'create' | Message action create, update, delete. | Yes | . | ttl | integer |   | When applied to an entity, the entity will remove itself from DOM after the specified number of seconds. Update is allowed, which will reset the timer to start from that moment. | No | . | data | Icosahedron data |   | Icosahedron Data | Yes | . Icosahedron Data Attributes . | Attribute | Type | Default | Description | Required | . | object_type | string; Must be: icosahedron | icosahedron | 3D object type. | Yes | . | detail | integer | 0 | detail | No | . | radius | number | 1 | radius | Yes | . | parent | string |   | Parent’s object_id. Child objects inherit attributes of their parent, for example scale and translation. | No | . | position | position |   | 3D object position. | Yes | . | rotation | rotation |   | 3D object rotation in quaternion representation; Right-handed coordinate system. Euler degrees are deprecated in wire message format. | Yes | . | scale | scale |   | 3D object scale. | No | . | animation | animation |   | Animate and tween values. | No | . | armarker | armarker |   | A location marker (such as an AprilTag, a lightAnchor, or an UWB tag), used to anchor scenes, or scene objects, in the real world. | No | . | click-listener | click-listener |   | Object will listen for mouse events like clicks. | No | . | box-collision-listener | box-collision-listener |   | Listen for bounding-box collisions with user camera and hands. Must be applied to an object or model with geometric mesh. Collisions are determined by course bounding-box overlaps. | No | . | collision-listener | string |   | Name of the collision-listener, default can be empty string. Collisions trigger click events. | No | . | blip | blip |   | When the object is created or deleted, it will animate in/out of the scene instead of appearing/disappearing instantly. Must have a geometric mesh. | No | . | static-body | static-body |   | A fixed-position or animated object. Other objects may collide with static bodies, but static bodies themselves are unaffected by gravity and collisions. | No | . | dynamic-body | dynamic-body |   | A freely-moving object. Dynamic bodies have mass, collide with other objects, bounce or slow during collisions, and fall if gravity is enabled. | No | . | goto-landmark | goto-landmark |   | Teleports user to the landmark with the given name. Requires click-listener. | No | . | goto-url | goto-url |   | Load new URL when object is clicked. Requires click-listener. | No | . | hide-on-enter-ar | boolean; Must be: True | True | Hide object when entering AR. Remove component to not hide. | No | . | hide-on-enter-vr | boolean; Must be: True | True | Hide object when entering VR. Remove component to not hide. | No | . | show-on-enter-ar | boolean; Must be: True | True | Show object when entering AR. Hidden otherwise. | No | . | show-on-enter-vr | boolean; Must be: True | True | Show object when entering VR. Hidden otherwise. | No | . | impulse | impulse |   | Apply an impulse to an object to set it in motion. This happens in conjunction with an event. Requires click-listener and physics. | No | . | landmark | landmark |   | Define entities as a landmark; Landmarks appears in the landmark list and you can move (teleport) to them; You can define the behavior of the teleport: if you will be at a fixed or random distance, looking at the landmark, fixed offset or if it is constrained by a navmesh (when it exists). | No | . | material-extras | material-extras |   | Define extra material properties, namely texture encoding, whether to render the material’s color and render order. | No | . | shadow | shadow |   | The shadow component enables shadows for an entity and its children. Adding the shadow component alone is not enough to display shadows in your scene. We must have at least one light with castShadow: true enabled. | No | . | sound | sound |   | The sound component defines the entity as a source of sound or audio. The sound component can be positional and is thus affected by the component’s position. | No | . | textinput | textinput |   | Opens an HTML prompt when clicked. Sends text input as an event on MQTT. Requires click-listener. | No | . | url | string |   | Use File Store paths under ‘store/users/username’, see CDN and other storage options in the description above. | No | . | remote-render | remote-render |   | Whether or not an object should be remote rendered [Experimental]. | No | . | video-control | video-control |   | Adds a video to an entity and controls its playback. | No | . | attribution | attribution |   | Attribution Component. Saves attribution data in any entity. | No | . | spe-particles | spe-particles |   | GPU based particle systems in A-Frame. | No | . | look-at | string |   | The look-at component defines the behavior for an entity to dynamically rotate or face towards another entity or position. Use ‘#my-camera’ to face the user camera, otherwise can take either a vec3 position or a query selector to another entity. | No | . | buffer | boolean | True | Transform geometry into a BufferGeometry to reduce memory usage at the cost of being harder to manipulate (geometries only: box, circle, cone, …). | No | . | jitsi-video | jitsi-video |   | Apply a jitsi video source to the geometry. | No | . | material | material | {'color': '#7f7f7f'} | The material properties of the object’s surface. | No | . | multisrc | multisrc |   | Define multiple visual sources applied to an object. | No | . | screenshareable | boolean | True | Whether or not a user can screenshare on an object. | No | . | skipCache | boolean | False | Disable retrieving the shared geometry object from the cache. (geometries only: box, circle, cone, …). | No | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/icosahedron.html#icosahedron-attributes",
    "relUrl": "/content/schemas/message/icosahedron.html#icosahedron-attributes"
  },"459": {
    "doc": "Icosahedron",
    "title": "Icosahedron",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/icosahedron.html",
    "relUrl": "/content/schemas/message/icosahedron.html"
  },"460": {
    "doc": "arena.objects.icosahedron",
    "title": "\narena.objects.icosahedron    ",
    "content": "class Icosahedron(arena.objects.arena_object.Object): Icosahedron object class to manage its properties in the ARENA: Icosahedron Geometry. Parameters . | int detail: detail (optional) | float radius: radius Defaults to '1' (optional) | . Icosahedron(**kwargs) object_type = &#39;icosahedron&#39; Inherited Members . arena.objects.arena_object.Object type all_objects evt_handler update_handler animations delayed_prop_tasks update_attributes dispatch_animation remove_animation_at_index clear_animations clickable json_preprocess json_postprocess json get add remove exists arena.base_object.BaseObject json_encode ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/icosahedron.html",
    "relUrl": "/content/python-api/objects/icosahedron.html"
  },"461": {
    "doc": "arena.objects.icosahedron",
    "title": "arena.objects.icosahedron",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/icosahedron.html",
    "relUrl": "/content/python-api/objects/icosahedron.html"
  },"462": {
    "doc": "Image",
    "title": "Image",
    "content": "Display an image on a plane. See guidance to store paths under ARENA File Store, CDN, or DropBox. All wire objects have a set of basic attributes {object_id, action, type, persist, data}. The data attribute defines the object-specific attributes . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/image.html#image",
    "relUrl": "/content/schemas/message/image.html#image"
  },"463": {
    "doc": "Image",
    "title": "Image Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | object_id | string |   | A uuid or otherwise unique identifier for this object. | Yes | . | persist | boolean | True | Persist this object in the database. | Yes | . | type | string; Must be: object | 'object' | AFrame 3D Object | Yes | . | action | string; One of: ['create', 'delete', 'update'] | 'create' | Message action create, update, delete. | Yes | . | ttl | integer |   | When applied to an entity, the entity will remove itself from DOM after the specified number of seconds. Update is allowed, which will reset the timer to start from that moment. | No | . | data | Image data |   | Image Data | Yes | . Image Data Attributes . | Attribute | Type | Default | Description | Required | . | object_type | string; Must be: image | image | 3D object type. | Yes | . | url | string |   | Use File Store paths under ‘store/users/username’, see CDN and other storage options in the description above. | Yes | . | height | number | 1 | height | Yes | . | segmentsHeight | integer | 1 | segments height | No | . | segmentsWidth | integer | 1 | segments width | No | . | width | number | 1 | width | Yes | . | parent | string |   | Parent’s object_id. Child objects inherit attributes of their parent, for example scale and translation. | No | . | position | position |   | 3D object position. | Yes | . | rotation | rotation |   | 3D object rotation in quaternion representation; Right-handed coordinate system. Euler degrees are deprecated in wire message format. | Yes | . | scale | scale |   | 3D object scale. | No | . | animation | animation |   | Animate and tween values. | No | . | armarker | armarker |   | A location marker (such as an AprilTag, a lightAnchor, or an UWB tag), used to anchor scenes, or scene objects, in the real world. | No | . | click-listener | click-listener |   | Object will listen for mouse events like clicks. | No | . | box-collision-listener | box-collision-listener |   | Listen for bounding-box collisions with user camera and hands. Must be applied to an object or model with geometric mesh. Collisions are determined by course bounding-box overlaps. | No | . | collision-listener | string |   | Name of the collision-listener, default can be empty string. Collisions trigger click events. | No | . | blip | blip |   | When the object is created or deleted, it will animate in/out of the scene instead of appearing/disappearing instantly. Must have a geometric mesh. | No | . | static-body | static-body |   | A fixed-position or animated object. Other objects may collide with static bodies, but static bodies themselves are unaffected by gravity and collisions. | No | . | dynamic-body | dynamic-body |   | A freely-moving object. Dynamic bodies have mass, collide with other objects, bounce or slow during collisions, and fall if gravity is enabled. | No | . | goto-landmark | goto-landmark |   | Teleports user to the landmark with the given name. Requires click-listener. | No | . | goto-url | goto-url |   | Load new URL when object is clicked. Requires click-listener. | No | . | hide-on-enter-ar | boolean; Must be: True | True | Hide object when entering AR. Remove component to not hide. | No | . | hide-on-enter-vr | boolean; Must be: True | True | Hide object when entering VR. Remove component to not hide. | No | . | show-on-enter-ar | boolean; Must be: True | True | Show object when entering AR. Hidden otherwise. | No | . | show-on-enter-vr | boolean; Must be: True | True | Show object when entering VR. Hidden otherwise. | No | . | impulse | impulse |   | Apply an impulse to an object to set it in motion. This happens in conjunction with an event. Requires click-listener and physics. | No | . | landmark | landmark |   | Define entities as a landmark; Landmarks appears in the landmark list and you can move (teleport) to them; You can define the behavior of the teleport: if you will be at a fixed or random distance, looking at the landmark, fixed offset or if it is constrained by a navmesh (when it exists). | No | . | material-extras | material-extras |   | Define extra material properties, namely texture encoding, whether to render the material’s color and render order. | No | . | shadow | shadow |   | The shadow component enables shadows for an entity and its children. Adding the shadow component alone is not enough to display shadows in your scene. We must have at least one light with castShadow: true enabled. | No | . | sound | sound |   | The sound component defines the entity as a source of sound or audio. The sound component can be positional and is thus affected by the component’s position. | No | . | textinput | textinput |   | Opens an HTML prompt when clicked. Sends text input as an event on MQTT. Requires click-listener. | No | . | remote-render | remote-render |   | Whether or not an object should be remote rendered [Experimental]. | No | . | video-control | video-control |   | Adds a video to an entity and controls its playback. | No | . | attribution | attribution |   | Attribution Component. Saves attribution data in any entity. | No | . | spe-particles | spe-particles |   | GPU based particle systems in A-Frame. | No | . | look-at | string |   | The look-at component defines the behavior for an entity to dynamically rotate or face towards another entity or position. Use ‘#my-camera’ to face the user camera, otherwise can take either a vec3 position or a query selector to another entity. | No | . | buffer | boolean | True | Transform geometry into a BufferGeometry to reduce memory usage at the cost of being harder to manipulate (geometries only: box, circle, cone, …). | No | . | jitsi-video | jitsi-video |   | Apply a jitsi video source to the geometry. | No | . | material | material |   | The material properties of the object’s surface. | No | . | multisrc | multisrc |   | Define multiple visual sources applied to an object. | No | . | screenshareable | boolean | True | Whether or not a user can screenshare on an object. | No | . | skipCache | boolean | False | Disable retrieving the shared geometry object from the cache. (geometries only: box, circle, cone, …). | No | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/image.html#image-attributes",
    "relUrl": "/content/schemas/message/image.html#image-attributes"
  },"464": {
    "doc": "Image",
    "title": "Image",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/image.html",
    "relUrl": "/content/schemas/message/image.html"
  },"465": {
    "doc": "arena.objects.image",
    "title": "\narena.objects.image    ",
    "content": "class Image(arena.objects.arena_object.Object): Image object class to manage its properties in the ARENA: Display an image on a plane. See guidance to store paths under https://docs.arenaxr.org/content/interface/filestore.html ARENA File Store, CDN, or DropBox. Parameters . | float height: height Defaults to '1' (optional) | int segmentsHeight: segments height Defaults to '1' (optional) | int segmentsWidth: segments width Defaults to '1' (optional) | str url: Use File Store paths under 'store/users/username', see CDN and other storage options in the description above. (optional) | float width: width Defaults to '1' (optional) | . Image(url=&#39;&#39;, **kwargs) object_type = &#39;image&#39; Inherited Members . arena.objects.arena_object.Object type all_objects evt_handler update_handler animations delayed_prop_tasks update_attributes dispatch_animation remove_animation_at_index clear_animations clickable json_preprocess json_postprocess json get add remove exists arena.base_object.BaseObject json_encode ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/image.html",
    "relUrl": "/content/python-api/objects/image.html"
  },"466": {
    "doc": "arena.objects.image",
    "title": "arena.objects.image",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/image.html",
    "relUrl": "/content/python-api/objects/image.html"
  },"467": {
    "doc": "Import/Export Scenes",
    "title": "Import/Export ARENA scenes",
    "content": "The import/export script allows to import/export ARENA scenes to/from json. ",
    "url": "https://docs.arenaxr.org/content/tools/import-export.html#importexport-arena-scenes",
    "relUrl": "/content/tools/import-export.html#importexport-arena-scenes"
  },"468": {
    "doc": "Import/Export Scenes",
    "title": "Usage",
    "content": "Import/export ARENA scenes with: . make import make export . This assumes you have Make installed. The Makefile creates a virtual environment that deals with installing all dependencies, including the arena-py library. Export is not implemented yet . ",
    "url": "https://docs.arenaxr.org/content/tools/import-export.html#usage",
    "relUrl": "/content/tools/import-export.html#usage"
  },"469": {
    "doc": "Import/Export Scenes",
    "title": "Arguments",
    "content": "The script accepts an action argument: . action The action to perform: import/export. Note: Export is not implemented yet . And the following optional arguments: . -h, --help show this help message and exit -c CONFIGFILE [CONFIGFILE ...], --conf CONFIGFILE [CONFIGFILE ...] The configuration file. Default is ./config.yaml -d, --dry-run -n, --no-dry-run -o HOST [HOST ...], --host HOST [HOST ...] The arena host. -p MQTT_PORT [MQTT_PORT ...], --mqtt-port MQTT_PORT [MQTT_PORT ...] The arena mqtt host port. -r REALM [REALM ...], --realm REALM [REALM ...] The arena realm. To pass arguments to the script, add the ARGS variable when invoking Make, e.g.: . make import ARGS='-h' make export ARGS='--dry-run' make import ARGS='--host=arenaxr.org --mqtt_port=8883 --conf=myconfigfile.yaml' . ",
    "url": "https://docs.arenaxr.org/content/tools/import-export.html#arguments",
    "relUrl": "/content/tools/import-export.html#arguments"
  },"470": {
    "doc": "Import/Export Scenes",
    "title": "Config file",
    "content": "Most of the time, you will want to invoke the script simply with the action: . make import make export . And define options in the config file (./config.yaml by default). The config file looks like this: . dryrun: False # a dry run does not perform publish, just lists objects that would be imported (default: True; import only) persist: True # persist flag used in published messages (default: True) host: arenaxr.org mqtt_port: 8883 realm: realm # json array with objects for import (e.g. from mongodb export; must be .json or .bson file) import_objects_filename: arenaobjects_03_29_2021.bson # list of namespaces and scenes to import/export namespaces: regex: value: .* # regex for the namespaces to be included ('.*' will match any scene name; will include all scenes, if skip=False) skip: False # if True, treat regex as indicating that matching namespaces are skipped (default=False) skip-scenes-from-this-namespace: # the regex below shows how to skip all scenes in a namespace regex: value: .* # regex for the scenes to be imported for this namespace (none, if skip=True) skip: True # this indicates that scenes matching the regex will be **skipped** dont-skip-this-one: # this scene will be imported; scenes listed are always processed (even if they don't match the regex) rename-this-namespace: # this example shows how to rename an entire namespace in the file when importing regex: value: .* # regex for the scenes to be included (all, if skip=False) skip: False # do not skip matching scene ids to: namespace: new-namespace # can add destination to:namespace (to rename namespace) public: # namespaces listed are always processed (even if they don't match the regex) lobby: to: # add destination scene name and/or namespace to rename/change scene/namespace scene: lobby # can add destination to:scene (to rename scene) namespace: public_test # can add destination to:namespace (to change namespace; will override namespace-level to: setting) parent: imported_lobby_root # objects will be added as children of this object (assumes parent exists ) fireside: # another example: import scene 'fireside' in the file to 'fireside-imported' to: scene: fireside-imported . Note: Command line args override config file options. ",
    "url": "https://docs.arenaxr.org/content/tools/import-export.html#config-file",
    "relUrl": "/content/tools/import-export.html#config-file"
  },"471": {
    "doc": "Import/Export Scenes",
    "title": "Permissions",
    "content": "This tool will use the permissions of the ARENA user logged in. Can only import to namespaces/scenes the user has access to. If the user is not logged in, a login prompt (in a browser) will be presented. ",
    "url": "https://docs.arenaxr.org/content/tools/import-export.html#permissions",
    "relUrl": "/content/tools/import-export.html#permissions"
  },"472": {
    "doc": "Import/Export Scenes",
    "title": "Import/Export Scenes",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/tools/import-export.html",
    "relUrl": "/content/tools/import-export.html"
  },"473": {
    "doc": "Impulse",
    "title": "Impulse",
    "content": "Apply an impulse to an object to set it in motion. This happens in conjunction with an event. Requires click-listener and physics. ",
    "url": "https://docs.arenaxr.org/content/schemas/message/impulse.html#impulse",
    "relUrl": "/content/schemas/message/impulse.html#impulse"
  },"474": {
    "doc": "Impulse",
    "title": "Impulse Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | force | vector3 | {'x': 1, 'y': 1, 'z': 1} | Impulse vector. | No | . | on | string; One of: ['mousedown', 'mouseup'] | 'mousedown' | Event to listen ‘on’. | No | . | position | vector3 | {'x': 1, 'y': 1, 'z': 1} | World position. | No | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/impulse.html#impulse-attributes",
    "relUrl": "/content/schemas/message/impulse.html#impulse-attributes"
  },"475": {
    "doc": "Impulse",
    "title": "Impulse",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/impulse.html",
    "relUrl": "/content/schemas/message/impulse.html"
  },"476": {
    "doc": "arena.attributes.impulse",
    "title": "\narena.attributes.impulse    ",
    "content": "class Impulse(arena.attributes.attribute.Attribute): Impulse attribute class to manage its properties in the ARENA: Apply an impulse to an object to set it in motion. This happens in conjunction with an event. Requires click-listener and physics. Usage: impulse=Impulse(...) . Parameters . | dict force: Impulse vector. Defaults to '{'x': 1, 'y': 1, 'z': 1}' (optional) | str on: Event to listen 'on'. Allows [mousedown, mouseup] Defaults to 'mousedown' (optional) | dict position: World position. Defaults to '{'x': 1, 'y': 1, 'z': 1}' (optional) | . Impulse( on=&#39;mousedown&#39;, force={&#39;x&#39;: 0, &#39;y&#39;: 0, &#39;z&#39;: 0}, position={&#39;x&#39;: 0, &#39;y&#39;: 0, &#39;z&#39;: 0}, **kwargs) Inherited Members . arena.base_object.BaseObject add json_encode json ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/impulse.html",
    "relUrl": "/content/python-api/attributes/impulse.html"
  },"477": {
    "doc": "arena.attributes.impulse",
    "title": "arena.attributes.impulse",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/impulse.html",
    "relUrl": "/content/python-api/attributes/impulse.html"
  },"478": {
    "doc": "The ARENA",
    "title": "Collaborative Mixed Reality Applications",
    "content": "ARENA: a multi-user and multi-application environment to simplify the development of mixed reality applications. The Augmented Reality Edge Network Architecture (ARENA) is a platform designed to simplify programming where there is a mix of virtual and physical systems, with locality and pervasive sensing as first-class citizens. ARENA makes it easy to create and host multiple applications that interact with users and other agents in an immersive 3D environment created inside a browser. | | . | Industrial digital twins | Wide-area tracking and localization | . | | . | VR telepresence | Outside-in tracking | . ",
    "url": "https://docs.arenaxr.org/#collaborative-mixed-reality-applications",
    "relUrl": "/#collaborative-mixed-reality-applications"
  },"479": {
    "doc": "The ARENA",
    "title": "Key Features",
    "content": "ARENA simplifies a number of common development tasks for multi-user cross-platform mixed reality programming as follows. AR, VR, XR . Seamless support for a spectrum of experiences, from completely immersing the user in a digital world (Virtual Reality; VR) to enhancing the real world with interactive digital content (Augmented Reality; AR). A spectrum currently identified as miXed Reality (XR). Multi-platform . 3D applications that users can interact with from a number of platforms including tablets, phones, headsets and desktop browsers. Multiuser Experience . Users in the physical space can see the same 3D content anchored to the physical world in AR, and properties of all objects (and state of users) are networked to provide a consistent real-time view from any device or platform. Create and Host Applications . Runtime environment that can host any number of user programs on any network connected device. Security . Fine-grained access control allowing users to share and manage control over content, with user applications hosted by a sandboxed environment. Accurate relocalization . Built-in support for a number of different types of systems (such as UWB, OptiTrack, AprilTags). Geographic content lookup . Perform geographic queries for content, assets (such as location markers) and compute resources. ",
    "url": "https://docs.arenaxr.org/#key-features",
    "relUrl": "/#key-features"
  },"480": {
    "doc": "The ARENA",
    "title": "Next Steps",
    "content": ". Get started by following our ARENA Overview to learn the main concepts. ARENA Overview . Then, you can learn the basics of the interface and enter an ARENA scene. Also learn about building scenes, and how to develop python programs to define the behavior of your scenes. You can also see a more detailed description of the ARENA architecture. First Time in the ARENA Build a Scene Develop Python Programs ARENA Architecture . The navigation bar on the left side will take you to much more content about the ARENA, which you can browse. tip . Use the Search ARENA Documentation bar at the very top of every page on this site to find examples and information on anything you need. Icons made by Smashicons, Freepik from www.flaticon.com . ",
    "url": "https://docs.arenaxr.org/#next-steps",
    "relUrl": "/#next-steps"
  },"481": {
    "doc": "The ARENA",
    "title": "The ARENA",
    "content": " ",
    "url": "https://docs.arenaxr.org/",
    "relUrl": "/"
  },"482": {
    "doc": "Objects Schema",
    "title": "ARENA Message Objects",
    "content": "| Object Message | Description | . | ARENAUI Card | ARENAUI Card. | . | ARENAUI Button Panel | ARENAUI Button Panel. | . | ARENAUI Prompt | ARENAUI Prompt. | . | Box | Box Geometry. | . | Circle | Circle Geometry. | . | Capsule | Capsule Geometry. | . | Cone | Cone Geometry. | . | Cube (deprecated; don’t use) | Cube (=Box) Geometry (deprecated); Supported for Legacy reasons; Please use Box in new scenes. | . | Cylinder | Cylinder Geometry. | . | Dodecahedron | Dodecahedron Geometry. | . | Entity (generic object) | Entities are the base of all objects in the scene. Entities are containers into which components can be attached. | . | GLTF Model | Load a GLTF model. | . | 3D Gaussian Splat | Load 3D Gaussian Splat. | . | Image | Display an image on a plane. | . | Icosahedron | Icosahedron Geometry. | . | Light | A light. | . | Line | Draw a line. | . | Ocean | Draw a wave-form plane. | . | Octahedron | Octahedron Geometry. | . | PCD Model | Load a PCD model. | . | Plane | Plane Geometry. | . | Program | ARENA program data. | . | Ring | Ring Geometry. | . | Rounded Box | Rounded Box Geometry. | . | Scene Options | ARENA scene options. | . | Sphere | Sphere Geometry. | . | Tetrahedron | Tetrahedron Geometry. | . | Text | Display text. | . | Thickline | Draw a line that can have a custom width. | . | Three.js Scene | Load a Three.js Scene (might be THREE.js version-specific; you can see THREE.js version in the JS console once you open ARENA; using glTF is preferred). | . | Torus | Torus Geometry. | . | Torus Knot | Torus Knot Geometry. | . | Triangle | Triangle Geometry. | . | URDF Model | Load a URFD model. | . | Videosphere | Videosphere 360 Video. | . | Camera | Camera is the pose and arena-user component data representing a user avatar. | . | Camera Override | Camera Override is used to re-position and re-pose a client’s camera. | . | Event | Events are ephemeral messages used to send user events like mouse movements or controller actions. | . | Hand Left | Hand Left is the left hand metadata pose and controller type of the user avatar. | . | Hand Right | Hand Right is the right hand metadata pose and controller type of the user avatar. | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/#arena-message-objects",
    "relUrl": "/content/schemas/message/#arena-message-objects"
  },"483": {
    "doc": "Objects Schema",
    "title": "Objects Schema",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/",
    "relUrl": "/content/schemas/message/"
  },"484": {
    "doc": "Python Tutorial",
    "title": "arena-py Documentation and Tutorials",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/python/tutorial/#arena-py-documentation-and-tutorials",
    "relUrl": "/content/python/tutorial/#arena-py-documentation-and-tutorials"
  },"485": {
    "doc": "Python Tutorial",
    "title": "Tutorials",
    "content": "Part 1 . Part 2 . Part 3 . Part 4 . Code for these tutorials can be found in our Python Examples. ",
    "url": "https://docs.arenaxr.org/content/python/tutorial/#tutorials",
    "relUrl": "/content/python/tutorial/#tutorials"
  },"486": {
    "doc": "Python Tutorial",
    "title": "General Documentation",
    "content": "See ARENA Documentation: Python. ",
    "url": "https://docs.arenaxr.org/content/python/tutorial/#general-documentation",
    "relUrl": "/content/python/tutorial/#general-documentation"
  },"487": {
    "doc": "Python Tutorial",
    "title": "A simple program",
    "content": "from arena import * # create library scene = Scene(host=\"arenaxr.org\", scene=\"example\") @scene.run_once # make this function a task that runs once at startup def main(): # make a box box = Box(object_id=\"myBox\", position=(0,3,-3), scale=(2,2,2)) # add the box to ARENA scene.add_object(box) # start tasks scene.run_tasks() . ",
    "url": "https://docs.arenaxr.org/content/python/tutorial/#a-simple-program",
    "relUrl": "/content/python/tutorial/#a-simple-program"
  },"488": {
    "doc": "Python Tutorial",
    "title": "Python Tutorial",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/python/tutorial/",
    "relUrl": "/content/python/tutorial/"
  },"489": {
    "doc": "Web Interface",
    "title": "Web Frontend User Interface",
    "content": "The web client interface for our main ARENA instance is at https://arenaxr.org/: . From this main entry point, there are a few relevant areas: . | Login: /user | Scene List: /scenes | Scene Builder: /build | User Files: /files | . In addition, we can access ARENA scenes as described below. ",
    "url": "https://docs.arenaxr.org/content/interface/#web-frontend-user-interface",
    "relUrl": "/content/interface/#web-frontend-user-interface"
  },"490": {
    "doc": "Web Interface",
    "title": "Accessing ARENA Scenes",
    "content": "Scenes are accessed from &lt;namespace&gt;/&lt;scene&gt;, where namespace is the ARENA user name, and scene is the name of the scene. If a namespace is not given, it will default to the public namespace. For example, the lobby scene (the scenename) of the public namespace in our main ARENA instance: can be accessed through both https://arenaxr.org/public/lobby or, omitting the namespace: https://arenaxr.org/lobby. See some example public scenes in our Showcase. note . We recommend the ARENA Overview as a quick introduction to ARENA and some of these areas, including on how to access scenes and edit/create them. ",
    "url": "https://docs.arenaxr.org/content/interface/#accessing-arena-scenes",
    "relUrl": "/content/interface/#accessing-arena-scenes"
  },"491": {
    "doc": "Web Interface",
    "title": "ARENA Users and Security",
    "content": "There are 2 basic methods of accessing the ARENA: Authenticated and Anonymous. Anonymous users are only allowed to participate in video conferencing as observers of the ARENA. Authenticated users however, also have the opportunity to create and edit ARENA 3D scenes and run programs in the ARENA. | Collaborate: Join other users in a video conference. | Create: Use your authenticated account to build something amazing! | Control: Review our current security model. | . Follow the table of contents below to see more about the ARENA Web Frontend. ",
    "url": "https://docs.arenaxr.org/content/interface/#arena-users-and-security",
    "relUrl": "/content/interface/#arena-users-and-security"
  },"492": {
    "doc": "Web Interface",
    "title": "Web Interface",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/interface/",
    "relUrl": "/content/interface/"
  },"493": {
    "doc": "Architecture",
    "title": "Architecture Overview",
    "content": "Figure 1 presents an overview of the ARENA Architecture. Figure 1. ARENA Architecture. Realms represent a geographically distinct set of resources. Each realm has its own set of ARENA services (web server, message bus, runtime manager). A directory service, called Atlas, allows users to find nearby content based on coarse location and then supports managing the data needed to link Scene content with the physical world. As users find local content, they are handed off to a Realm, which is a server (or group of servers) that hosts ARENA 3D content and services. Channeling interactions through local/nearby Realms helps to improve latency-sensitive interactions. Realms connect hardware components like viewing devices, such as headsets, mobile phones or tablet and other headless devices embedded in the environment (e.g., cameras and other sensors used for localization and environment awareness).Realms also include a set of ARENA services (message bus, content server, persistence, runtime manager) to support devices in that geographical area. Most services expose REST APIs to, e.g., query current state, permissions, or create access tokens.User devices connected to the ARENA can not only show 3D content, but also host hot-pluggable applications. We created a common runtime to support sandboxed code launched from any connected target. We leverage modern WebXR-capable browsers to support diverse platforms and rendering capabilities, and several existing frameworks used to create the ARENA browser client: A-Frame, three.js and WebGL (also shown inf Figure 1). Follow the table of contents below to see more about the ARENA Architecture. ",
    "url": "https://docs.arenaxr.org/content/architecture/#architecture-overview",
    "relUrl": "/content/architecture/#architecture-overview"
  },"494": {
    "doc": "Architecture",
    "title": "Architecture",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/architecture/",
    "relUrl": "/content/architecture/"
  },"495": {
    "doc": "Tutorial",
    "title": "ARENA Tutorial Overview",
    "content": "You can learn the basics of the interface and enter an ARENA scene. Also learn about building scenes, and how to develop python programs to define the behavior of your scenes. You can also see a more detailed description of the ARENA architecture. First Time in the ARENA Build a Scene Develop Python Programs ARENA Architecture . Icons made by Smashicons, Freepik from www.flaticon.com . ",
    "url": "https://docs.arenaxr.org/content/overview/#arena-tutorial-overview",
    "relUrl": "/content/overview/#arena-tutorial-overview"
  },"496": {
    "doc": "Tutorial",
    "title": "ARENA Background",
    "content": "Many have predicted the future of the Web to be the integration of Web content with the real-world through technologies such as augmented reality. This overlay of virtual content on top of the physical world, called the Spatial Web (in different contexts might be called AR Cloud, MetaVerse, Digital Twin), holds promise for dramatically changing the Internet as we see it today, and has broad application. However, building pervasive mixed (virtual and augmented) reality applications is challenging for several reasons. First, applications require global instant-on localization and anchoring to the physical world. Second, supporting interaction across multiple users and with physical entities leads to tight latency requirements. It is extremely noticeable when physical and virtual objects don’t correctly track each other. Third, support of content across platforms needs to span a wide range of compute and interaction capabilities. For example, click inputs look different on a tablet and an AR headset. Applications might need to be hosted on the cloud, at the edge or perhaps even in the end devices. Fourth, applications require access control to compute, sensor and actuator access in potentially untrusted environments. Finally, authoring and programming workflows need to adapt to real-world input and potentially interface with other Internet connected systems. The Augmented Reality Edge Networking Architecture (ARENA) was designed to address many of the challenges of building collaborative mixed reality applications. See a summary of the main features in the introduction. We also have a more detailed description of the ARENA architecture. ",
    "url": "https://docs.arenaxr.org/content/overview/#arena-background",
    "relUrl": "/content/overview/#arena-background"
  },"497": {
    "doc": "Tutorial",
    "title": "Main Concepts",
    "content": "Below is an overview of some important ARENA concepts. We explain the idea of an ARENA Realm, Scene, and the geographic content lookups made by ATLAS. Along the way, we will also try to understand the role of some important ARENA system services, such as the persistence service. ARENA Realm . A Realm is a group of coordinating services including web servers for static content, an MQTT Publish-Subscribe (PubSub) messaging bus for real-time data distribution and a resource manager that can dispatch ARENA applications. The Realm defines a local instance of the ARENA along with any programs, devices or users that connect to the same PubSub bus. Realms (and scenes) are found through geographic lookups made to ATLAS. ARENA Scene . A Scene is an abstraction that contains a group of related virtual assets like 3D objects, configuration parameters, applications with shared end-points that allow users interactions. Scenes exist within a tree-like hierarchy, with configurable access control and are often attached to a physical location. Using a web analogy, the Realm is like a (local) web server and the Scene is like a particular web application. Scenes are loaded similarly to web applications within a web browser with the capability to render the content and interact with location services. However, unlike most standard web browsers, it is possible to view a composition of multiple scenes simultaneously. For example, in a public space there might be multiple scenes that each contain various applications (and other users). A user might have access to one or more scenes in the same physical space that can be layered with an XR browser session. Since a Scene is the most basic unit of access control, this can be used to enable read and/or write to particular assets. Users are provided with access tokens that define their read and write access within the Scene structure. Scene Loading . It is important to distinguish how scenes are loaded and subsequently updated in real-time: . Once a user connects to a Realm and loads a particular Scene, a browser is given all of the 3D objects that are within the scene. This content is initially requested from a Persistence Data Store that tracks the latest state of any persistent objects (not all objects need to be persistent). Real-time Networked Updates . Once loaded, each of the 3D assets in a scene are then updated in real-time over the Realm’s local MQTT bus. For example, if an application changes the color of a cube, this would be captured in a message over the bus. When a user moves their camera or clicks on an object, these updates and events are also transmitted as messages. Each object in a Scene is managed by an end-point on the PubSub bus making them implicitly networked. This network transparency allows any number of applications and users running from different devices to all seamlessly interact within the 3D environment. Users can even see an avatar representation of other users in AR/VR since their camera pose is continuously published into a scene. ATLAS - Geographic Content Lookup . Scenes and Realms can be registered and discovered with a geographic database system called ATLAS. ATLAS operates in a hierarchical manner much like the Internet’s Domain Name Service (DNS), but using GPS coordinates and UUID markers instead of domain names. ATLAS stores a GPS location for each Scene along with a 3D bounding polygon. For example, a user could read a BLE beacon that provides a UUID that maps to a GPS coordinate along with any Scenes available at that location. It is worth noting that a Scene’s address can be used to form a URL for virtual environments that have no physical location without the need for ATLAS. Runtime Management (ARTS) . Execution of applications in a Scene is managed by a local resource manager (ARTS) that is also part of the Realm. ARTS is responsible for dispatching, monitoring and migrating for execution of programs to available runtimes. ",
    "url": "https://docs.arenaxr.org/content/overview/#main-concepts",
    "relUrl": "/content/overview/#main-concepts"
  },"498": {
    "doc": "Tutorial",
    "title": "Tutorial",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/overview/",
    "relUrl": "/content/overview/"
  },"499": {
    "doc": "XR Experiences",
    "title": "VR, AR, XR",
    "content": "ARENA has seamless support for a spectrum of experiences, from completely immersing the user in a digital world (Virtual Reality; VR) to enhancing the real world with interactive digital content (Augmented Reality; AR). A spectrum often identified as miXed Reality (XR). To support diverse platforms and rendering capabilities, ARENA leverages modern WebXR-capable browsers. Content can be viewed on a number of platforms ranging from standard web browsers on desktop computers and VR headsets, on phones / tablets with passthrough AR (FireFox WebXR Viewer, Chrome) and wearable AR headsets (Hololens Edge Browser, Magic Leap Lumin Browser). As an illustrative example, the following video demonstrates ARENA being used in an hybrid conference conference use case. It uses a 3D scan of the conference venue as the backdrop environment for remote users and a model to stage various AR interactions for in-person users. Remote participants can use VR in a browser or a VR headset to navigate the scene. In-person participants can use AR headsets or mobile AR through WebXR browsers to see and hear remote users. note . We recommend the miXed Reality (XR) Overview for a quick taste of XR in ARENA. See the following sections for details on requirements, setting up scenes for mixed reality experiences and anchoring them. ",
    "url": "https://docs.arenaxr.org/content/xr/#vr-ar-xr",
    "relUrl": "/content/xr/#vr-ar-xr"
  },"500": {
    "doc": "XR Experiences",
    "title": "XR Experiences",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/xr/",
    "relUrl": "/content/xr/"
  },"501": {
    "doc": "Tools",
    "title": "Tools Overview",
    "content": "During the development, we created several useful tools, to author ARENA scenes in AR, import/export scenes, or programatically create scenes for poster sessions. The sections below document these tools. ",
    "url": "https://docs.arenaxr.org/content/tools/#tools-overview",
    "relUrl": "/content/tools/#tools-overview"
  },"502": {
    "doc": "Tools",
    "title": "Tools",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/tools/",
    "relUrl": "/content/tools/"
  },"503": {
    "doc": "ARENA Programs",
    "title": "ARENA Programs",
    "content": "It is possible to host programs in ARENA that are added to a scene and are automatically started to programmatically control your scenes. The recommended way to create an ARENA program is using the ARENA Python Library. Once you have the python code developed, you can host it in ARENA. This is a quick summary of what is process to add a program: . | Go to the file store and add the program files. | Edit/create the scene that will load your program using the scene builder. | See the Dashboard to see the runtimes and modules running. | . See the step-by-step example. ",
    "url": "https://docs.arenaxr.org/content/programs/",
    "relUrl": "/content/programs/"
  },"504": {
    "doc": "3D Content",
    "title": "Generating 3D Content Overview",
    "content": "We use a number of tools and techniques for 3d-models in the ARENA. Foremost we recommend using the GLTF model format whenever possible, it was designed to generate uniform rendering across multiple platforms, especially the web where the ARENA lives. The section outlines methods for converting GLTF Files. You can export a Blender scene with our Blender Add-on. Downscaling Models for performance, Export Unity models, and Convert SketchUp . It is useful to bring real-world assets into your ARENA scene s through scanning. We have a list of LIDAR, NERF, and Photogrammetry scan tools listed. You may want from animate your 3d models. To that end we have some ideas to Animate Faces or Animate Models . Don’t forget to add a Navigation Mesh. ",
    "url": "https://docs.arenaxr.org/content/3d-content/#generating-3d-content-overview",
    "relUrl": "/content/3d-content/#generating-3d-content-overview"
  },"505": {
    "doc": "3D Content",
    "title": "3D Content",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/3d-content/",
    "relUrl": "/content/3d-content/"
  },"506": {
    "doc": "Unity Library",
    "title": "arena-unity",
    "content": "Unity C# library for editing scenes and creating applications for the ARENA. | arena-unity Unity repository | . ",
    "url": "https://docs.arenaxr.org/content/unity/#arena-unity",
    "relUrl": "/content/unity/#arena-unity"
  },"507": {
    "doc": "Unity Library",
    "title": "Library Usage:",
    "content": ". | Open a new or existing Unity project. Unity 2030.3+ supported. | Edit &gt; Project Settings &gt; Player &gt; PC, Mac &amp; Linux Standalone &gt; Other Settings &gt; Script Compilation: . | Scripted Define Symbols to include: . | SSL | . | . | Edit &gt; Project Settings &gt; Player &gt; PC, Mac &amp; Linux Standalone &gt; Resolution and Presentation &gt; Resolution: . | Run In Background set to true. | . | You may need to install git if it doesn’t come preinstalled on your OS (Windows 10). | Open Window &gt; Package Manager and + &gt; Add package from git URL..., use this link for the latest: https://github.com/arenaxr/arena-unity.git . or this for a specific version: . https://github.com/arenaxr/arena-unity.git#v0.10.1 . | Create an empty GameObject to use as ARENA client root, rename it to something meaningful, like: ARENA. | Select the ARENA GameObject and press Add Component to add the ArenaClientScene script. | Modify the the inspector variables for the ArenaClientScene script to change host, scene, namespace as you wish. | Press Play. | The auth flow will open a web browser page for you to login, if you haven’t yet. | . ",
    "url": "https://docs.arenaxr.org/content/unity/#library-usage",
    "relUrl": "/content/unity/#library-usage"
  },"508": {
    "doc": "Unity Library",
    "title": "Runtime (Play)",
    "content": "See operational documentation. ",
    "url": "https://docs.arenaxr.org/content/unity/#runtime-play",
    "relUrl": "/content/unity/#runtime-play"
  },"509": {
    "doc": "Unity Library",
    "title": "Unity Library",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/unity/",
    "relUrl": "/content/unity/"
  },"510": {
    "doc": "ARENA Objects",
    "title": "ARENA Object Schemas and Over-the-Wire Messages",
    "content": "ARENA Scenes are a collection of Entities to which Components can be attached, following A-Frame’s Entity-Component-System (ECS) architecture. All objects have a set of common properties: object id, a type, and an action (create, update, delete). The persist flag indicates if ARENA persist service should persist this object. Properties in the data sections (Box Data in the example figure) are the object-specific properties and components. The example below shows a Box Geometry with depth, height, width properties, and position components. As shown, other properties, such as the segments dimensions, and components (e.g., a click listener, or material properties) can be added to a Box geometry. All ARENA objects have similar well-defined schemas, and these are the basis for the over-the-wire message format shown below. This is the message format transmitted over the PubSub to create/update/delete objects. { \"object_id\": \"abox\", \"persist\": true, \"type\": \"object\", \"action\": \"create\", \"data\": { \"object_type\": \"box\", \"depth\": 1, \"height\": 1, \"width\": 1, \"position\": { \"x\": 0, \"y\": 0, \"z\": 0 } } } . ",
    "url": "https://docs.arenaxr.org/content/schemas/#arena-object-schemas-and-over-the-wire-messages",
    "relUrl": "/content/schemas/#arena-object-schemas-and-over-the-wire-messages"
  },"511": {
    "doc": "ARENA Objects",
    "title": "ARENA Objects and A-Frame",
    "content": "ARENA’s 3D environment is built on top of A-Frame, and it supports the majority of A-Frame’s primitives (e.g., geometries like boxes, circles, spheres) and components (that can be attached to objects, such as position, rotation, material, sound). To clarify this relation, observe the Box geometry object shown below. The 3D object type shown, box, is the A-Frame primitive used. Any of the properties in the Box Data section are properties of A-Frame’s Box primitive. You can see that the properties shown, such as depth, height, width, and other additional properties such as segments depth, segments height that can be added, all belong to A-Frame’s Box primitive. In fact, any property supported by A-Frame can be added (for example, if A-Frame adds a new property not on ARENA schemas, it can be manually added). Notice also that the Box geometry has Material properties. This represents an A-Frame’s Material Component attached to this geometry. All properties defined here are passed to this A-Frame component. tip . Looking up A-Frame’s documentation for supported primitives and components is often an excellent way to complement ARENA’s documentation and obtain further clarification of the meaning of object’s properties. See our reference of ARENA supported objects and their properties. ",
    "url": "https://docs.arenaxr.org/content/schemas/#arena-objects-and-a-frame",
    "relUrl": "/content/schemas/#arena-objects-and-a-frame"
  },"512": {
    "doc": "ARENA Objects",
    "title": "ARENA-Specific Components and Systems",
    "content": "We also extended A-Frame by building ARENA-specific components and systems for, e.g. AR markers, programs, networked events, and options. | ARENA-specific components | ARENA-specific systems | . ",
    "url": "https://docs.arenaxr.org/content/schemas/#arena-specific-components-and-systems",
    "relUrl": "/content/schemas/#arena-specific-components-and-systems"
  },"513": {
    "doc": "ARENA Objects",
    "title": "ARENA Objects",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/",
    "relUrl": "/content/schemas/"
  },"514": {
    "doc": "Python Library",
    "title": "Python Library Overview",
    "content": "The Python library provides a very accessible development option for ARENA applications. Our current API allows us to create and update objects in a scene, define animations, and setup callbacks on events and timers. The library provides a scheduler and a design pattern familiar to game developers, which includes decorators to create one-shot, periodic and delayed (start after a given time) tasks.Any entity represented in Python is automatically updated upon arrival of network messages and we provide calls to load any pre-existing scene content upon startup. Draw objects and run programs in the ARENA using Python! . | arena-py Python repository | . ",
    "url": "https://docs.arenaxr.org/content/python/#python-library-overview",
    "relUrl": "/content/python/#python-library-overview"
  },"515": {
    "doc": "Python Library",
    "title": "Setup",
    "content": "Install package using pip: . pip3 install arena-py . ",
    "url": "https://docs.arenaxr.org/content/python/#setup",
    "relUrl": "/content/python/#setup"
  },"516": {
    "doc": "Python Library",
    "title": "Hello ARENA",
    "content": "Run the hello.py example: . cd examples python hello.py . hello.py . from arena import * scene = Scene(host=\"arenaxr.org\", scene=\"example\") @scene.run_once def make_box(): scene.add_object(Box()) scene.run_tasks() . ",
    "url": "https://docs.arenaxr.org/content/python/#hello-arena",
    "relUrl": "/content/python/#hello-arena"
  },"517": {
    "doc": "Python Library",
    "title": "arena-py Library",
    "content": "The above is the simplest example of an ARENA Python program. This library sits above the ARENA pub/sub MQTT message protocol. JSON messages are described in more detail in our Wire Message Definition which runs in a browser. That forms a layer, in turn, on top of A-Frame and THREE.js javascript libraries. ",
    "url": "https://docs.arenaxr.org/content/python/#arena-py-library",
    "relUrl": "/content/python/#arena-py-library"
  },"518": {
    "doc": "Python Library",
    "title": "Examples",
    "content": "Examples of arena-py programs can be found in our Examples and System Tests. ",
    "url": "https://docs.arenaxr.org/content/python/#examples",
    "relUrl": "/content/python/#examples"
  },"519": {
    "doc": "Python Library",
    "title": "Running from the Command Line",
    "content": "ARENA python applications can be sandboxed in the WASM runtime (currently with limited library support due to the still immature support for Python in WASM toolchains) and managed by ARTS, or ran standalone from you computer. To run a python program from the command line in your computer, specify the target of which server, user and scene are set by the Scene(host=\"...\",scene=\"...\",namespace=\"...\",debug=False) function call. It is also possible to override these using environmental variables at the command line as shown below. This allows a simple way to re-target applications for your own environment without having to change the parameters manually in the code. export MQTTH=arenaxr.org # ARENA webserver main host export REALM=realm export SCENE=scene export NAMESPACE=namespace python3 hello.py ... ===== Loading: https://arenaxr.org/namespace/scene, realm=realm Connecting to the ARENA... Connected! ===== ... If not specified the namespace is your current logged in user-id. The most common use-case is to simply update SCENE and MQTTH. ",
    "url": "https://docs.arenaxr.org/content/python/#running-from-the-command-line",
    "relUrl": "/content/python/#running-from-the-command-line"
  },"520": {
    "doc": "Python Library",
    "title": "Authentication",
    "content": "We have added protection to the ARENA MQTT broker to limit access to change your scenes, which requires Python programs to supply authentication through a Google account. Sign-In Desktop OS . If you have a web browser available, the arena-py library Scene(host=\"myhost.com\") will launch a web browser the first time and ask you for an account to authenticate you with, before opening a client MQTT connection. Sign-In Server/Headless OS . For headless environments, the arena-py library Scene(host=\"myhost.com\") will provide you with a url to cut and paste in a browser anywhere, ask you for an account to authenticate you with, and show you a code you can enter on the command line, before opening a client MQTT connection. ",
    "url": "https://docs.arenaxr.org/content/python/#authentication",
    "relUrl": "/content/python/#authentication"
  },"521": {
    "doc": "Python Library",
    "title": "Scripts",
    "content": "Some helper script aliases have been added in this library to help you manage authentication and quick command-line (CLI) publish and subscribe to the ARENA. Sign-Out . arena-py-signout . Show Permissions . arena-py-permissions . CLI Subscribe to Scene Messages . arena-py-sub -mh arenaxr.org -s example . CLI Subscribe to Custom Topic . arena-py-sub -mh arenaxr.org -t realm/g/a . CLI Publish a Scene Object Message . arena-py-pub -mh arenaxr.org -s example -m '{\"object_id\": \"gltf-model_Earth\", \"action\": \"create\", \"type\": \"object\", \"data\": {\"object_type\": \"gltf-model\", \"position\": {\"x\":0, \"y\": 0.1, \"z\": 0}, \"url\": \"store/models/Earth.glb\", \"scale\": {\"x\": 5, \"y\": 5, \"z\": 5}}}' . CLI Help . arena-py-pub --help arena-py-sub --help . ",
    "url": "https://docs.arenaxr.org/content/python/#scripts",
    "relUrl": "/content/python/#scripts"
  },"522": {
    "doc": "Python Library",
    "title": "Python Interactive Robot Demo",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/python/#python-interactive-robot-demo",
    "relUrl": "/content/python/#python-interactive-robot-demo"
  },"523": {
    "doc": "Python Library",
    "title": "Python Library",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/python/",
    "relUrl": "/content/python/"
  },"524": {
    "doc": "Intermediate Example",
    "title": "Intermediate Example - Exploring more functionality!",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/python/tutorial/intermediate.html#intermediate-example---exploring-more-functionality",
    "relUrl": "/content/python/tutorial/intermediate.html#intermediate-example---exploring-more-functionality"
  },"525": {
    "doc": "Intermediate Example",
    "title": "Updating object attributes",
    "content": "box = Box(object_id=\"my_box\", position=Position(0,4,-2), scale=Scale(2,2,2)) scene.add_object(box) box.update_attributes(position=Position(2,4,-2)) scene.update_object(box) . ",
    "url": "https://docs.arenaxr.org/content/python/tutorial/intermediate.html#updating-object-attributes",
    "relUrl": "/content/python/tutorial/intermediate.html#updating-object-attributes"
  },"526": {
    "doc": "Intermediate Example",
    "title": "Parent-Child",
    "content": "We can define child objects whose position will be relative to its parent object: . text = Text(object_id=\"my_text\", value=\"Welcome to arena-py!\" position=Position(0,2,0), parent=box) scene.add_object(text) . ",
    "url": "https://docs.arenaxr.org/content/python/tutorial/intermediate.html#parent-child",
    "relUrl": "/content/python/tutorial/intermediate.html#parent-child"
  },"527": {
    "doc": "Intermediate Example",
    "title": "Decorators for tasks and periodic tasks",
    "content": "Instead of doing . def main(): # your code here scene.run_once(main) . You can instead do . @scene.run_once def main(): # your code here . Lets define a periodic task that runs every 500 milliseconds: . x = 0 @scene.run_forever(interval_ms=500) def periodic(): global x # non allocated variables need to be global box.update_attributes(position=Position(x,3,0)) scene.update_object(box) x += 0.1 . ",
    "url": "https://docs.arenaxr.org/content/python/tutorial/intermediate.html#decorators-for-tasks-and-periodic-tasks",
    "relUrl": "/content/python/tutorial/intermediate.html#decorators-for-tasks-and-periodic-tasks"
  },"528": {
    "doc": "Intermediate Example",
    "title": "Run tasks",
    "content": "# note that we do not have to do scene.run_once or scene.run_forever scene.run_tasks() . Now, go into the scene to see your box move with text! . ",
    "url": "https://docs.arenaxr.org/content/python/tutorial/intermediate.html#run-tasks",
    "relUrl": "/content/python/tutorial/intermediate.html#run-tasks"
  },"529": {
    "doc": "Intermediate Example",
    "title": "Appendix",
    "content": "from arena import * # setup library scene = Scene(host=\"arenaxr.org\", scene=\"example\") # make a box box = Box(object_id=\"my_box\", position=Position(0,4,-2), scale=Scale(2,2,2)) @scene.run_once def main(): # add the box scene.add_object(box) # add text text = Text(object_id=\"my_text\", value=\"Welcome to arena-py!\", position=Position(0,2,0), parent=box) scene.add_object(text) x = 0 @scene.run_forever(interval_ms=500) def periodic(): global x # non allocated variables need to be global box.update_attributes(position=Position(x,3,0)) scene.update_object(box) x += 0.1 # start tasks scene.run_tasks() . ",
    "url": "https://docs.arenaxr.org/content/python/tutorial/intermediate.html#appendix",
    "relUrl": "/content/python/tutorial/intermediate.html#appendix"
  },"530": {
    "doc": "Intermediate Example",
    "title": "Intermediate Example",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/python/tutorial/intermediate.html",
    "relUrl": "/content/python/tutorial/intermediate.html"
  },"531": {
    "doc": "Jitsi Video",
    "title": "Jitsi Video",
    "content": "Apply a jitsi video source to the geometry. ",
    "url": "https://docs.arenaxr.org/content/schemas/message/jitsi-video.html#jitsi-video",
    "relUrl": "/content/schemas/message/jitsi-video.html#jitsi-video"
  },"532": {
    "doc": "Jitsi Video",
    "title": "Jitsi Video Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | jitsiId | string |   | JitsiId of the video source; If defined will override displayName. | No | . | displayName | string |   | ARENA or Jitsi display name of the video source; Will be ignored if jitsiId is given. (* change requires reload* ). | Yes | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/jitsi-video.html#jitsi-video-attributes",
    "relUrl": "/content/schemas/message/jitsi-video.html#jitsi-video-attributes"
  },"533": {
    "doc": "Jitsi Video",
    "title": "Jitsi Video",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/jitsi-video.html",
    "relUrl": "/content/schemas/message/jitsi-video.html"
  },"534": {
    "doc": "arena.attributes.jitsi_video",
    "title": "\narena.attributes.jitsi_video    ",
    "content": "class JitsiVideo(arena.attributes.attribute.Attribute): JitsiVideo attribute class to manage its properties in the ARENA: Apply a jitsi video source to the geometry. Usage: jitsi_video=JitsiVideo(...) . Parameters . | str displayName: ARENA or Jitsi display name of the video source; Will be ignored if jitsiId is given. (* change requires reload* ). (optional) | str jitsiId: JitsiId of the video source; If defined will override displayName. (optional) | . JitsiVideo(jitsiId=None, displayName=None) Inherited Members . arena.base_object.BaseObject add json_encode json ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/jitsi_video.html",
    "relUrl": "/content/python-api/attributes/jitsi_video.html"
  },"535": {
    "doc": "arena.attributes.jitsi_video",
    "title": "arena.attributes.jitsi_video",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/jitsi_video.html",
    "relUrl": "/content/python-api/attributes/jitsi_video.html"
  },"536": {
    "doc": "arena.attributes.landmark",
    "title": "\narena.attributes.landmark    ",
    "content": "class Landmark(arena.attributes.attribute.Attribute): Landmark attribute class to manage its properties in the ARENA: Define entities as a landmark; Landmarks appears in the landmark list and you can move (teleport) to them; You can define the behavior of the teleport: if you will be at a fixed or random distance, looking at the landmark, fixed offset or if it is constrained by a navmesh (when it exists). Usage: landmark=Landmark(...) . Parameters . | str constrainToNavMesh: Teleports should snap to navmesh. Allows [false, any, coplanar] Defaults to 'false' (optional) | str label: Landmark description to display in the landmark list. (optional) | bool lookAtLandmark: Set to true to make users face the landmark when teleported to it. Defaults to 'True' (optional) | dict offsetPosition: Use as a static teleport x,y,z offset. Defaults to '{'x': 0, 'y': 1.6, 'z': 0}' (optional) | float randomRadiusMax: Maximum radius from the landmark to teleport to. (optional) | float randomRadiusMin: Minimum radius from the landmark to teleport to. (randomRadiusMax must &gt; 0). (optional) | bool startingPosition: Set to true to use this landmark as a scene start (spawn) position. If several landmarks with startingPosition=true exist in a scene, one will be randomly selected. (optional) | . Landmark(**kwargs) Inherited Members . arena.base_object.BaseObject add json_encode json ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/landmark.html",
    "relUrl": "/content/python-api/attributes/landmark.html"
  },"537": {
    "doc": "arena.attributes.landmark",
    "title": "arena.attributes.landmark",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/landmark.html",
    "relUrl": "/content/python-api/attributes/landmark.html"
  },"538": {
    "doc": "Landmark",
    "title": "Landmark",
    "content": "Define entities as a landmark; Landmarks appears in the landmark list and you can move (teleport) to them; You can define the behavior of the teleport: if you will be at a fixed or random distance, looking at the landmark, fixed offset or if it is constrained by a navmesh (when it exists). ",
    "url": "https://docs.arenaxr.org/content/schemas/message/landmark.html#landmark",
    "relUrl": "/content/schemas/message/landmark.html#landmark"
  },"539": {
    "doc": "Landmark",
    "title": "Landmark Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | randomRadiusMin | number | 0 | Minimum radius from the landmark to teleport to. (randomRadiusMax must &gt; 0). | Yes | . | randomRadiusMax | number | 0 | Maximum radius from the landmark to teleport to. | Yes | . | offsetPosition | vector3 | {'x': 0, 'y': 1.6, 'z': 0} | Use as a static teleport x,y,z offset. | No | . | constrainToNavMesh | string; One of: ['false', 'any', 'coplanar'] | 'false' | Teleports should snap to navmesh. | No | . | startingPosition | boolean | False | Set to true to use this landmark as a scene start (spawn) position. If several landmarks with startingPosition=true exist in a scene, one will be randomly selected. | No | . | lookAtLandmark | boolean | True | Set to true to make users face the landmark when teleported to it. | Yes | . | label | string | '' | Landmark description to display in the landmark list. | Yes | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/landmark.html#landmark-attributes",
    "relUrl": "/content/schemas/message/landmark.html#landmark-attributes"
  },"540": {
    "doc": "Landmark",
    "title": "Landmark",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/landmark.html",
    "relUrl": "/content/schemas/message/landmark.html"
  },"541": {
    "doc": "arena.event_loop.lazy_worker",
    "title": "\narena.event_loop.lazy_worker    ",
    "content": "class LazyWorker(arena.event_loop.worker.Worker): Wrapper for an ARENA task that runs after an interval (ms). LazyWorker(event_loop, func, event=None, interval=1000, *args, **kwargs) interval async def run(self): Inherited Members . arena.event_loop.worker.Worker event_loop func event args kwargs sleep print_traceback ",
    "url": "https://docs.arenaxr.org/content/python-api/event_loop/lazy_worker.html",
    "relUrl": "/content/python-api/event_loop/lazy_worker.html"
  },"542": {
    "doc": "arena.event_loop.lazy_worker",
    "title": "arena.event_loop.lazy_worker",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/event_loop/lazy_worker.html",
    "relUrl": "/content/python-api/event_loop/lazy_worker.html"
  },"543": {
    "doc": "Light",
    "title": "Light",
    "content": "A light. More properties at A-Frame Light. All wire objects have a set of basic attributes {object_id, action, type, persist, data}. The data attribute defines the object-specific attributes . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/light.html#light",
    "relUrl": "/content/schemas/message/light.html#light"
  },"544": {
    "doc": "Light",
    "title": "Light Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | object_id | string |   | A uuid or otherwise unique identifier for this object. | Yes | . | persist | boolean | True | Persist this object in the database. | Yes | . | type | string; Must be: object | 'object' | AFrame 3D Object | Yes | . | action | string; One of: ['create', 'delete', 'update'] | 'create' | Message action create, update, delete. | Yes | . | ttl | integer |   | When applied to an entity, the entity will remove itself from DOM after the specified number of seconds. Update is allowed, which will reset the timer to start from that moment. | No | . | data | Light data |   | Light Data | Yes | . Light Data Attributes . | Attribute | Type | Default | Description | Required | . | object_type | string; Must be: light | light | 3D object type. | Yes | . | angle | number | 60 | Maximum extent of spot light from its direction (in degrees). Requires type:spot. | No | . | castShadow | boolean | False | Whether this light casts shadows on the scene. | No | . | color | string | '#ffffff' | Light color. For ‘hemisphere’, light color from above. | Yes | . | decay | number | 1 | Amount the light dims along the distance of the light. Requires type:point or type:spot. | No | . | distance | number | 0 | Distance where intensity becomes 0. If distance is 0, then the point light does not decay with distance. Requires type:point or type:spot. | No | . | envMap | string | 'None' | Cube Map to load. | No | . | groundColor | string | '#ffffff' | Light color from below. Requires type:hemisphere. | No | . | intensity | number | 1 | Amount of light provided. | Yes | . | light | light |   | DEPRECATED: data.light.[property] is deprecated, use object_type: light and data.[property] instead. | No | . | penumbra | number | 0 | Percent of the spotlight cone that is attenuated due to penumbra. Requires type:spot. | No | . | shadowBias | number | 0 | Offset depth when deciding whether a surface is in shadow. Tiny adjustments here (in the order of +/-0.0001) may reduce artifacts in shadows. | No | . | shadowCameraBottom | number | -5 | Bottom plane of shadow camera frustum. Requires type:directional. | No | . | shadowCameraFar | number | 500 | Far plane of shadow camera frustum. | No | . | shadowCameraFov | number | 50 | Shadow camera’s FOV. Requires type:point or spot. | No | . | shadowCameraLeft | number | -5 | Left plane of shadow camera frustum. Requires type:directional. | No | . | shadowCameraNear | number | 0.5 | Near plane of shadow camera frustum. | No | . | shadowCameraRight | number | 5 | Right plane of shadow camera frustum. Requires type:directional. | No | . | shadowCameraTop | number | 5 | Top plane of shadow camera frustum. Requires type:directional. | No | . | shadowCameraVisible | boolean | False | Displays a visual aid showing the shadow camera’s position and frustum. This is the light’s view of the scene, used to project shadows. | No | . | shadowMapHeight | number | 512 | Shadow map’s vertical resolution. Larger shadow maps display more crisp shadows, at the cost of performance. | No | . | shadowMapWidth | number | 512 | Shadow map’s horizontal resolution. | No | . | shadowRadius | number | 1 |   | No | . | target | string | 'None' | Id of element the spot should point to. Set to null to transform spotlight by orientation, pointing to it’s -Z axis. Requires type:spot. | No | . | type | string; One of: ['ambient', 'directional', 'hemisphere', 'point', 'spot'] | 'directional' | The type of light, or what shape the light should take. | Yes | . | parent | string |   | Parent’s object_id. Child objects inherit attributes of their parent, for example scale and translation. | No | . | position | position |   | 3D object position. | Yes | . | rotation | rotation |   | 3D object rotation in quaternion representation; Right-handed coordinate system. Euler degrees are deprecated in wire message format. | Yes | . | scale | scale |   | 3D object scale. | No | . | animation | animation |   | Animate and tween values. | No | . | armarker | armarker |   | A location marker (such as an AprilTag, a lightAnchor, or an UWB tag), used to anchor scenes, or scene objects, in the real world. | No | . | click-listener | click-listener |   | Object will listen for mouse events like clicks. | No | . | box-collision-listener | box-collision-listener |   | Listen for bounding-box collisions with user camera and hands. Must be applied to an object or model with geometric mesh. Collisions are determined by course bounding-box overlaps. | No | . | collision-listener | string |   | Name of the collision-listener, default can be empty string. Collisions trigger click events. | No | . | blip | blip |   | When the object is created or deleted, it will animate in/out of the scene instead of appearing/disappearing instantly. Must have a geometric mesh. | No | . | static-body | static-body |   | A fixed-position or animated object. Other objects may collide with static bodies, but static bodies themselves are unaffected by gravity and collisions. | No | . | dynamic-body | dynamic-body |   | A freely-moving object. Dynamic bodies have mass, collide with other objects, bounce or slow during collisions, and fall if gravity is enabled. | No | . | goto-landmark | goto-landmark |   | Teleports user to the landmark with the given name. Requires click-listener. | No | . | goto-url | goto-url |   | Load new URL when object is clicked. Requires click-listener. | No | . | hide-on-enter-ar | boolean; Must be: True | True | Hide object when entering AR. Remove component to not hide. | No | . | hide-on-enter-vr | boolean; Must be: True | True | Hide object when entering VR. Remove component to not hide. | No | . | show-on-enter-ar | boolean; Must be: True | True | Show object when entering AR. Hidden otherwise. | No | . | show-on-enter-vr | boolean; Must be: True | True | Show object when entering VR. Hidden otherwise. | No | . | impulse | impulse |   | Apply an impulse to an object to set it in motion. This happens in conjunction with an event. Requires click-listener and physics. | No | . | landmark | landmark |   | Define entities as a landmark; Landmarks appears in the landmark list and you can move (teleport) to them; You can define the behavior of the teleport: if you will be at a fixed or random distance, looking at the landmark, fixed offset or if it is constrained by a navmesh (when it exists). | No | . | material-extras | material-extras |   | Define extra material properties, namely texture encoding, whether to render the material’s color and render order. | No | . | shadow | shadow |   | The shadow component enables shadows for an entity and its children. Adding the shadow component alone is not enough to display shadows in your scene. We must have at least one light with castShadow: true enabled. | No | . | sound | sound |   | The sound component defines the entity as a source of sound or audio. The sound component can be positional and is thus affected by the component’s position. | No | . | textinput | textinput |   | Opens an HTML prompt when clicked. Sends text input as an event on MQTT. Requires click-listener. | No | . | url | string |   | Use File Store paths under ‘store/users/username’, see CDN and other storage options in the description above. | No | . | remote-render | remote-render |   | Whether or not an object should be remote rendered [Experimental]. | No | . | video-control | video-control |   | Adds a video to an entity and controls its playback. | No | . | attribution | attribution |   | Attribution Component. Saves attribution data in any entity. | No | . | spe-particles | spe-particles |   | GPU based particle systems in A-Frame. | No | . | look-at | string |   | The look-at component defines the behavior for an entity to dynamically rotate or face towards another entity or position. Use ‘#my-camera’ to face the user camera, otherwise can take either a vec3 position or a query selector to another entity. | No | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/light.html#light-attributes",
    "relUrl": "/content/schemas/message/light.html#light-attributes"
  },"545": {
    "doc": "Light",
    "title": "Light",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/light.html",
    "relUrl": "/content/schemas/message/light.html"
  },"546": {
    "doc": "arena.objects.light",
    "title": "\narena.objects.light    ",
    "content": "class Light(arena.objects.arena_object.Object): Light object class to manage its properties in the ARENA: A light. More properties at https://aframe.io/docs/1.5.0/components/light.html A-Frame Light. Parameters . | float angle: Maximum extent of spot light from its direction (in degrees). Requires type: spot. Defaults to '60' (optional) | bool castShadow: Whether this light casts shadows on the scene. (optional) | str color: Light color. For 'hemisphere', light color from above. Defaults to '#ffffff' (optional) | float decay: Amount the light dims along the distance of the light. Requires type:point or type: spot. Defaults to '1' (optional) | float distance: Distance where intensity becomes 0. If distance is 0, then the point light does not decay with distance. Requires type:point or type: spot. (optional) | str envMap: Cube Map to load. (optional) | str groundColor: Light color from below. Requires type: hemisphere. Defaults to '#ffffff' (optional) | float intensity: Amount of light provided. Defaults to '1' (optional) | dict light: light (optional) | float penumbra: Percent of the spotlight cone that is attenuated due to penumbra. Requires type: spot. (optional) | float shadowBias: Offset depth when deciding whether a surface is in shadow. Tiny adjustments here (in the order of +/-0.0001) may reduce artifacts in shadows. (optional) | float shadowCameraBottom: Bottom plane of shadow camera frustum. Requires type: directional. Defaults to '-5' (optional) | float shadowCameraFar: Far plane of shadow camera frustum. Defaults to '500' (optional) | float shadowCameraFov: Shadow camera's FOV. Requires type: point or spot. Defaults to '50' (optional) | float shadowCameraLeft: Left plane of shadow camera frustum. Requires type: directional. Defaults to '-5' (optional) | float shadowCameraNear: Near plane of shadow camera frustum. Defaults to '0.5' (optional) | float shadowCameraRight: Right plane of shadow camera frustum. Requires type: directional. Defaults to '5' (optional) | float shadowCameraTop: Top plane of shadow camera frustum. Requires type: directional. Defaults to '5' (optional) | bool shadowCameraVisible: Displays a visual aid showing the shadow camera's position and frustum. This is the light's view of the scene, used to project shadows. (optional) | float shadowMapHeight: Shadow map's vertical resolution. Larger shadow maps display more crisp shadows, at the cost of performance. Defaults to '512' (optional) | float shadowMapWidth: Shadow map's horizontal resolution. Defaults to '512' (optional) | float shadowRadius: shadowRadius (castShadow=true) Defaults to '1' (optional) | str target: Id of element the spot should point to. Set to null to transform spotlight by orientation, pointing to it's -Z axis. Requires type: spot. (optional) | str type: The type of light, or what shape the light should take. Allows [ambient, directional, hemisphere, point, spot] Defaults to 'directional' (optional) | . Light(**kwargs) object_type = &#39;light&#39; Inherited Members . arena.objects.arena_object.Object type all_objects evt_handler update_handler animations delayed_prop_tasks update_attributes dispatch_animation remove_animation_at_index clear_animations clickable json_preprocess json_postprocess json get add remove exists arena.base_object.BaseObject json_encode ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/light.html",
    "relUrl": "/content/python-api/objects/light.html"
  },"547": {
    "doc": "arena.objects.light",
    "title": "arena.objects.light",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/light.html",
    "relUrl": "/content/python-api/objects/light.html"
  },"548": {
    "doc": "Line",
    "title": "Line",
    "content": "Draw a line. All wire objects have a set of basic attributes {object_id, action, type, persist, data}. The data attribute defines the object-specific attributes . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/line.html#line",
    "relUrl": "/content/schemas/message/line.html#line"
  },"549": {
    "doc": "Line",
    "title": "Line Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | object_id | string |   | A uuid or otherwise unique identifier for this object. | Yes | . | persist | boolean | True | Persist this object in the database. | Yes | . | type | string; Must be: object | 'object' | AFrame 3D Object | Yes | . | action | string; One of: ['create', 'delete', 'update'] | 'create' | Message action create, update, delete. | Yes | . | ttl | integer |   | When applied to an entity, the entity will remove itself from DOM after the specified number of seconds. Update is allowed, which will reset the timer to start from that moment. | No | . | data | Line data |   | Line Data | Yes | . Line Data Attributes . | Attribute | Type | Default | Description | Required | . | object_type | string; Must be: line | line | 3D object type. | Yes | . | color | string | '#74BEC1' | Line color. | Yes | . | end | vector3 | {'x': -0.5, 'y': -0.5, 'z': 0} | End coordinate. | Yes | . | opacity | number | 1 | Line opacity. | No | . | start | vector3 | {'x': 0, 'y': 0.5, 'z': 0} | Start point coordinate. | Yes | . | visible | boolean | True | Whether the material is visible. | No | . | parent | string |   | Parent’s object_id. Child objects inherit attributes of their parent, for example scale and translation. | No | . | position | position |   | 3D object position. | No | . | rotation | rotation |   | 3D object rotation in quaternion representation; Right-handed coordinate system. Euler degrees are deprecated in wire message format. | No | . | scale | scale |   | 3D object scale. | No | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/line.html#line-attributes",
    "relUrl": "/content/schemas/message/line.html#line-attributes"
  },"550": {
    "doc": "Line",
    "title": "Line",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/line.html",
    "relUrl": "/content/schemas/message/line.html"
  },"551": {
    "doc": "arena.objects.line",
    "title": "\narena.objects.line    ",
    "content": "class Line(arena.objects.arena_object.Object): Line object class to manage its properties in the ARENA: Draw a line. Parameters . | str color: Line color. Defaults to '#74BEC1' (optional) | dict end: End coordinate. Defaults to '{'x': -0.5, 'y': -0.5, 'z': 0}' (optional) | float opacity: Line opacity. Defaults to '1' (optional) | dict start: Start point coordinate. Defaults to '{'x': 0, 'y': 0.5, 'z': 0}' (optional) | bool visible: Whether the material is visible. Defaults to 'True' (optional) | . Line(start=(0, 0, 0), end=(10, 10, 10), **kwargs) object_type = &#39;line&#39; Inherited Members . arena.objects.arena_object.Object type all_objects evt_handler update_handler animations delayed_prop_tasks update_attributes dispatch_animation remove_animation_at_index clear_animations clickable json_preprocess json_postprocess json get add remove exists arena.base_object.BaseObject json_encode ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/line.html",
    "relUrl": "/content/python-api/objects/line.html"
  },"552": {
    "doc": "arena.objects.line",
    "title": "arena.objects.line",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/line.html",
    "relUrl": "/content/python-api/objects/line.html"
  },"553": {
    "doc": "XR Localization",
    "title": "XR Localization for ARENA",
    "content": "ARENA has seamless support for a spectrum of experiences, from completely immersing the user in a digital world (Virtual Reality; VR) to enhancing the real world with interactive digital content (Augmented Reality; AR). A spectrum often identified as miXed Reality (XR). Try the following for a quick sample of AR using ARENA by opening a pre-made scene and anchoring it in the real world with an optical marker. ",
    "url": "https://docs.arenaxr.org/content/overview/localization.html#xr-localization-for-arena",
    "relUrl": "/content/overview/localization.html#xr-localization-for-arena"
  },"554": {
    "doc": "XR Localization",
    "title": "Using April Tags",
    "content": "Modern phones and tablets support pass-through augmented reality (AR) with 3D digital content overlaid on top of back-facing camera backgrounds, enhanced with built-in accelerometer, gyroscope and other sensors to track relative motion of viewing devices. (Google’s AR framework ARCore runs on devices with Android version 7.0 API level 24 or above, and Apple’s AR framework ARKit runs on devices running iOS version 11.0 or higher.) . If you are using an iOS device to view AR content, download the XR Browser. If you are using an Android device, you can use Google Chrome for Android. To view an ARENA scene in augmented reality (AR) mode, enter the URL of the scene using the correct browser, allow the necessary permissions and tap on the [AR] button on the lower right side of the screen. (Landscape mode works best for AR mode. Only use Landscape in XR Browser) . True immersive mixed reality content requires accurate positioning of 3D content anchored to the real world environment. ARENA natively supports real-world anchoring of 3D digital content with AprilTags, which are black and white square-pattern markers easily recognized by cameras to gain position and rotation relative to the marker. Print out this PDF of the default “zero” AprilTag, and place it on the floor. The page should look like this: . note . More AprilTag markers can be found here: https://github.com/arenaxr/apriltag-gen/tree/master/output . To test AprilTag localization, enter this scene: https://arenaxr.org/public/artest?armode=true . Optionally, you can also enter scenes with a QR code instead of manually typing the link in the browser search bar: . Now, using ARENA on a mobile Android or iOS device in AR mode, look at the marker so that it is in full view of the camera, and watch as the 3D digital content’s origin anchors itself correctly to the AprilTag marker. Check out more info about AprilTags and ARENA setup. ",
    "url": "https://docs.arenaxr.org/content/overview/localization.html#using-april-tags",
    "relUrl": "/content/overview/localization.html#using-april-tags"
  },"555": {
    "doc": "XR Localization",
    "title": "Using the VR Calibrator",
    "content": "Virtual Reality (VR) headsets can also be anchored into the scene. warning . Not all VR headsets natively support AprilTag anchoring (including Meta headsets) . We have an alternative for manual calibration. This calibration allows you to manually align the virtual world to the physical world. VR scene calibration currently requires connecting and running a python script to the scene being viewed in virtual reality. First, if you have not done so already, follow the instructions in the Python setup and install the arena-py library. pip3 install arena-py . Clone the arena-py repository on github to gain access to all of the examples and utilities: https://github.com/arenaxr/arena-py . Inside this repository, change the directory to arena-py/tools/calibrate-vr. Here, there is a python script named “calibrate.py”. Run the following command in a terminal or command prompt: . python calibrate.py -mh arenaxr.org -n username -s scenename . The following parameters should be changed to reflect your scene: . | -mh arenaxr.org (do not change this) | -n username (change this to your username) | -s scenename (change this to your scene name) | . Now, in your VR headset, use the default Browser app, and open the scene of interest (the same scene as you set the python VR calibrator script to). When the scene has loaded in your VR browser, enable the necessary permissions and click on the [AR] button on the lower right hand side of the ARENA page. Pictured above: Oculus Quest Pro browser view. While the Python calibrator script is running, you will see two big colored buttons: a green triangular “Play” button and a red octagonal “Stop” button. Press the green button to begin VR calibration. When the big green button is pressed, a multi-axis calibrator gizmo will be visible. Use the VR controller to repeatedly click on the gizmo’s eight buttons . (move x+, move x-, move y+, move y-, move z+, move z-, rotate y+, rotate y-) . until the multi-axis VR calibrator gizmo is aligned with the AprilTag marker. When you are done aligning the multi-axis VR calibrator gizmo with the April Tag, click on the big red octagonal “Stop” button to hide the calibrator gizmo and lock it in place. If the calibration drifts too much, simply click on the green button to recalibrate. Note that recalibration will likely be necessary every time the browser is refreshed. goal . Learn how a device like the Quest 2 and other XR goggles require different strategies to localize content. To come full circle, you should be able to use your controller to activate your animation-rigged 3D model in the room using AR passthrough. ",
    "url": "https://docs.arenaxr.org/content/overview/localization.html#using-the-vr-calibrator",
    "relUrl": "/content/overview/localization.html#using-the-vr-calibrator"
  },"556": {
    "doc": "XR Localization",
    "title": "XR Localization",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/overview/localization.html",
    "relUrl": "/content/overview/localization.html"
  },"557": {
    "doc": "Material extras",
    "title": "Material extras",
    "content": "Define extra material properties, namely texture encoding, whether to render the material’s color and render order. The properties set here access directly Three.js material component. More properties at THREE.js Material. ",
    "url": "https://docs.arenaxr.org/content/schemas/message/material-extras.html#material-extras",
    "relUrl": "/content/schemas/message/material-extras.html#material-extras"
  },"558": {
    "doc": "Material extras",
    "title": "Material extras Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | overrideSrc | string | '' | Overrides the material source in all meshes of an object (e.g. a basic shape or a GLTF); Use, for example, to change the texture of a GLTF. | No | . | colorSpace | string; One of: ['SRGBColorSpace', 'LinearSRGBColorSpace', 'DisplayP3ColorSpace', 'NoColorSpace'] | 'SRGBColorSpace' | The material colorspace. | Yes | . | colorWrite | boolean | True | Whether to render the material’s color. | No | . | renderOrder | number | 1 | Allows the default rendering order of scene graph objects to be overridden. | No | . | transparentOccluder | boolean | False | If true, will set colorWrite=false and renderOrder=0 to make the material a transparent occluder. | No | . | gltfOpacity | number | 1 | Opacity value to apply to the model. 1 is fully opaque, 0 is fully transparent. | Yes | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/material-extras.html#material-extras-attributes",
    "relUrl": "/content/schemas/message/material-extras.html#material-extras-attributes"
  },"559": {
    "doc": "Material extras",
    "title": "Material extras",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/material-extras.html",
    "relUrl": "/content/schemas/message/material-extras.html"
  },"560": {
    "doc": "arena.attributes.material",
    "title": "\narena.attributes.material    ",
    "content": "class Material(arena.attributes.attribute.Attribute): Material attribute class to manage its properties in the ARENA: The material properties of the object's surface. More properties at https://aframe.io/docs/1.5.0/components/material.html A-Frame Material. Usage: material=Material(...) . Parameters . | float alphaTest: Alpha test threshold for transparency. (optional) | float anisotropy: The anisotropic filtering sample rate to use for the textures. A value of 0 means the default value will be used, see renderer. (optional) | str blending: The blending mode for the material's RGB and Alpha sent to the WebGLRenderer. Allows [none, normal, additive, subtractive, multiply] Defaults to 'normal' (optional) | str color: Base diffuse color. Defaults to '#ffffff' (optional) | str combine: How the environment map mixes with the material. Requires shader: phong. Allows [mix, add, multiply] Defaults to 'mix' (optional) | bool depthTest: Whether depth testing is enabled when rendering the material. Defaults to 'True' (optional) | bool depthWrite: Render when depth test succeeds. Defaults to 'True' (optional) | bool dithering: Whether material is dithered with noise. Removes banding from gradients like ones produced by lighting. Defaults to 'True' (optional) | str emissive: The color of the emissive lighting component. Used to make objects produce light even without other lighting in the scene. Requires shader: standard or phong Defaults to '#000000' (optional) | float emissiveIntensity: Intensity of the emissive lighting component. Requires shader: standard or phong Defaults to '1' (optional) | bool flatShading: Use THREE.FlatShading rather than THREE.StandardShading. (optional) | bool fog: Whether or not material is affected by fog. Defaults to 'True' (optional) | int height: Height of video (in pixels), if defining a video texture. Requires shader: standard or flat. Defaults to '256' (optional) | float metalness: How metallic the material is from 0 to 1. Requires shader: standard. (optional) | bool npot: Use settings for non-power-of-two (NPOT) texture. (optional) | dict offset: Texture offset to be used. Defaults to '{'x': 0, 'y': 0}' (optional) | float opacity: Extent of transparency. If the transparent property is not true, then the material will remain opaque and opacity will only affect color. Defaults to '1' (optional) | float reflectivity: How much the environment map affects the surface. Requires shader: phong. Defaults to '0.9' (optional) | bool refract: Whether the defined envMap should refract. Requires shader: phong. (optional) | float refractionRatio: 1/refractive index of the material. Requires shader: phong. Defaults to '0.98' (optional) | dict repeat: How many times a texture (defined by src) repeats in the X and Y direction. Defaults to '{'x': 1, 'y': 1}' (optional) | float roughness: How rough the material is from 0 to 1. A rougher material will scatter reflected light in more directions than a smooth material. Requires shader: standard. (optional) | str shader: Which material to use. Defaults to the standard material. Can be set to the flat material or to a registered custom shader material. Allows [flat, standard, phong] Defaults to 'standard' (optional) | float shininess: How shiny the specular highlight is; a higher value gives a sharper highlight. Requires shader: phong. Defaults to '30' (optional) | str side: Which sides of the mesh to render. Allows [front, back, double] Defaults to 'front' (optional) | str specular: This defines how shiny the material is and the color of its shine. Requires shader: phong. Defaults to '#111111' (optional) | str src: URI, relative or full path of an image/video file. e.g. 'store/users/wiselab/images/360falls.mp4'. (optional) | bool toneMapped: Whether to ignore toneMapping, set to false you are using renderer.toneMapping and an element should appear to emit light. Requires shader: flat. Defaults to 'True' (optional) | bool transparent: Whether material is transparent. Transparent entities are rendered after non-transparent entities. (optional) | bool vertexColorsEnabled: Whether to use vertex or face colors to shade the material. (optional) | bool visible: Whether material is visible. Raycasters will ignore invisible materials. Defaults to 'True' (optional) | int width: Width of video (in pixels), if defining a video texture. Requires shader: standard or flat. Defaults to '512' (optional) | bool wireframe: Whether to render just the geometry edges. (optional) | int wireframeLinewidth: Width in px of the rendered line. Defaults to '2' (optional) | . Material(**kwargs) Inherited Members . arena.base_object.BaseObject add json_encode json ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/material.html",
    "relUrl": "/content/python-api/attributes/material.html"
  },"561": {
    "doc": "arena.attributes.material",
    "title": "arena.attributes.material",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/material.html",
    "relUrl": "/content/python-api/attributes/material.html"
  },"562": {
    "doc": "Material",
    "title": "Material",
    "content": "The material properties of the object’s surface. More properties at A-Frame Material. ",
    "url": "https://docs.arenaxr.org/content/schemas/message/material.html#material",
    "relUrl": "/content/schemas/message/material.html#material"
  },"563": {
    "doc": "Material",
    "title": "Material Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | alphaTest | number | 0 | Alpha test threshold for transparency. | No | . | anisotropy | number | 0 | The anisotropic filtering sample rate to use for the textures. A value of 0 means the default value will be used, see renderer. | No | . | blending | string; One of: ['none', 'normal', 'additive', 'subtractive', 'multiply'] | 'normal' | The blending mode for the material’s RGB and Alpha sent to the WebGLRenderer. | No | . | color | string | '#ffffff' | Base diffuse color. | No | . | combine | string; One of: ['mix', 'add', 'multiply'] | 'mix' | How the environment map mixes with the material. Requires shader: phong. | No | . | depthTest | boolean | True | Whether depth testing is enabled when rendering the material. | No | . | depthWrite | boolean | True | Render when depth test succeeds. | No | . | dithering | boolean | True | Whether material is dithered with noise. Removes banding from gradients like ones produced by lighting. | No | . | emissive | string | '#000000' | The color of the emissive lighting component. Used to make objects produce light even without other lighting in the scene. Requires shader: standard or phong | No | . | emissiveIntensity | number | 1 | Intensity of the emissive lighting component. Requires shader: standard or phong | No | . | flatShading | boolean | False | Use THREE.FlatShading rather than THREE.StandardShading. | No | . | fog | boolean | True | Whether or not material is affected by fog. | No | . | height | integer | 256 | Height of video (in pixels), if defining a video texture. Requires shader: standard or flat. | No | . | metalness | number | 0 | How metallic the material is from 0 to 1. Requires shader: standard. | No | . | npot | boolean | False | Use settings for non-power-of-two (NPOT) texture. | No | . | offset | object | {'x': 0, 'y': 0} | Texture offset to be used. | No | . | opacity | number | 1 | Extent of transparency. If the transparent property is not true, then the material will remain opaque and opacity will only affect color. | No | . | reflectivity | number | 0.9 | How much the environment map affects the surface. Requires shader: phong. | No | . | refract | boolean | False | Whether the defined envMap should refract. Requires shader: phong. | No | . | refractionRatio | number | 0.98 | 1/refractive index of the material. Requires shader: phong. | No | . | repeat | object | {'x': 1, 'y': 1} | How many times a texture (defined by src) repeats in the X and Y direction. | No | . | roughness | number | 0 | How rough the material is from 0 to 1. A rougher material will scatter reflected light in more directions than a smooth material. Requires shader: standard. | No | . | shader | string; One of: ['flat', 'standard', 'phong'] | 'standard' | Which material to use. Defaults to the standard material. Can be set to the flat material or to a registered custom shader material. | No | . | shininess | number | 30 | How shiny the specular highlight is; a higher value gives a sharper highlight. Requires shader: phong. | No | . | side | string; One of: ['front', 'back', 'double'] | 'front' | Which sides of the mesh to render. | No | . | specular | string | '#111111' | This defines how shiny the material is and the color of its shine. Requires shader: phong. | No | . | src | string |   | URI, relative or full path of an image/video file. e.g. ‘store/users/wiselab/images/360falls.mp4’. | No | . | toneMapped | boolean | True | Whether to ignore toneMapping, set to false you are using renderer.toneMapping and an element should appear to emit light. Requires shader: flat. | No | . | transparent | boolean | False | Whether material is transparent. Transparent entities are rendered after non-transparent entities. | No | . | vertexColorsEnabled | boolean | False | Whether to use vertex or face colors to shade the material. | No | . | visible | boolean | True | Whether material is visible. Raycasters will ignore invisible materials. | No | . | width | integer | 512 | Width of video (in pixels), if defining a video texture. Requires shader: standard or flat. | No | . | wireframe | boolean | False | Whether to render just the geometry edges. | No | . | wireframeLinewidth | integer | 2 | Width in px of the rendered line. | No | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/material.html#material-attributes",
    "relUrl": "/content/schemas/message/material.html#material-attributes"
  },"564": {
    "doc": "Material",
    "title": "Material",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/material.html",
    "relUrl": "/content/schemas/message/material.html"
  },"565": {
    "doc": "arena.attributes.material_extras",
    "title": "\narena.attributes.material_extras    ",
    "content": "class MaterialExtras(arena.attributes.attribute.Attribute): MaterialExtras attribute class to manage its properties in the ARENA: Define extra material properties, namely texture encoding, whether to render the material's color and render order. The properties set here access directly Three.js material component. More properties at https://threejs.org/docs/#api/en/materials/Material THREE.js Material. Usage: material_extras=MaterialExtras(...) . Parameters . | str colorSpace: The material colorspace. Allows [SRGBColorSpace, LinearSRGBColorSpace, DisplayP3ColorSpace, NoColorSpace] Defaults to 'SRGBColorSpace' (optional) | bool colorWrite: Whether to render the material's color. Defaults to 'True' (optional) | float gltfOpacity: Opacity value to apply to the model. 1 is fully opaque, 0 is fully transparent. Defaults to '1' (optional) | str overrideSrc: Overrides the material source in all meshes of an object (e.g. a basic shape or a GLTF); Use, for example, to change the texture of a GLTF. (optional) | float renderOrder: Allows the default rendering order of scene graph objects to be overridden. Defaults to '1' (optional) | bool transparentOccluder: If true, will set colorWrite=false and renderOrder=0 to make the material a transparent occluder. (optional) | . MaterialExtras(**kwargs) Inherited Members . arena.base_object.BaseObject add json_encode json ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/material_extras.html",
    "relUrl": "/content/python-api/attributes/material_extras.html"
  },"566": {
    "doc": "arena.attributes.material_extras",
    "title": "arena.attributes.material_extras",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/material_extras.html",
    "relUrl": "/content/python-api/attributes/material_extras.html"
  },"567": {
    "doc": "Matterport Large Scans",
    "title": "Scanning a Large Space with Matterport",
    "content": "For higher fidelity models, we use the Leica BLK360, a terrestrial laser scanner (TLS) with registered 360 color images. Using the BLK360, along with 3D reconstruction software (e.g. Leica’s Cyclone FIELD 360, or Matterport), we create 3D models of physical spaces that can easily be imported into ARENA. $$$ . Be sure to check the software pricing model, since these software packages may charge you to retrieve the final GLTF. | We place the laser scanner at different spots around the venue that are merged to create the final model. | Each scan can take 30 seconds, or up to 2 minutes, depending on the resolution of the scan (we often use the fastest setting). | The scan density might vary significantly from space to space, where large open spaces can be captured with few scans, and more complex areas require more scans due to occlusion. | Convert the model to GLTF. This can be done using some of the paid software above, or you can use an .obj model file convert that to GLTF using Blender. | Before loading the model into ARENA, manual adjustments to simplify the model can be made using, e.g., Blender. | Using Blender, you may want to lower the polygon count, or otherwise reduce the model size to increase the speed it can be loaded into a browser through the ARENA. | . Example . A model with over 400 square meters took less than 30 minutes to capture for us. A typical venue model (two floors, over 400 square meters) is less than 100MB, larger models can be split and loaded dynamically using a Level-of-Detail (LOD) mechanism that allows to load increasingly more detailed models as a users approaches. ",
    "url": "https://docs.arenaxr.org/content/3d-content/matterport.html#scanning-a-large-space-with-matterport",
    "relUrl": "/content/3d-content/matterport.html#scanning-a-large-space-with-matterport"
  },"568": {
    "doc": "Matterport Large Scans",
    "title": "Matterport Large Scans",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/3d-content/matterport.html",
    "relUrl": "/content/3d-content/matterport.html"
  },"569": {
    "doc": "Navigation Meshes",
    "title": "Navigation Meshes",
    "content": "Navigation meshes are used to confine walking users along a surface. The surface must be a single mesh in global coordinate space contained within a GLTF file. Unlike other GLTF files, the navigation mesh can not be scaled, moved or rotated. The mesh must also have only positive Y-axis coordinates (does not go below the ground). In the current implementation, the starting position of the user must have a Y-coordinate that matches that corresponding (X-Z coordinate) of the mesh at the location. ",
    "url": "https://docs.arenaxr.org/content/3d-content/mesh-nav.html",
    "relUrl": "/content/3d-content/mesh-nav.html"
  },"570": {
    "doc": "Navigation Meshes",
    "title": "Mesh Requirements",
    "content": ". | Single Mesh Geometry | Global Coordinate Space (apply all local coordinate transforms to flatten mesh) | Mesh Y-coordinate must match user starting position Y-coordinate at X-Z location | Mesh is often transparent (not required) | . ",
    "url": "https://docs.arenaxr.org/content/3d-content/mesh-nav.html#mesh-requirements",
    "relUrl": "/content/3d-content/mesh-nav.html#mesh-requirements"
  },"571": {
    "doc": "Navigation Meshes",
    "title": "Blender Construction",
    "content": "These instructions will walk you through manually creating a navigation mesh. Tools and plugins exist that can help automatically generate navigation meshes for complex scenes. First, generate a new collection for your nav mesh and generate a plane for initial construction. ARENA has Y-axis up while Blender has Z-asis up. The plane is located at Z-axis (Y in arena) of 0. Edit the plane to model the surface which should confine users. It is often best to make the surface slightly smaller than the main model floor. Use a combination of the knife tool and surface extruding to create a 3D shape. Note that the user can only move up slanted inclines and will be blocked by any 90 degree step. Make sure to name the nav-mesh and vertex set the same thing (i.e. nav-mesh). Once the model is complete, convert it to global coordinates by pressing Ctrl-A and selecting “All Transforms”. Confirm that after applying all transforms, that the model is located at 0,0,0, has no rotation and has a scale of 1,1,1. Next apply a material (BSDF shader) and set the Alpha to 0 and select Blend Mode “Alpha Clip” if you wish to hide the nav mesh. Add the navigation mesh in the ARENA builder in the scene-options object as a URL to the file. ",
    "url": "https://docs.arenaxr.org/content/3d-content/mesh-nav.html#blender-construction",
    "relUrl": "/content/3d-content/mesh-nav.html#blender-construction"
  },"572": {
    "doc": "Navigation Meshes",
    "title": "Navmesh snapping via landmark teleports or starting positions",
    "content": "If a navigation mesh is properly created with the default origin in mind (0,0,0 coordinates), a user will load in to that starting position already constrained to the navmesh. If there is a vertical offset, however, then the navigation constraint may not apply unless specified with a starting position landmark. With a landmark property constrainToNavMesh set, a teleport to landmark or starting random position can forcibly snap a user to the nearest position on the navigation mesh. ",
    "url": "https://docs.arenaxr.org/content/3d-content/mesh-nav.html#navmesh-snapping-via-landmark-teleports-or-starting-positions",
    "relUrl": "/content/3d-content/mesh-nav.html#navmesh-snapping-via-landmark-teleports-or-starting-positions"
  },"573": {
    "doc": "PubSub Messages",
    "title": "Formatting PubSub Messages",
    "content": "For debugging purposes, or to create your own ARENA client software, it can be helpful to interact with ARENA’s PubSub messaging directly. Here we describe some examples of doing this. ",
    "url": "https://docs.arenaxr.org/content/schemas/message-examples.html#formatting-pubsub-messages",
    "relUrl": "/content/schemas/message-examples.html#formatting-pubsub-messages"
  },"574": {
    "doc": "PubSub Messages",
    "title": "Messaging Format Overview",
    "content": "All ARENA objects have similar well-defined schemas, and these are the basis for the over-the-wire message format shown below. This is the message format transmitted over the PubSub to create/update/delete objects. If you leave out required fields, defaults will be used. { \"object_id\": \"dinosaur\", \"persist\": true, \"type\": \"object\", \"action\": \"update\", \"data\": { \"object_type\": \"gltf-model\", \"url\": \"https://www.dropbox.com/s/pgytn552kzukm8f/blumbach.glb?dl=0\", \"position\": { \"x\": 0, \"y\": 1.7, \"z\": -5 }, \"rotation\": { \"x\": 0, \"y\": 0.38268, \"z\": 0, \"w\": 0.92388 }, \"scale\": { \"x\": 1, \"y\": 1, \"z\": 1 }, \"shadow\": { \"cast\": true, \"receive\": true } } } . ",
    "url": "https://docs.arenaxr.org/content/schemas/message-examples.html#messaging-format-overview",
    "relUrl": "/content/schemas/message-examples.html#messaging-format-overview"
  },"575": {
    "doc": "PubSub Messages",
    "title": "Sample Publish/Subscribe",
    "content": "To run the commands below, you may need to install the ARENA Python client which includes these scripts. Subscribe to Scene Object Messages . arena-py-sub -mh arenaxr.org -s example . Publish a Scene Object Message . arena-py-pub -mh arenaxr.org -s example -m '{\"object_id\": \"gltf-model_Earth\", \"action\": \"create\", \"type\": \"object\", \"data\": {\"object_type\": \"gltf-model\", \"position\": {\"x\":0, \"y\": 0.1, \"z\": 0}, \"url\": \"store/models/Earth.glb\", \"scale\": {\"x\": 5, \"y\": 5, \"z\": 5}}} . ",
    "url": "https://docs.arenaxr.org/content/schemas/message-examples.html#sample-publishsubscribe",
    "relUrl": "/content/schemas/message-examples.html#sample-publishsubscribe"
  },"576": {
    "doc": "PubSub Messages",
    "title": "Sample scene: Earth and Moon with Markers",
    "content": "MQTT messages that define the scene: . Create models . { \"object_id\": \"gltf-model_Earth\", \"action\": \"create\", \"type\": \"object\", \"data\": { \"object_type\": \"gltf-model\", \"position\": { \"x\": 0, \"y\": 0.1, \"z\": 0 }, \"url\": \"store/models/Earth.glb\", \"scale\": { \"x\": 5, \"y\": 5, \"z\": 5 } } } . { \"object_id\": \"gltf-model_Moon\", \"action\": \"create\", \"type\": \"object\", \"data\": { \"parent\": \"gltf-model_Earth\", \"object_type\": \"gltf-model\", \"position\": { \"x\": 0, \"y\": 0.05, \"z\": 0.6 }, \"scale\": { \"x\": 0.05, \"y\": 0.05, \"z\": 0.05 }, \"url\": \"store/models/Moon.glb\" } } . Define animation and movement . { \"object_id\": \"gltf-model_Earth\", \"action\": \"update\", \"type\": \"object\", \"data\": { \"animation\": { \"property\": \"rotation\", \"to\": \"0 360 0\", \"loop\": true, \"dur\": 20000, \"easing\": \"linear\" } } } . { \"object_id\": \"gltf-model_Earth\", \"action\": \"update\", \"type\": \"object\", \"data\": { \"startEvents\": \"click\", \"property\": \"scale\", \"dur\": 1000, \"from\": \"10 10 10\", \"to\": \"5 5 5\", \"easing\": \"easeInOutCirc\", \"loop\": 5, \"dir\": \"alternate\" } } . Add a click-listener . { \"object_id\": \"gltf-model_Earth\", \"action\": \"update\", \"type\": \"object\", \"data\": { \"click-listener\": \"\" } } . Create marker objects . { \"object_id\": \"box0\", \"action\": \"create\", \"type\": \"object\", \"data\": { \"object_type\": \"box\", \"scale\": { \"x\": 0.2, \"y\": 0.2, \"z\": 0.2 }, \"position\": { \"x\": 0, \"y\": 0, \"z\": 0 }, \"material\": { \"color\": \"blue\" } } } . { \"object_id\": \"box1\", \"action\": \"create\", \"type\": \"object\", \"data\": { \"material\": { \"color\": \"red\" }, \"object_type\": \"box\", \"scale\": { \"x\": 0.2, \"y\": 0.2, \"z\": 0.2 }, \"position\": { \"x\": -0.7, \"y\": 1.67, \"z\": 2.11 } } } . { \"object_id\": \"box2\", \"action\": \"create\", \"type\": \"object\", \"data\": { \"material\": { \"color\": \"red\" }, \"object_type\": \"box\", \"scale\": { \"x\": 0.2, \"y\": 0.2, \"z\": 0.2 }, \"position\": { \"x\": -2.88, \"y\": 2.8, \"z\": -2.12 } } } . { \"object_id\": \"box3\", \"action\": \"create\", \"type\": \"object\", \"data\": { \"material\": { \"color\": \"red\" }, \"object_type\": \"box\", \"scale\": { \"x\": 0.2, \"y\": 0.2, \"z\": 0.2 }, \"position\": { \"x\": -0.09, \"y\": 1.3, \"z\": -3.66 } } } . { \"object_id\": \"box4\", \"action\": \"create\", \"type\": \"object\", \"data\": { \"material\": { \"color\": \"red\" }, \"object_type\": \"box\", \"scale\": { \"x\": 0.2, \"y\": 0.2, \"z\": 0.2 }, \"position\": { \"x\": 3.31, \"y\": 2.0, \"z\": -0.97 } } } . ",
    "url": "https://docs.arenaxr.org/content/schemas/message-examples.html#sample-scene-earth-and-moon-with-markers",
    "relUrl": "/content/schemas/message-examples.html#sample-scene-earth-and-moon-with-markers"
  },"577": {
    "doc": "PubSub Messages",
    "title": "Messaging Format Reference",
    "content": "This is a reference list of primitives and how these can be created by interacting directly with ARENA’s PubSub. ",
    "url": "https://docs.arenaxr.org/content/schemas/message-examples.html#messaging-format-reference",
    "relUrl": "/content/schemas/message-examples.html#messaging-format-reference"
  },"578": {
    "doc": "PubSub Messages",
    "title": "Draw a Cube",
    "content": "Instantiate a cube and set all of it’s basic parameters. { \"object_id\": \"cube_1\", \"action\": \"create\", \"type\": \"object\", \"data\": { \"object_type\": \"box\", \"position\": { \"x\": 1, \"y\": 1, \"z\": -1 }, \"rotation\": { \"x\": 0, \"y\": 0, \"z\": 0, \"w\": 1 }, \"scale\": { \"x\": 1, \"y\": 1, \"z\": 1 }, \"material\": { \"color\": \"#FF0000\" } } } . ",
    "url": "https://docs.arenaxr.org/content/schemas/message-examples.html#draw-a-cube",
    "relUrl": "/content/schemas/message-examples.html#draw-a-cube"
  },"579": {
    "doc": "PubSub Messages",
    "title": "Color",
    "content": "Change only the color of the already-drawn cube. { \"object_id\": \"cube_1\", \"action\": \"update\", \"type\": \"object\", \"data\": { \"material\": { \"color\": \"#00FF00\" } } } . ",
    "url": "https://docs.arenaxr.org/content/schemas/message-examples.html#color",
    "relUrl": "/content/schemas/message-examples.html#color"
  },"580": {
    "doc": "PubSub Messages",
    "title": "Transparency",
    "content": "Say the cube has already been drawn. In a second command, this sets 50% transparency. { \"object_id\": \"cube_1\", \"action\": \"update\", \"type\": \"object\", \"data\": { \"material\": { \"transparent\": true, \"opacity\": 0.5 } } } . ",
    "url": "https://docs.arenaxr.org/content/schemas/message-examples.html#transparency",
    "relUrl": "/content/schemas/message-examples.html#transparency"
  },"581": {
    "doc": "PubSub Messages",
    "title": "Move",
    "content": "Move the position of the already drawn cube. { \"object_id\": \"cube_1\", \"action\": \"update\", \"type\": \"object\", \"data\": { \"position\": { \"x\": 2, \"y\": 2, \"z\": -1 } } } . ",
    "url": "https://docs.arenaxr.org/content/schemas/message-examples.html#move",
    "relUrl": "/content/schemas/message-examples.html#move"
  },"582": {
    "doc": "PubSub Messages",
    "title": "Rotate",
    "content": "Rotate the already drawn cube; these are in quaternions, not A-Frame degrees. { \"object_id\": \"cube_1\", \"action\": \"update\", \"type\": \"object\", \"data\": { \"rotation\": { \"x\": 0.5, \"y\": 0, \"z\": 0, \"w\": 0.86603 } } } . The quaternion (native) representation of rotation is a bit more tricky. The 4 parameters are X, Y, Z, W. Here are some simple examples: . | 1, 0, 0, 0: rotate 180 degrees around X axis | 0, 0.7, 0, 0.7: rotate 90 degrees around Y axis | 0, 0, -0.7, 0.7: rotate -90 degrees around Z axis | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message-examples.html#rotate",
    "relUrl": "/content/schemas/message-examples.html#rotate"
  },"583": {
    "doc": "PubSub Messages",
    "title": "Animate",
    "content": "Animate rotation of the already drawn cube. { \"object_id\": \"cube_1\", \"action\": \"update\", \"type\": \"object\", \"data\": { \"animation\": { \"property\": \"rotation\", \"to\": \"0 360 0\", \"loop\": true, \"dur\": 10000 } } } . Other animations are available that resemble the \"data\": {\"animation\": { \"property\": ... }} blob above: see A-Frame Animation documentation for more examples. ",
    "url": "https://docs.arenaxr.org/content/schemas/message-examples.html#animate",
    "relUrl": "/content/schemas/message-examples.html#animate"
  },"584": {
    "doc": "PubSub Messages",
    "title": "Remove",
    "content": "Remove the cube. { \"object_id\": \"cube_1\", \"action\": \"delete\" } . ",
    "url": "https://docs.arenaxr.org/content/schemas/message-examples.html#remove",
    "relUrl": "/content/schemas/message-examples.html#remove"
  },"585": {
    "doc": "PubSub Messages",
    "title": "Images",
    "content": "Create an image on the floor. { \"object_id\": \"image_floor\", \"action\": \"create\", \"type\": \"object\", \"data\": { \"object_type\": \"image\", \"position\": { \"x\": 0, \"y\": 0, \"z\": 0.4 }, \"rotation\": { \"x\": -0.7, \"y\": 0, \"z\": 0, \"w\": 0.7 }, \"url\": \"images/floor.png\", \"scale\": { \"x\": 12, \"y\": 12, \"z\": 2 }, \"material\": { \"repeat\": { \"x\": 4, \"y\": 4 } } } } . URLs work in the URL parameter slot. Instead of images/2.png it would be e.g. url(http://arenaxr.org/images/foo.jpg). To update the image of a named image already in the scene, use this syntax. { \"object_id\": \"image_2\", \"action\": \"update\", \"type\": \"object\", \"data\": { \"material\": { \"src\": \"https://arenaxr.org/abstract/downtown.png\" } } } . ",
    "url": "https://docs.arenaxr.org/content/schemas/message-examples.html#images",
    "relUrl": "/content/schemas/message-examples.html#images"
  },"586": {
    "doc": "PubSub Messages",
    "title": "Images on Objects",
    "content": "Use the multisrc A-Frame Component to specify different bitmaps for sides of a cube or other primitive shape. { \"object_id\": \"die1\", \"action\": \"create\", \"type\": \"object\", \"data\": { \"object_type\": \"box\", \"position\": { \"x\": 0, \"y\": 0.5, \"z\": -2 }, \"rotation\": { \"x\": 0, \"y\": 0, \"z\": 0, \"w\": 1 }, \"scale\": { \"x\": 1, \"y\": 1, \"z\": 1 }, \"material\": { \"color\": \"#ffffff\" }, \"dynamic-body\": { \"type\": \"dynamic\" }, \"multisrc\": { \"srcspath\": \"store/users/wiselab/images/dice/\", \"srcs\": \"side1.png,side2.png,side3.png,side4.png,side5.png,side6.png\" } } } . ",
    "url": "https://docs.arenaxr.org/content/schemas/message-examples.html#images-on-objects",
    "relUrl": "/content/schemas/message-examples.html#images-on-objects"
  },"587": {
    "doc": "PubSub Messages",
    "title": "Other Primitives: TorusKnot",
    "content": "Instantiate a wacky torusKnot, then turn it blue. Other primitive types are available in the in A-Frame docs. Here is a brief list: box circle cone cylinder dodecahedron icosahedron tetrahedron octahedron plane ring sphere torus torusKnot triangle. { \"object_id\": \"torusKnot_1\", \"action\": \"create\", \"type\": \"object\", \"data\": { \"object_type\": \"torusKnot\", \"material\": { \"color\": \"red\" }, \"position\": { \"x\": 0, \"y\": 1, \"z\": -4 }, \"rotation\": { \"x\": 0, \"y\": 0, \"z\": 0, \"w\": 1 }, \"scale\": { \"x\": 1, \"y\": 1, \"z\": 1 } } } . { \"object_id\": \"torusKnot_1\", \"action\": \"update\", \"type\": \"object\", \"data\": { \"material\": { \"color\": \"blue\" } } } . ",
    "url": "https://docs.arenaxr.org/content/schemas/message-examples.html#other-primitives-torusknot",
    "relUrl": "/content/schemas/message-examples.html#other-primitives-torusknot"
  },"588": {
    "doc": "PubSub Messages",
    "title": "Models",
    "content": "Instantiate a glTF v2.0 binary model (file extension .glb) from a URL. { \"object_id\": \"gltf-model_1\", \"action\": \"create\", \"type\": \"object\", \"data\": { \"object_type\": \"gltf-model\", \"url\": \"https://arenaxr.org/models/Duck.glb\", \"position\": { \"x\": 0, \"y\": 1, \"z\": -4 }, \"rotation\": { \"x\": 0, \"y\": 0, \"z\": 0, \"w\": 1 }, \"scale\": { \"x\": 1, \"y\": 1, \"z\": 1 } } } . ",
    "url": "https://docs.arenaxr.org/content/schemas/message-examples.html#models",
    "relUrl": "/content/schemas/message-examples.html#models"
  },"589": {
    "doc": "PubSub Messages",
    "title": "Animating GLTF Models",
    "content": "To animate a GLTF model (see GLTF Files for how to find animation names), and set the animation-mixer parameter. { \"object_id\": \"gltf-model_3\", \"action\": \"update\", \"type\": \"object\", \"data\": { \"animation-mixer\": { \"clip\": \"*\" } } } . The asterisk means “play all animations”, and works better in some situations, where other times the name of a specific animation in the GLTF file works (or maybe several in sequence). ",
    "url": "https://docs.arenaxr.org/content/schemas/message-examples.html#animating-gltf-models",
    "relUrl": "/content/schemas/message-examples.html#animating-gltf-models"
  },"590": {
    "doc": "PubSub Messages",
    "title": "Relocalize Camera Rig",
    "content": "Move the camera rig (parent object of the camera) with ID camera_1234567890_er1k to a new coordinate (system). Values are x, y, z, (meters) x, y, z, w (quaternions). { \"object_id\": \"camera_1234567890_er1k\", \"action\": \"update\", \"type\": \"rig\", \"data\": { \"position\": { \"x\": 1, \"y\": 1, \"z\": 1 }, \"rotation\": { \"x\": 0.1, \"y\": 0, \"z\": 0, \"w\": 1 } } } . This assumes we know our camera ID was assigned as 1234567890. One way to find out your camera ID is, automatically assigned ones get printed on web browsers’ Developer Tools Console in a message like my-camera name camera_1234567890_X. That might not be easily knowable without snooping MQTT messages, so the &amp;fixedCamera=er1k URL parameter lets us choose manually the unique ID. If used in the URL, the &amp;name= parameter is ignored, and the derived camera/user ID is based on fixedCamera, so would be in this case camera_er1k_er1k . ",
    "url": "https://docs.arenaxr.org/content/schemas/message-examples.html#relocalize-camera-rig",
    "relUrl": "/content/schemas/message-examples.html#relocalize-camera-rig"
  },"591": {
    "doc": "PubSub Messages",
    "title": "Move Camera",
    "content": "Move the camera with ID camera_1234567890_er1k to a new position. Values are x, y, z, (meters) x, y, z, w (quaternions). Action must be update. { \"object_id\": \"camera_1234567890_er1k\", \"action\": \"update\", \"type\": \"camera-override\", \"data\": { \"object_type\": \"camera\", \"position\": { \"x\": 1.692, \"y\": 1.6, \"z\": 4.371 }, \"rotation\": { \"x\": 0.003, \"y\": -0.003, \"z\": 0, \"w\": 1 } } } . This assumes we know our camera ID. One way to find out your camera ID is, automatically assigned ones get printed on web browsers’ Developer Tools Console. ",
    "url": "https://docs.arenaxr.org/content/schemas/message-examples.html#move-camera",
    "relUrl": "/content/schemas/message-examples.html#move-camera"
  },"592": {
    "doc": "PubSub Messages",
    "title": "Camera Look At",
    "content": "Make the camera with ID camera_1234567890_er1k look at an object or coordinate. Target can be given as x, y, z coordinate object (e.g. {\"x\":1.692,\"y\":1.6,\"z\":4.371}), or as a string with an object ID (e.g. \"cone_587431\"). Action must be update. { \"object_id\": \"camera_1234567890_er1k\", \"action\": \"update\", \"type\": \"camera-override\", \"data\": { \"object_type\": \"look-at\", \"target\": \"cone_587431\" } } . { \"object_id\": \"camera_1234567890_er1k\", \"action\": \"update\", \"type\": \"camera-override\", \"data\": { \"object_type\": \"look-at\", \"target\": { \"x\": 0.467, \"y\": 2.066, \"z\": -1.027 } } } . This assumes we know our camera ID. One way to find out your camera ID is, automatically assigned ones get printed on web browsers’ Developer Tools Console. ",
    "url": "https://docs.arenaxr.org/content/schemas/message-examples.html#camera-look-at",
    "relUrl": "/content/schemas/message-examples.html#camera-look-at"
  },"593": {
    "doc": "PubSub Messages",
    "title": "Text",
    "content": "Add some red text that says “Hello World”. { \"object_id\": \"text_3\", \"action\": \"create\", \"type\": \"object\", \"data\": { \"color\": \"red\", \"value\": \"Hello world!\", \"object_type\": \"text\", \"position\": { \"x\": 0, \"y\": 3, \"z\": -4 }, \"rotation\": { \"x\": 0, \"y\": 0, \"z\": 0, \"w\": 1 }, \"scale\": { \"x\": 1, \"y\": 1, \"z\": 1 } } } . Change text color properties A-Frame Text. { \"object_id\": \"text_3\", \"action\": \"update\", \"type\": \"object\", \"data\": { \"text\": { \"color\": \"green\" } } } . ",
    "url": "https://docs.arenaxr.org/content/schemas/message-examples.html#text",
    "relUrl": "/content/schemas/message-examples.html#text"
  },"594": {
    "doc": "PubSub Messages",
    "title": "Lights",
    "content": "Create a red light in the scene. { \"object_id\": \"light_3\", \"action\": \"create\", \"type\": \"object\", \"data\": { \"object_type\": \"light\", \"position\": { \"x\": 1, \"y\": 1, \"z\": 1 }, \"rotation\": { \"x\": 0.25, \"y\": 0.25, \"z\": 0, \"w\": 1 }, \"color\": \"#FF0000\" } } . Default is ambient light. To change type, or other light A-Frame Light parameters, example: change to directional. Options: ambient, directional, hemisphere, point, spot. { \"object_id\": \"light_3\", \"action\": \"update\", \"type\": \"object\", \"data\": { \"object_type\": \"light\", \"type\": \"directional\" } } . ",
    "url": "https://docs.arenaxr.org/content/schemas/message-examples.html#lights",
    "relUrl": "/content/schemas/message-examples.html#lights"
  },"595": {
    "doc": "PubSub Messages",
    "title": "Sound",
    "content": "Play toy piano sound from a URL when you click a cube. Sets click-listener Component, waveform URL, and sound attribute. { \"object_id\": \"box_asharp\", \"action\": \"create\", \"type\": \"object\", \"data\": { \"object_type\": \"box\", \"position\": { \"x\": 2.5, \"y\": 0.25, \"z\": -5 }, \"scale\": { \"x\": 0.8, \"y\": 1, \"z\": 1 }, \"material\": { \"color\": \"#000000\" }, \"sound\": { \"src\": \"url(https://arenaxr.org/audio/toypiano/Asharp1.wav)\", \"on\": \"mousedown\" }, \"click-listener\": \"\" } } . ",
    "url": "https://docs.arenaxr.org/content/schemas/message-examples.html#sound",
    "relUrl": "/content/schemas/message-examples.html#sound"
  },"596": {
    "doc": "PubSub Messages",
    "title": "360 Video",
    "content": "Draw a sphere, set the texture src to be an equirectangular video, on the ‘back’ (inside). { \"object_id\": \"sphere_vid\", \"action\": \"create\", \"type\": \"object\", \"data\": { \"object_type\": \"sphere\", \"scale\": { \"x\": 200, \"y\": 200, \"z\": 200 }, \"rotation\": { \"x\": 0, \"y\": 0.7, \"z\": 0, \"w\": 0.7 }, \"material\": { \"color\": \"#808080\" }, \"material\": { \"src\": \"images/360falls.mp4\", \"side\": \"back\" } } } . ",
    "url": "https://docs.arenaxr.org/content/schemas/message-examples.html#360-video",
    "relUrl": "/content/schemas/message-examples.html#360-video"
  },"597": {
    "doc": "PubSub Messages",
    "title": "Lines",
    "content": "Draw a purple line from (2, 2, 2) to (3, 3, 3). { \"object_id\": \"line_1\", \"action\": \"create\", \"type\": \"object\", \"data\": { \"object_type\": \"line\", \"start\": { \"x\": 2, \"y\": 2, \"z\": 2 }, \"end\": { \"x\": 3, \"y\": 3, \"z\": 3 }, \"color\": \"#CE00FF\" } } . Extend the line with a new segment, colored green. { \"object_id\": \"line_1\", \"action\": \"update\", \"type\": \"object\", \"data\": { \"line__2\": { \"start\": { \"x\": 3, \"y\": 3, \"z\": 3 }, \"end\": { \"x\": 4, \"y\": 4, \"z\": 4 }, \"color\": \"#00FF00\" } } } . ",
    "url": "https://docs.arenaxr.org/content/schemas/message-examples.html#lines",
    "relUrl": "/content/schemas/message-examples.html#lines"
  },"598": {
    "doc": "PubSub Messages",
    "title": "Thicklines",
    "content": "A “thickline” (to improve openpose skeleton rendering visibility) - works like a line, but the lineWidth value specifies thickness, and multiple points can be specified at once, e.g. draw a pink line 11 pixels thick from 0, 0, 0 to 1, 0, 0 to 1, 1, 0 to 1, 1, 1. The shorthand syntax for coordinates is a bonus feature of lower level code; extending it for the rest of ARENA commands remains as an enhancement. { \"object_id\": \"thickline_8\", \"action\": \"create\", \"type\": \"object\", \"data\": { \"object_type\": \"thickline\", \"lineWidth\": 11, \"color\": \"#FF88EE\", \"path\": \"0 0 0, 1 0 0, 1 1 0, 1 1 1\" } } . You might be wondering, why can’t normal lines just use the scale value to specify thickness? But this one goes to eleven! Really though, normal lines perform faster. To update a “thickline” takes a special syntax because thicklines are really “meshline”s. { \"object_id\": \"thickline_8\", \"action\": \"update\", \"type\": \"object\", \"data\": { \"meshline\": { \"lineWidth\": 11, \"color\": \"#ffffff\", \"path\": \"0 0 0, 0 0 1\" } } } . ",
    "url": "https://docs.arenaxr.org/content/schemas/message-examples.html#thicklines",
    "relUrl": "/content/schemas/message-examples.html#thicklines"
  },"599": {
    "doc": "PubSub Messages",
    "title": "Events",
    "content": "Add the “click-listener” event to a scene object; click-listener is a Component defined in events.js. This works for adding other, arbitrary Components. A non-empty message gets sent to the Component’s init: function. { \"object_id\": \"cube_1\", \"action\": \"update\", \"type\": \"object\", \"data\": { \"click-listener\": \"enable\" } } . ",
    "url": "https://docs.arenaxr.org/content/schemas/message-examples.html#events",
    "relUrl": "/content/schemas/message-examples.html#events"
  },"600": {
    "doc": "PubSub Messages",
    "title": "Persisted Objects",
    "content": "If we want our objects to return to the scene when we next open or reload our browser, we can commit them on creation to the ARENA Persistence DB by setting \"persist\": true. { \"object_id\": \"Ball2\", \"action\": \"create\", \"persist\": true, \"data\": { \"position\": { \"x\": -1, \"y\": 1, \"z\": -1 }, \"material\": { \"color\": \"blue\" }, \"object_type\": \"sphere\" } } . ",
    "url": "https://docs.arenaxr.org/content/schemas/message-examples.html#persisted-objects",
    "relUrl": "/content/schemas/message-examples.html#persisted-objects"
  },"601": {
    "doc": "PubSub Messages",
    "title": "Temporary Objects: TTL",
    "content": "It’s desirable to have objects that don’t last forever and pile up. For that there is the ‘ttl’ parameter that gives objects a lifetime, in seconds. This is an example usage for a sphere that disappears after 5 seconds. { \"object_id\": \"Ball2\", \"action\": \"create\", \"ttl\": 5, \"data\": { \"position\": { \"x\": -1, \"y\": 1, \"z\": -1 }, \"material\": { \"color\": \"blue\" }, \"object_type\": \"sphere\" } } . ",
    "url": "https://docs.arenaxr.org/content/schemas/message-examples.html#temporary-objects-ttl",
    "relUrl": "/content/schemas/message-examples.html#temporary-objects-ttl"
  },"602": {
    "doc": "PubSub Messages",
    "title": "Transparent Occlusion",
    "content": "To draw a shape that is transparent, but occludes other virtual objects behind it (to simulate virtual objects hidden by real world surfaces like a wall or table), include in the data section this JSON. { \"material\": { \"colorWrite\": false }, \"render-order\": \"0\" } . …or a shortcut for the same occlusion, you can use… . { \"material-extras\": { \"transparentOccluder\": true } } . colorWrite is an attribute of the THREE.js Shader Material that, by exposing it, we make accessible like others belonging to the Material A-Frame Component, and is an alternative way of controlling visibility. render-order is a custom Component that controls which objects are drawn first (not necessarily the same as which are “in front of” others). All other ARENA objects are drawn with render-order of 1. Note . This does not occlude the far background A-Frame layer (like environment component stars) but, in AR, that layer is not drawn anyway. Material-extras traverse objects, so can be applied to a GLTF, e.g: . { \"object_id\": \"arobothead\", \"persist\": true, \"type\": \"object\", \"action\": \"update\", \"data\": { \"object_type\": \"gltf-model\", \"url\": \"/store/models/robobit.glb\", \"material-extras\": { \"encoding\": \"sRGBEncoding\", \"transparentOccluder\": true } } } . ",
    "url": "https://docs.arenaxr.org/content/schemas/message-examples.html#transparent-occlusion",
    "relUrl": "/content/schemas/message-examples.html#transparent-occlusion"
  },"603": {
    "doc": "PubSub Messages",
    "title": "Background Themes",
    "content": "Adds one of many predefined backgrounds ( one of: none, default, contact, egypt, checkerboard, forest, goaland, yavapai, goldmine, threetowers, poison, arches, tron, japan, dream, volcano, starry, osiris) to the scene . { \"object_id\": \"env\", \"action\": \"update\", \"type\": \"object\", \"data\": { \"environment\": { \"preset\": \"arches\" } } } . ",
    "url": "https://docs.arenaxr.org/content/schemas/message-examples.html#background-themes",
    "relUrl": "/content/schemas/message-examples.html#background-themes"
  },"604": {
    "doc": "PubSub Messages",
    "title": "Physics",
    "content": "You can enable physics (gravity) for a scene object by adding the dynamic-body Component. { \"object_id\": \"box_3\", \"action\": \"update\", \"type\": \"object\", \"data\": { \"dynamic-body\": { \"type\": \"dynamic\" } } } . One physics feature is applying an impulse to an object to set it in motion. This happens in conjunction with an event. As an example, here are messages setting objects fallBox and fallBox2 to respond to mouseup and mousedown messages with an impulse with a certain force and position. { \"object_id\": \"fallBox2\", \"action\": \"create\", \"type\": \"object\", \"data\": { \"object_type\": \"box\", \"dynamic-body\": { \"type\": \"dynamic\" }, \"impulse\": { \"on\": \"mousedown\", \"force\": \"1 50 1\", \"position\": \"1 1 1\" }, \"click-listener\": \"\", \"position\": { \"x\": 0.1, \"y\": 4.5, \"z\": -4 }, \"scale\": { \"x\": 0.5, \"y\": 0.5, \"z\": 0.5 } } } . { \"object_id\": \"fallBox\", \"action\": \"create\", \"type\": \"object\", \"data\": { \"object_type\": \"box\", \"dynamic-body\": { \"type\": \"dynamic\" }, \"impulse\": { \"on\": \"mouseup\", \"force\": \"1 50 1\", \"position\": \"1 1 1\" }, \"click-listener\": \"\", \"position\": { \"x\": 0, \"y\": 4, \"z\": -4 }, \"scale\": { \"x\": 0.5, \"y\": 0.5, \"z\": 0.5 } } } . ",
    "url": "https://docs.arenaxr.org/content/schemas/message-examples.html#physics",
    "relUrl": "/content/schemas/message-examples.html#physics"
  },"605": {
    "doc": "PubSub Messages",
    "title": "Parent/Child Linking",
    "content": "There is support to attach a child to an already-existing parent scene objects. When creating a child object, set the \"parent\": \"parent_object_id\" value in the JSON data. For example if parent object is gltf-model_Earth and child object is gltf-model_Moon, the commands would look like: . { \"object_id\": \"gltf-model_Earth\", \"action\": \"create\", \"type\": \"object\", \"data\": { \"object_type\": \"gltf-model\", \"position\": { \"x\": 0, \"y\": 0.1, \"z\": 0 }, \"url\": \"store/models/Earth.glb\", \"scale\": { \"x\": 5, \"y\": 5, \"z\": 5 } } } . { \"object_id\": \"gltf-model_Moon\", \"action\": \"create\", \"type\": \"object\", \"data\": { \"parent\": \"gltf-model_Earth\", \"object_type\": \"gltf-model\", \"position\": { \"x\": 0, \"y\": 0.05, \"z\": 0.6 }, \"scale\": { \"x\": 0.05, \"y\": 0.05, \"z\": 0.05 }, \"url\": \"store/models/Moon.glb\" } } . Child objects inherit attributes of their parent, for example scale. Scale the parent, the child scales with it. If the parent is already scaled, the child scale will be reflected right away. Child position values are relative to the parent and also scaled. ",
    "url": "https://docs.arenaxr.org/content/schemas/message-examples.html#parentchild-linking",
    "relUrl": "/content/schemas/message-examples.html#parentchild-linking"
  },"606": {
    "doc": "PubSub Messages",
    "title": "Goto URL",
    "content": "Navigates to entirely new page into browser when clicked, or other event (requires click-listener). { \"object_id\": \"cube_1\", \"action\": \"create\", \"type\": \"object\", \"data\": { \"object_type\": \"box\", \"position\": { \"x\": 1, \"y\": 1, \"z\": -1 }, \"click-listener\": \"\", \"goto-url\": { \"dest\": \"newtab\", \"on\": \"mousedown\", \"url\": \"http: www.eet.com\" } } } . ",
    "url": "https://docs.arenaxr.org/content/schemas/message-examples.html#goto-url",
    "relUrl": "/content/schemas/message-examples.html#goto-url"
  },"607": {
    "doc": "PubSub Messages",
    "title": "Landmark",
    "content": "Creates a landmark that can be teleported to from the UI list, or is one of the random starting positions for the scene . { \"object_id\": \"cube_1\", \"action\": \"create\", \"type\": \"object\", \"data\": { \"object_type\": \"box\", \"position\": { \"x\": 1, \"y\": 1, \"z\": -1 }, \"landmark\": { \"label\": \"Cube 1\", \"randomRadiusMin\": 1, \"randomRadiusMax\": 2, \"lookAtLandmark\": true } } } . ",
    "url": "https://docs.arenaxr.org/content/schemas/message-examples.html#landmark",
    "relUrl": "/content/schemas/message-examples.html#landmark"
  },"608": {
    "doc": "PubSub Messages",
    "title": "Particles",
    "content": "Particles are based on aframe-spe-particles-component, javascript loaded from aframe-spe-particles-component.min.js. For now, it’s not directly supported, but rather by passing JSON inside the data{} element. The syntax for parameter names has been updated so instead of a name like this that is space-separated it becomes spaceSeparated (camel case). Three examples here have been created starting with the examples in aframe-spe-particles-component examples then reformulating to ARENA JSON syntax. { \"object_id\": \"smoke\", \"action\": \"create\", \"type\": \"object\", \"data\": { \"object_type\": \"entity\", \"position\": { \"x\": 0, \"y\": 1, \"z\": -3.9 }, \"rotation\": { \"x\": 0, \"y\": 0, \"z\": 0, \"w\": 1 }, \"scale\": { \"x\": 0.01, \"y\": 0.01, \"z\": 0.01 }, \"spe-particles\": { \"texture\": \"static/images/textures/fog.png\", \"velocity\": \"1 30 0\", \"velocitySpread\": \"2 1 0.2\", \"particleCount\": 50, \"maxAge\": 4, \"size\": \"3, 8\", \"opacity\": \"0, 1, 0\", \"color\": \"#aaa, #222\" } } } . Particles are very complicated and take a lot of parameters. It would not make sense to translate all of them into explicit ARENA types, thus this flexible ‘raw JSON’ format is used. ",
    "url": "https://docs.arenaxr.org/content/schemas/message-examples.html#particles",
    "relUrl": "/content/schemas/message-examples.html#particles"
  },"609": {
    "doc": "PubSub Messages",
    "title": "Events",
    "content": "Click events are generated as part of the laser-controls A-Frame entity; you get the events if you click the lasers on scene entities that have click-listener Component in their HTML declaration (see index.html), or have later had click-listener enabled via an MQTT message (see above). Mouse events occur if you click in a browser, or tap on a touchscreen as well. | mouseenter | mouseleave | mousedown | mouseup . | triggerdown / triggerup for left and right hand controllers | . The MQTT topic name for viewing these events can be the standard prefix (e.g. realm/s//example/) ending with a string made up of object ID that generated the event. An example event MQTT: . { \"object_id\": \"fallBox2\", \"action\": \"clientEvent\", \"type\": \"mousedown\", \"data\": { \"position\": { \"x\": -0.993, \"y\": 0.342, \"z\": -1.797 }, \"source\": \"camera_8715_er\" } } . Note . The message itself will contain the originator of the event as a camera/user ID and other data like where the object was clicked. Full list of Vive controller event names: . | triggerdown | triggerup | gripdown | gripup | menudown | menuup | systemdown | systemup | trackpaddown | trackpadup | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message-examples.html#events-1",
    "relUrl": "/content/schemas/message-examples.html#events-1"
  },"610": {
    "doc": "PubSub Messages",
    "title": "Scene Settings",
    "content": "Some settings are available by setting attributes of the Scene element (see A-Frame Scene) for example, turn on statistics: . { \"object_id\": \"scene\", \"action\": \"update\", \"type\": \"object\", \"data\": { \"stats\": true } } . Customize the fog (notice 3 character hexadecimal color representation): . { \"object_id\": \"scene\", \"action\": \"update\", \"type\": \"object\", \"data\": { \"fog\": { \"type\": \"linear\", \"color\": \"#F00\" } } } . Remove the “enter VR” icon: . { \"object_id\": \"scene\", \"action\": \"update\", \"type\": \"object\", \"data\": { \"vr-mode-ui\": { \"enabled\": false } } } . ",
    "url": "https://docs.arenaxr.org/content/schemas/message-examples.html#scene-settings",
    "relUrl": "/content/schemas/message-examples.html#scene-settings"
  },"611": {
    "doc": "PubSub Messages",
    "title": "PubSub Messages",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message-examples.html",
    "relUrl": "/content/schemas/message-examples.html"
  },"612": {
    "doc": "GLTF Model Update",
    "title": "GLTF Model Update",
    "content": "The GLTF-specific modelUpdate attribute is an object with child component names as keys. The top-level keys are the names of the child components to be updated. The values of each are nested position and rotation attributes to set as new values, respectively. Either position or rotation can be omitted if unchanged. ",
    "url": "https://docs.arenaxr.org/content/schemas/message/modelUpdate.html#gltf-model-update",
    "relUrl": "/content/schemas/message/modelUpdate.html#gltf-model-update"
  },"613": {
    "doc": "GLTF Model Update",
    "title": "GLTF Model Update Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | ^[A-Za-z][A-Za-z0-9_-]*$ | object |   | One of this model’s named child components. | No | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/modelUpdate.html#gltf-model-update-attributes",
    "relUrl": "/content/schemas/message/modelUpdate.html#gltf-model-update-attributes"
  },"614": {
    "doc": "GLTF Model Update",
    "title": "GLTF Model Update Example",
    "content": "{ \"left-elbow\": { \"position\": { \"x\": 0, \"y\": 0, \"z\": 0 }, \"rotation\": { \"w\": 1, \"x\": 0, \"y\": 0, \"z\": 0 } }, \"right-elbow\": { \"rotation\": { \"w\": 1, \"x\": 0, \"y\": 0, \"z\": 0 } }, \"left-knee\": {} } . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/modelUpdate.html#gltf-model-update-example",
    "relUrl": "/content/schemas/message/modelUpdate.html#gltf-model-update-example"
  },"615": {
    "doc": "GLTF Model Update",
    "title": "GLTF Model Update",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/modelUpdate.html",
    "relUrl": "/content/schemas/message/modelUpdate.html"
  },"616": {
    "doc": "arena.attributes.model_update",
    "title": "\narena.attributes.model_update    ",
    "content": "class ModelUpdate(arena.attributes.attribute.Attribute): ModelUpdate attribute class to manage its properties in the ARENA: The GLTF-specific modelUpdate attribute is an object with child component names as keys. The top-level keys are the names of the child components to be updated. The values of each are nested position and rotation attributes to set as new values, respectively. Either position or rotation can be omitted if unchanged. Usage: modelUpdate=ModelUpdate(...) . ModelUpdate(**kwargs) Inherited Members . arena.base_object.BaseObject add json_encode json ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/model_update.html",
    "relUrl": "/content/python-api/attributes/model_update.html"
  },"617": {
    "doc": "arena.attributes.model_update",
    "title": "arena.attributes.model_update",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/model_update.html",
    "relUrl": "/content/python-api/attributes/model_update.html"
  },"618": {
    "doc": "Models",
    "title": "Model Import and Export",
    "content": "Since the ARENA uses GLTF models as a web-friendly format, it is useful to know how to export your Unity work as a GLTF model, which the ARENA web can render. ",
    "url": "https://docs.arenaxr.org/content/unity/models.html#model-import-and-export",
    "relUrl": "/content/unity/models.html#model-import-and-export"
  },"619": {
    "doc": "Models",
    "title": "Importing GLTF With glTFast",
    "content": "GLTFs with urls stored as objects in the ARENA are automatically downloaded at Runtime (Play) and rendered with the help of the glTFast library. Decompression of GLTFs compressed with Draco, KTX, and Mesh Optimization are supported. ",
    "url": "https://docs.arenaxr.org/content/unity/models.html#importing-gltf-with-gltfast",
    "relUrl": "/content/unity/models.html#importing-gltf-with-gltfast"
  },"620": {
    "doc": "Models",
    "title": "Exporting GLTF With glTFast",
    "content": "In the GameObject and Asset menus, you can export your models as GLTF: . | Remote File &amp; ARENA Object: choose ARENA Export GLTF. | Local File: choose Export glTF. | . There is also an advanced menu available to fine tune your ARENA export: . ",
    "url": "https://docs.arenaxr.org/content/unity/models.html#exporting-gltf-with-gltfast",
    "relUrl": "/content/unity/models.html#exporting-gltf-with-gltfast"
  },"621": {
    "doc": "Models",
    "title": "Exporting GLTF With GLTF-Exporter",
    "content": ". | Use the GLTF-Exporter package to export to GLTF file format. | Store this model online, like the on the ARENA File Store or Dropbox. | In scene ARENA View load your ARENA scene. | Import your model, adding an ARENA object using the menu GameObject &gt; ARENA &gt; GLTF Model and provide your model URL. | . ",
    "url": "https://docs.arenaxr.org/content/unity/models.html#exporting-gltf-with-gltf-exporter",
    "relUrl": "/content/unity/models.html#exporting-gltf-with-gltf-exporter"
  },"622": {
    "doc": "Models",
    "title": "Models",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/unity/models.html",
    "relUrl": "/content/unity/models.html"
  },"623": {
    "doc": "Multi Source",
    "title": "Multi Source",
    "content": "Define multiple visual sources applied to an object. ",
    "url": "https://docs.arenaxr.org/content/schemas/message/multisrc.html#multi-source",
    "relUrl": "/content/schemas/message/multisrc.html#multi-source"
  },"624": {
    "doc": "Multi Source",
    "title": "Multi Source Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | srcs | string |   | A comma-delimited list if URIs, e.g. ‘side1.png, side2.png, side3.png, side4.png, side5.png, side6.png’ (required). | Yes | . | srcspath | string |   | URI, relative or full path of a directory containing srcs, e.g. ‘store/users/wiselab/images/dice/’ (required). | Yes | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/multisrc.html#multi-source-attributes",
    "relUrl": "/content/schemas/message/multisrc.html#multi-source-attributes"
  },"625": {
    "doc": "Multi Source",
    "title": "Multi Source",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/multisrc.html",
    "relUrl": "/content/schemas/message/multisrc.html"
  },"626": {
    "doc": "arena.attributes.multisrc",
    "title": "\narena.attributes.multisrc    ",
    "content": "class Multisrc(arena.attributes.attribute.Attribute): Multisrc attribute class to manage its properties in the ARENA: Define multiple visual sources applied to an object. Usage: multisrc=Multisrc(...) . Parameters . | str srcs: A comma-delimited list if URIs, e.g. 'side1.png, side2.png, side3.png, side4.png, side5.png, side6.png' (required). (optional) | str srcspath: URI, relative or full path of a directory containing srcs, e.g. 'store/users/wiselab/images/dice/' (required). (optional) | . Multisrc(**kwargs) Inherited Members . arena.base_object.BaseObject add json_encode json ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/multisrc.html",
    "relUrl": "/content/python-api/attributes/multisrc.html"
  },"627": {
    "doc": "arena.attributes.multisrc",
    "title": "arena.attributes.multisrc",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/multisrc.html",
    "relUrl": "/content/python-api/attributes/multisrc.html"
  },"628": {
    "doc": "Connectivity Graph",
    "title": "ARENA Connectivity Graph",
    "content": "ARENA’s PubSub is supported by a MQTT Mosquitto broker, modified to keep track of connected clients and data flows. This is organized into a graph that is available to users and, more importantly, to the runtime supervisor, ARTS (see the following paragraph). Take a minute to view the ARENA network’s connections as you move around in the ARENA on our Network graph. Clients connected (orange square), client subnets (gray box), MQTT topics (blue circle), and their current relationships and throughput (white arrow) can be visualized. Controls: . | Pause/Play: Stop or resume fetching graphs. | Forward/Back: Step forward one or step back one previously fetched graph. | Scroll: Zoom in and out of detail. | . ",
    "url": "https://docs.arenaxr.org/content/tools/network-monitor.html#arena-connectivity-graph",
    "relUrl": "/content/tools/network-monitor.html#arena-connectivity-graph"
  },"629": {
    "doc": "Connectivity Graph",
    "title": "Connectivity Graph",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/tools/network-monitor.html",
    "relUrl": "/content/tools/network-monitor.html"
  },"630": {
    "doc": "Next Steps",
    "title": "Next Steps",
    "content": "This was a quick overview of the ARENA. The navigation bar on the left side will take you to much more content about the ARENA, which you can browse. tip . Use the Search ARENA Documentation bar at the very top of every page on this site to find examples and information on anything you need. ",
    "url": "https://docs.arenaxr.org/content/overview/next.html",
    "relUrl": "/content/overview/next.html"
  },"631": {
    "doc": "Novice Example",
    "title": "Novice Example - Exploring EVEN more functionality!",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/python/tutorial/novice.html#novice-example---exploring-even-more-functionality",
    "relUrl": "/content/python/tutorial/novice.html#novice-example---exploring-even-more-functionality"
  },"632": {
    "doc": "Novice Example",
    "title": "Event Handlers",
    "content": "See events . def mouse_handler(scene, evt, msg): print(evt.type) # do amazing stuff here # pro tip: you can actually update an object directly in the arena update_object function scene.update_object(box, clickable=True, evt_handler=mouse_handler) # scene.update_object(box, click_listener=True, evt_handler=mouse_handler) # also works . ",
    "url": "https://docs.arenaxr.org/content/python/tutorial/novice.html#event-handlers",
    "relUrl": "/content/python/tutorial/novice.html#event-handlers"
  },"633": {
    "doc": "Novice Example",
    "title": "Deleting Attributes",
    "content": "box.update_attributes(click_listener=None) # box.update_attributes(click_listener=False) # also works . ",
    "url": "https://docs.arenaxr.org/content/python/tutorial/novice.html#deleting-attributes",
    "relUrl": "/content/python/tutorial/novice.html#deleting-attributes"
  },"634": {
    "doc": "Novice Example",
    "title": "Deleting Objects",
    "content": "scene.delete_object(box) . ",
    "url": "https://docs.arenaxr.org/content/python/tutorial/novice.html#deleting-objects",
    "relUrl": "/content/python/tutorial/novice.html#deleting-objects"
  },"635": {
    "doc": "Novice Example",
    "title": "Appendix",
    "content": "from arena import * # setup library scene = Scene(host=\"arenaxr.org\", scene=\"example\") @scene.run_async async def func(): # make a box box = Box(object_id=\"my_box\", position=Position(0,4,-2), scale=Scale(2,2,2)) scene.add_object(box) def mouse_handler(scene, evt, msg): if evt.type == \"mousedown\": box.data.position.x += 0.5 scene.update_object(box) # add click_listener scene.update_object(box, click_listener=True, evt_handler=mouse_handler) # sleep for 10 seconds await scene.sleep(10000) # delete box scene.delete_object(box) # start tasks scene.run_tasks() . ",
    "url": "https://docs.arenaxr.org/content/python/tutorial/novice.html#appendix",
    "relUrl": "/content/python/tutorial/novice.html#appendix"
  },"636": {
    "doc": "Novice Example",
    "title": "Novice Example",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/python/tutorial/novice.html",
    "relUrl": "/content/python/tutorial/novice.html"
  },"637": {
    "doc": "arena.objects",
    "title": "\narena.objects    ",
    "content": "OBJECT_TYPE_MAP = {&#39;entity&#39;: &lt;class &#39;arena.objects.entity.Entity&#39;&gt;, &#39;arenaui-button-panel&#39;: &lt;class &#39;arena.objects.arenaui_button_panel.ArenauiButtonPanel&#39;&gt;, &#39;arenaui-card&#39;: &lt;class &#39;arena.objects.arenaui_card.ArenauiCard&#39;&gt;, &#39;arenaui-prompt&#39;: &lt;class &#39;arena.objects.arenaui_prompt.ArenauiPrompt&#39;&gt;, &#39;box&#39;: &lt;class &#39;arena.objects.box.Box&#39;&gt;, &#39;camera&#39;: &lt;class &#39;arena.objects.camera.Camera&#39;&gt;, &#39;capsule&#39;: &lt;class &#39;arena.objects.capsule.Capsule&#39;&gt;, &#39;circle&#39;: &lt;class &#39;arena.objects.circle.Circle&#39;&gt;, &#39;cone&#39;: &lt;class &#39;arena.objects.cone.Cone&#39;&gt;, &#39;cylinder&#39;: &lt;class &#39;arena.objects.cylinder.Cylinder&#39;&gt;, &#39;dodecahedron&#39;: &lt;class &#39;arena.objects.dodecahedron.Dodecahedron&#39;&gt;, &#39;gaussian_splatting&#39;: &lt;class &#39;arena.objects.gaussian_splatting.GaussianSplatting&#39;&gt;, &#39;gltf-model&#39;: &lt;class &#39;arena.objects.gltf_model.GltfModel&#39;&gt;, &#39;handLeft&#39;: &lt;class &#39;arena.objects.hand_left.HandLeft&#39;&gt;, &#39;handRight&#39;: &lt;class &#39;arena.objects.hand_right.HandRight&#39;&gt;, &#39;icosahedron&#39;: &lt;class &#39;arena.objects.icosahedron.Icosahedron&#39;&gt;, &#39;image&#39;: &lt;class &#39;arena.objects.image.Image&#39;&gt;, &#39;light&#39;: &lt;class &#39;arena.objects.light.Light&#39;&gt;, &#39;line&#39;: &lt;class &#39;arena.objects.line.Line&#39;&gt;, &#39;ocean&#39;: &lt;class &#39;arena.objects.ocean.Ocean&#39;&gt;, &#39;octahedron&#39;: &lt;class &#39;arena.objects.octahedron.Octahedron&#39;&gt;, &#39;pcd-model&#39;: &lt;class &#39;arena.objects.pcd_model.PcdModel&#39;&gt;, &#39;plane&#39;: &lt;class &#39;arena.objects.plane.Plane&#39;&gt;, &#39;ring&#39;: &lt;class &#39;arena.objects.ring.Ring&#39;&gt;, &#39;roundedbox&#39;: &lt;class &#39;arena.objects.roundedbox.Roundedbox&#39;&gt;, &#39;sphere&#39;: &lt;class &#39;arena.objects.sphere.Sphere&#39;&gt;, &#39;tetrahedron&#39;: &lt;class &#39;arena.objects.tetrahedron.Tetrahedron&#39;&gt;, &#39;text&#39;: &lt;class &#39;arena.objects.text.Text&#39;&gt;, &#39;thickline&#39;: &lt;class &#39;arena.objects.thickline.Thickline&#39;&gt;, &#39;threejs-scene&#39;: &lt;class &#39;arena.objects.threejs_scene.ThreejsScene&#39;&gt;, &#39;torus&#39;: &lt;class &#39;arena.objects.torus.Torus&#39;&gt;, &#39;torusKnot&#39;: &lt;class &#39;arena.objects.torus_knot.TorusKnot&#39;&gt;, &#39;triangle&#39;: &lt;class &#39;arena.objects.triangle.Triangle&#39;&gt;, &#39;urdf-model&#39;: &lt;class &#39;arena.objects.urdf_model.UrdfModel&#39;&gt;, &#39;videosphere&#39;: &lt;class &#39;arena.objects.videosphere.Videosphere&#39;&gt;} ",
    "url": "https://docs.arenaxr.org/content/python-api/objects.html",
    "relUrl": "/content/python-api/objects.html"
  },"638": {
    "doc": "arena.objects",
    "title": "arena.objects",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/objects.html",
    "relUrl": "/content/python-api/objects.html"
  },"639": {
    "doc": "Objects",
    "title": "ARENA Unity Objects",
    "content": "This library provides you some options to manage CRUD operations on ARENA Persist objects during Runtime(Play). Each operation will publish the appropriate ARENA message for the persistence database and other client subscribers to the scene. ",
    "url": "https://docs.arenaxr.org/content/unity/objects.html#arena-unity-objects",
    "relUrl": "/content/unity/objects.html#arena-unity-objects"
  },"640": {
    "doc": "Objects",
    "title": "Create",
    "content": ". | Create any Unity GameObject and drag it as a parent of the ARENA CLient Runtime in the Hierarchy. | Create any ARENA GameObject using the menu GameObject &gt; ARENA &gt; [object_type]. | Name conflicts or non-ARENA-safe characters will be altered automatically. | . ",
    "url": "https://docs.arenaxr.org/content/unity/objects.html#create",
    "relUrl": "/content/unity/objects.html#create"
  },"641": {
    "doc": "Objects",
    "title": "Update",
    "content": ". | Scene view: Change the Transform using the TRS graphic manipulation tools. | Inspector Transform: Change the Transform by editing it’s values manually. | Inspector ArenaObject: Use Publish Unity Data to publish non-Transform changes like Color or Transparency. | Inspector ArenaObject: Edit Json Data and use Publish json Data to manually publish. | . ",
    "url": "https://docs.arenaxr.org/content/unity/objects.html#update",
    "relUrl": "/content/unity/objects.html#update"
  },"642": {
    "doc": "Objects",
    "title": "Rename",
    "content": ". | Change the name of any ARENA object to publish the appropriate create and delete messages: . | Hierarchy list item for an ArenaObject. | Inspector view for an ArenaObject. | App menu Edit &gt; Rename. | Context menu Rename. | . | . ",
    "url": "https://docs.arenaxr.org/content/unity/objects.html#rename",
    "relUrl": "/content/unity/objects.html#rename"
  },"643": {
    "doc": "Objects",
    "title": "Delete",
    "content": ". | Select one or many ARENA objects: . | Keystroke delete. | App menu Edit &gt; Delete. | Context menu Delete. | . | Edit &gt; Undo Create just after creating an object also works to delete. | Every delete command on ARENA objects that you initiate will ask you to confirm first. | . ",
    "url": "https://docs.arenaxr.org/content/unity/objects.html#delete",
    "relUrl": "/content/unity/objects.html#delete"
  },"644": {
    "doc": "Objects",
    "title": "Objects",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/unity/objects.html",
    "relUrl": "/content/unity/objects.html"
  },"645": {
    "doc": "Objects",
    "title": "Objects in arena-py",
    "content": "Objects are the main interface for placing content into the ARENA. See object definition reference. ",
    "url": "https://docs.arenaxr.org/content/python/objects.html#objects-in-arena-py",
    "relUrl": "/content/python/objects.html#objects-in-arena-py"
  },"646": {
    "doc": "Objects",
    "title": "Creating an Object and Adding Attributes",
    "content": "See Appendix for all types of Objects. Attributes can be added upon Object creation in the three ways used below (special attributes like position, rotation, scale, color, etc. can be added with tuples, lists, or dictionaries). box = Box( object_id=\"my_box\", position=Position(0,4,-2), rotation=(0,0,0,1), scale={\"x\":2,\"y\":2,\"z\":2} ) # objects can be added to a scene with the add_object method scene.add_object(box) . ",
    "url": "https://docs.arenaxr.org/content/python/objects.html#creating-an-object-and-adding-attributes",
    "relUrl": "/content/python/objects.html#creating-an-object-and-adding-attributes"
  },"647": {
    "doc": "Objects",
    "title": "Adding Attributes",
    "content": "# use update_attributes with kwargs to add attributes box.update_attributes(physics=Physics(type=\"dynamic\")) # shorthand way: box.data.physics = Physics(type=\"dynamic\") # don't forget to call scene.update_object to see your chnages in the ARENA! scene.update_object(box) . ",
    "url": "https://docs.arenaxr.org/content/python/objects.html#adding-attributes",
    "relUrl": "/content/python/objects.html#adding-attributes"
  },"648": {
    "doc": "Objects",
    "title": "Updating Attributes",
    "content": "Most attributes (except object_id, persist, ttl, and parent) are under the “data” field. Access these by using obj.data. box.data.position.x = 2 # box.update_attributes(position=Position(2,4,-2)) works too scene.update_object(box) . ",
    "url": "https://docs.arenaxr.org/content/python/objects.html#updating-attributes",
    "relUrl": "/content/python/objects.html#updating-attributes"
  },"649": {
    "doc": "Objects",
    "title": "Removing Object Attributes",
    "content": "obj.data.click_listener = None # or, obj.data.clickable = None # obj.update_attributes(click_listener=None) works too . ",
    "url": "https://docs.arenaxr.org/content/python/objects.html#removing-object-attributes",
    "relUrl": "/content/python/objects.html#removing-object-attributes"
  },"650": {
    "doc": "Objects",
    "title": "Update Handler",
    "content": "The update_handler will be called whenever the object is updated by the library of by some external program . # [obj] is the Object that called the update handler def update(obj): print(obj) obj.update_handler = update # obj.update_attributes(update_handler=update) works too . ",
    "url": "https://docs.arenaxr.org/content/python/objects.html#update-handler",
    "relUrl": "/content/python/objects.html#update-handler"
  },"651": {
    "doc": "Objects",
    "title": "Automatic Updates",
    "content": "arena-py will keep track of internal states of active objects in a scene, so the library user doesn’t have to. This means if you create an Object in a Scene, the Scene instance will listen to incoming messages and update your Object instance’s attributes automatically! . This allows arena-py programs to interact with the build page, with users, and even with other arena-py programs. As long as your program is running, you do not need to manually keep track of your Objects’ current state in the scene. For instance, if you create an Object in arena-py and you update its position with the build page or with another program, that Object’s position in the original arena-py program will automatically be updated for you! . ",
    "url": "https://docs.arenaxr.org/content/python/objects.html#automatic-updates",
    "relUrl": "/content/python/objects.html#automatic-updates"
  },"652": {
    "doc": "Objects",
    "title": "All Primitive Geometric Mesh Objects",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/python/objects.html#all-primitive-geometric-mesh-objects",
    "relUrl": "/content/python/objects.html#all-primitive-geometric-mesh-objects"
  },"653": {
    "doc": "Objects",
    "title": "Box",
    "content": "Create a box: . Box(material, ...) . ",
    "url": "https://docs.arenaxr.org/content/python/objects.html#box",
    "relUrl": "/content/python/objects.html#box"
  },"654": {
    "doc": "Objects",
    "title": "Capsule",
    "content": "Create a capsule: . Capsule(material, ...) . ",
    "url": "https://docs.arenaxr.org/content/python/objects.html#capsule",
    "relUrl": "/content/python/objects.html#capsule"
  },"655": {
    "doc": "Objects",
    "title": "Circle",
    "content": "Create a flat circle: . Circle(material, ...) . ",
    "url": "https://docs.arenaxr.org/content/python/objects.html#circle",
    "relUrl": "/content/python/objects.html#circle"
  },"656": {
    "doc": "Objects",
    "title": "Cone",
    "content": "Create a cone: . Cone(material, ...) . ",
    "url": "https://docs.arenaxr.org/content/python/objects.html#cone",
    "relUrl": "/content/python/objects.html#cone"
  },"657": {
    "doc": "Objects",
    "title": "Cylinder",
    "content": "Create a cylinder: . Cylinder(material, ...) . ",
    "url": "https://docs.arenaxr.org/content/python/objects.html#cylinder",
    "relUrl": "/content/python/objects.html#cylinder"
  },"658": {
    "doc": "Objects",
    "title": "Dodecahedron",
    "content": "Create a dodecahedron: . Dodecahedron(material, ...) . ",
    "url": "https://docs.arenaxr.org/content/python/objects.html#dodecahedron",
    "relUrl": "/content/python/objects.html#dodecahedron"
  },"659": {
    "doc": "Objects",
    "title": "Icosahedron",
    "content": "Create an icosahedron: . Icosahedron(material, ...) . ",
    "url": "https://docs.arenaxr.org/content/python/objects.html#icosahedron",
    "relUrl": "/content/python/objects.html#icosahedron"
  },"660": {
    "doc": "Objects",
    "title": "Octahedron",
    "content": "Create an octahedron: . Octahedron(material, ...) . ",
    "url": "https://docs.arenaxr.org/content/python/objects.html#octahedron",
    "relUrl": "/content/python/objects.html#octahedron"
  },"661": {
    "doc": "Objects",
    "title": "Plane",
    "content": "Create a flat plane: . Plane(material, ...) . ",
    "url": "https://docs.arenaxr.org/content/python/objects.html#plane",
    "relUrl": "/content/python/objects.html#plane"
  },"662": {
    "doc": "Objects",
    "title": "Ring",
    "content": "Create a flat ring: . Ring(material, ...) . ",
    "url": "https://docs.arenaxr.org/content/python/objects.html#ring",
    "relUrl": "/content/python/objects.html#ring"
  },"663": {
    "doc": "Objects",
    "title": "Rounded Box",
    "content": "Create a rounded-box: . Roundedbox(material, ...) . ",
    "url": "https://docs.arenaxr.org/content/python/objects.html#rounded-box",
    "relUrl": "/content/python/objects.html#rounded-box"
  },"664": {
    "doc": "Objects",
    "title": "Sphere",
    "content": "Create a sphere: . Sphere(material, ...) . ",
    "url": "https://docs.arenaxr.org/content/python/objects.html#sphere",
    "relUrl": "/content/python/objects.html#sphere"
  },"665": {
    "doc": "Objects",
    "title": "Tetrahedron",
    "content": "Create a tetrahedron: . Tetrahedron(material, ...) . ",
    "url": "https://docs.arenaxr.org/content/python/objects.html#tetrahedron",
    "relUrl": "/content/python/objects.html#tetrahedron"
  },"666": {
    "doc": "Objects",
    "title": "Torus",
    "content": "Create a torus: . Torus(material, ...) . ",
    "url": "https://docs.arenaxr.org/content/python/objects.html#torus",
    "relUrl": "/content/python/objects.html#torus"
  },"667": {
    "doc": "Objects",
    "title": "TorusKnot",
    "content": "Create a torus-knot: . TorusKnot(material, ...) . ",
    "url": "https://docs.arenaxr.org/content/python/objects.html#torusknot",
    "relUrl": "/content/python/objects.html#torusknot"
  },"668": {
    "doc": "Objects",
    "title": "Triangle",
    "content": "Create a flat triangle: . Triangle(material, ...) . ",
    "url": "https://docs.arenaxr.org/content/python/objects.html#triangle",
    "relUrl": "/content/python/objects.html#triangle"
  },"669": {
    "doc": "Objects",
    "title": "All Objects",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/python/objects.html#all-objects",
    "relUrl": "/content/python/objects.html#all-objects"
  },"670": {
    "doc": "Objects",
    "title": "ARENA UI Card",
    "content": "Create an arenaui-card . Card(title, body, ...) . ",
    "url": "https://docs.arenaxr.org/content/python/objects.html#arena-ui-card",
    "relUrl": "/content/python/objects.html#arena-ui-card"
  },"671": {
    "doc": "Objects",
    "title": "ARENA UI ButtonPanel",
    "content": "Create an arenaui-button-panel . ButtonPanel(title, buttons=[Button(...), ...], ...) . ",
    "url": "https://docs.arenaxr.org/content/python/objects.html#arena-ui-buttonpanel",
    "relUrl": "/content/python/objects.html#arena-ui-buttonpanel"
  },"672": {
    "doc": "Objects",
    "title": "ARENA UI Prompt",
    "content": "Create an arenaui-prompt . Prompt(title, description, ...) . ",
    "url": "https://docs.arenaxr.org/content/python/objects.html#arena-ui-prompt",
    "relUrl": "/content/python/objects.html#arena-ui-prompt"
  },"673": {
    "doc": "Objects",
    "title": "Camera",
    "content": "camera . Camera(object_id, ...) . ",
    "url": "https://docs.arenaxr.org/content/python/objects.html#camera",
    "relUrl": "/content/python/objects.html#camera"
  },"674": {
    "doc": "Objects",
    "title": "GLTF",
    "content": "Create a gltf 3D model: . GLTF(url, ...) . ",
    "url": "https://docs.arenaxr.org/content/python/objects.html#gltf",
    "relUrl": "/content/python/objects.html#gltf"
  },"675": {
    "doc": "Objects",
    "title": "Hands",
    "content": "hands . HandLeft(object_id, ...) HandRight(object_id, ...) . ",
    "url": "https://docs.arenaxr.org/content/python/objects.html#hands",
    "relUrl": "/content/python/objects.html#hands"
  },"676": {
    "doc": "Objects",
    "title": "Image",
    "content": "Create a flat image: . Image(url, width, height,...) . ",
    "url": "https://docs.arenaxr.org/content/python/objects.html#image",
    "relUrl": "/content/python/objects.html#image"
  },"677": {
    "doc": "Objects",
    "title": "Light",
    "content": "Create a light: . Light(color, ...) . ",
    "url": "https://docs.arenaxr.org/content/python/objects.html#light",
    "relUrl": "/content/python/objects.html#light"
  },"678": {
    "doc": "Objects",
    "title": "Line",
    "content": "Create a thin line: . Line(start, end, color, ...) . ",
    "url": "https://docs.arenaxr.org/content/python/objects.html#line",
    "relUrl": "/content/python/objects.html#line"
  },"679": {
    "doc": "Objects",
    "title": "Ocean",
    "content": "Create an animated ocean plane: . Ocean(color, ...) . ",
    "url": "https://docs.arenaxr.org/content/python/objects.html#ocean",
    "relUrl": "/content/python/objects.html#ocean"
  },"680": {
    "doc": "Objects",
    "title": "Point Cloud",
    "content": "Create a pcd model: . PcdModel(url, pointColor, ...) . ",
    "url": "https://docs.arenaxr.org/content/python/objects.html#point-cloud",
    "relUrl": "/content/python/objects.html#point-cloud"
  },"681": {
    "doc": "Objects",
    "title": "Gaussian Splat",
    "content": "Create a Gaussian splat model: . GaussianSplatting(src, ...) . ",
    "url": "https://docs.arenaxr.org/content/python/objects.html#gaussian-splat",
    "relUrl": "/content/python/objects.html#gaussian-splat"
  },"682": {
    "doc": "Objects",
    "title": "Text",
    "content": "Write 3D text: . Text(value, color, ...) . ",
    "url": "https://docs.arenaxr.org/content/python/objects.html#text",
    "relUrl": "/content/python/objects.html#text"
  },"683": {
    "doc": "Objects",
    "title": "THREE.js Scene",
    "content": "Create a three-js scene model: . ThreejsScene(url, ...) . ",
    "url": "https://docs.arenaxr.org/content/python/objects.html#threejs-scene",
    "relUrl": "/content/python/objects.html#threejs-scene"
  },"684": {
    "doc": "Objects",
    "title": "ThickLine",
    "content": "Create a thick-line: . ThickLine(path, lineWidth, color, ...) . ",
    "url": "https://docs.arenaxr.org/content/python/objects.html#thickline",
    "relUrl": "/content/python/objects.html#thickline"
  },"685": {
    "doc": "Objects",
    "title": "URDF",
    "content": "Create a urdf 3D model: . UrdfModel(url, joints, ...) . ",
    "url": "https://docs.arenaxr.org/content/python/objects.html#urdf",
    "relUrl": "/content/python/objects.html#urdf"
  },"686": {
    "doc": "Objects",
    "title": "Videosphere",
    "content": "Create a videosphere: . Videosphere(src, material, ...) . ",
    "url": "https://docs.arenaxr.org/content/python/objects.html#videosphere",
    "relUrl": "/content/python/objects.html#videosphere"
  },"687": {
    "doc": "Objects",
    "title": "Generic Object",
    "content": "For objects that might not exist yet (but may exist in AFRAME). Inherit from this class to create custom objects. Object(object_type, ...) . ",
    "url": "https://docs.arenaxr.org/content/python/objects.html#generic-object",
    "relUrl": "/content/python/objects.html#generic-object"
  },"688": {
    "doc": "Objects",
    "title": "Objects",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/python/objects.html",
    "relUrl": "/content/python/objects.html"
  },"689": {
    "doc": "Ocean",
    "title": "Ocean",
    "content": "Flat-shaded ocean primitive. All wire objects have a set of basic attributes {object_id, action, type, persist, data}. The data attribute defines the object-specific attributes . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/ocean.html#ocean",
    "relUrl": "/content/schemas/message/ocean.html#ocean"
  },"690": {
    "doc": "Ocean",
    "title": "Ocean Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | object_id | string |   | A uuid or otherwise unique identifier for this object. | Yes | . | persist | boolean | True | Persist this object in the database. | Yes | . | type | string; Must be: object | 'object' | AFrame 3D Object | Yes | . | action | string; One of: ['create', 'delete', 'update'] | 'create' | Message action create, update, delete. | Yes | . | ttl | integer |   | When applied to an entity, the entity will remove itself from DOM after the specified number of seconds. Update is allowed, which will reset the timer to start from that moment. | No | . | data | Ocean data |   | Ocean Data | Yes | . Ocean Data Attributes . | Attribute | Type | Default | Description | Required | . | object_type | string; Must be: ocean | ocean | 3D object type. | Yes | . | width | number | 10 | Width of the ocean area. | Yes | . | depth | number | 10 | Depth of the ocean area. | Yes | . | density | number | 10 | Density of waves. | No | . | amplitude | number | 0.1 | Wave amplitude. | No | . | amplitudeVariance | number | 0.3 | Wave amplitude variance. | No | . | speed | number | 1 | Wave speed. | No | . | speedVariance | number | 2 | Wave speed variance. | No | . | color | string | '#7AD2F7' | Wave color. | Yes | . | opacity | number | 0.8 | Wave opacity. | No | . | parent | string |   | Parent’s object_id. Child objects inherit attributes of their parent, for example scale and translation. | No | . | position | position |   | 3D object position. | Yes | . | rotation | rotation | {'w': -0.70711, 'x': 0.70711, 'y': 0, 'z': 0} | 3D object rotation in quaternion representation; Right-handed coordinate system. Euler degrees are deprecated in wire message format. | Yes | . | scale | scale |   | 3D object scale. | No | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/ocean.html#ocean-attributes",
    "relUrl": "/content/schemas/message/ocean.html#ocean-attributes"
  },"691": {
    "doc": "Ocean",
    "title": "Ocean",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/ocean.html",
    "relUrl": "/content/schemas/message/ocean.html"
  },"692": {
    "doc": "arena.objects.ocean",
    "title": "\narena.objects.ocean    ",
    "content": "class Ocean(arena.objects.arena_object.Object): Ocean object class to manage its properties in the ARENA: Flat-shaded ocean primitive. Parameters . | float amplitude: Wave amplitude. Defaults to '0.1' (optional) | float amplitudeVariance: Wave amplitude variance. Defaults to '0.3' (optional) | str color: Wave color. Defaults to '#7AD2F7' (optional) | float density: Density of waves. Defaults to '10' (optional) | float depth: Depth of the ocean area. Defaults to '10' (optional) | float opacity: Wave opacity. Defaults to '0.8' (optional) | float speed: Wave speed. Defaults to '1' (optional) | float speedVariance: Wave speed variance. Defaults to '2' (optional) | float width: Width of the ocean area. Defaults to '10' (optional) | . Ocean(width=10, depth=10, **kwargs) object_type = &#39;ocean&#39; Inherited Members . arena.objects.arena_object.Object type all_objects evt_handler update_handler animations delayed_prop_tasks update_attributes dispatch_animation remove_animation_at_index clear_animations clickable json_preprocess json_postprocess json get add remove exists arena.base_object.BaseObject json_encode ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/ocean.html",
    "relUrl": "/content/python-api/objects/ocean.html"
  },"693": {
    "doc": "arena.objects.ocean",
    "title": "arena.objects.ocean",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/ocean.html",
    "relUrl": "/content/python-api/objects/ocean.html"
  },"694": {
    "doc": "Octahedron",
    "title": "Octahedron",
    "content": "Octahedron Geometry. All wire objects have a set of basic attributes {object_id, action, type, persist, data}. The data attribute defines the object-specific attributes . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/octahedron.html#octahedron",
    "relUrl": "/content/schemas/message/octahedron.html#octahedron"
  },"695": {
    "doc": "Octahedron",
    "title": "Octahedron Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | object_id | string |   | A uuid or otherwise unique identifier for this object. | Yes | . | persist | boolean | True | Persist this object in the database. | Yes | . | type | string; Must be: object | 'object' | AFrame 3D Object | Yes | . | action | string; One of: ['create', 'delete', 'update'] | 'create' | Message action create, update, delete. | Yes | . | ttl | integer |   | When applied to an entity, the entity will remove itself from DOM after the specified number of seconds. Update is allowed, which will reset the timer to start from that moment. | No | . | data | Octahedron data |   | Octahedron Data | Yes | . Octahedron Data Attributes . | Attribute | Type | Default | Description | Required | . | object_type | string; Must be: octahedron | octahedron | 3D object type. | Yes | . | detail | integer | 0 | detail | No | . | radius | number | 1 | radius | Yes | . | parent | string |   | Parent’s object_id. Child objects inherit attributes of their parent, for example scale and translation. | No | . | position | position |   | 3D object position. | Yes | . | rotation | rotation |   | 3D object rotation in quaternion representation; Right-handed coordinate system. Euler degrees are deprecated in wire message format. | Yes | . | scale | scale |   | 3D object scale. | No | . | animation | animation |   | Animate and tween values. | No | . | armarker | armarker |   | A location marker (such as an AprilTag, a lightAnchor, or an UWB tag), used to anchor scenes, or scene objects, in the real world. | No | . | click-listener | click-listener |   | Object will listen for mouse events like clicks. | No | . | box-collision-listener | box-collision-listener |   | Listen for bounding-box collisions with user camera and hands. Must be applied to an object or model with geometric mesh. Collisions are determined by course bounding-box overlaps. | No | . | collision-listener | string |   | Name of the collision-listener, default can be empty string. Collisions trigger click events. | No | . | blip | blip |   | When the object is created or deleted, it will animate in/out of the scene instead of appearing/disappearing instantly. Must have a geometric mesh. | No | . | static-body | static-body |   | A fixed-position or animated object. Other objects may collide with static bodies, but static bodies themselves are unaffected by gravity and collisions. | No | . | dynamic-body | dynamic-body |   | A freely-moving object. Dynamic bodies have mass, collide with other objects, bounce or slow during collisions, and fall if gravity is enabled. | No | . | goto-landmark | goto-landmark |   | Teleports user to the landmark with the given name. Requires click-listener. | No | . | goto-url | goto-url |   | Load new URL when object is clicked. Requires click-listener. | No | . | hide-on-enter-ar | boolean; Must be: True | True | Hide object when entering AR. Remove component to not hide. | No | . | hide-on-enter-vr | boolean; Must be: True | True | Hide object when entering VR. Remove component to not hide. | No | . | show-on-enter-ar | boolean; Must be: True | True | Show object when entering AR. Hidden otherwise. | No | . | show-on-enter-vr | boolean; Must be: True | True | Show object when entering VR. Hidden otherwise. | No | . | impulse | impulse |   | Apply an impulse to an object to set it in motion. This happens in conjunction with an event. Requires click-listener and physics. | No | . | landmark | landmark |   | Define entities as a landmark; Landmarks appears in the landmark list and you can move (teleport) to them; You can define the behavior of the teleport: if you will be at a fixed or random distance, looking at the landmark, fixed offset or if it is constrained by a navmesh (when it exists). | No | . | material-extras | material-extras |   | Define extra material properties, namely texture encoding, whether to render the material’s color and render order. | No | . | shadow | shadow |   | The shadow component enables shadows for an entity and its children. Adding the shadow component alone is not enough to display shadows in your scene. We must have at least one light with castShadow: true enabled. | No | . | sound | sound |   | The sound component defines the entity as a source of sound or audio. The sound component can be positional and is thus affected by the component’s position. | No | . | textinput | textinput |   | Opens an HTML prompt when clicked. Sends text input as an event on MQTT. Requires click-listener. | No | . | url | string |   | Use File Store paths under ‘store/users/username’, see CDN and other storage options in the description above. | No | . | remote-render | remote-render |   | Whether or not an object should be remote rendered [Experimental]. | No | . | video-control | video-control |   | Adds a video to an entity and controls its playback. | No | . | attribution | attribution |   | Attribution Component. Saves attribution data in any entity. | No | . | spe-particles | spe-particles |   | GPU based particle systems in A-Frame. | No | . | look-at | string |   | The look-at component defines the behavior for an entity to dynamically rotate or face towards another entity or position. Use ‘#my-camera’ to face the user camera, otherwise can take either a vec3 position or a query selector to another entity. | No | . | buffer | boolean | True | Transform geometry into a BufferGeometry to reduce memory usage at the cost of being harder to manipulate (geometries only: box, circle, cone, …). | No | . | jitsi-video | jitsi-video |   | Apply a jitsi video source to the geometry. | No | . | material | material | {'color': '#7f7f7f'} | The material properties of the object’s surface. | No | . | multisrc | multisrc |   | Define multiple visual sources applied to an object. | No | . | screenshareable | boolean | True | Whether or not a user can screenshare on an object. | No | . | skipCache | boolean | False | Disable retrieving the shared geometry object from the cache. (geometries only: box, circle, cone, …). | No | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/octahedron.html#octahedron-attributes",
    "relUrl": "/content/schemas/message/octahedron.html#octahedron-attributes"
  },"696": {
    "doc": "Octahedron",
    "title": "Octahedron",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/octahedron.html",
    "relUrl": "/content/schemas/message/octahedron.html"
  },"697": {
    "doc": "arena.objects.octahedron",
    "title": "\narena.objects.octahedron    ",
    "content": "class Octahedron(arena.objects.arena_object.Object): Octahedron object class to manage its properties in the ARENA: Octahedron Geometry. Parameters . | int detail: detail (optional) | float radius: radius Defaults to '1' (optional) | . Octahedron(**kwargs) object_type = &#39;octahedron&#39; Inherited Members . arena.objects.arena_object.Object type all_objects evt_handler update_handler animations delayed_prop_tasks update_attributes dispatch_animation remove_animation_at_index clear_animations clickable json_preprocess json_postprocess json get add remove exists arena.base_object.BaseObject json_encode ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/octahedron.html",
    "relUrl": "/content/python-api/objects/octahedron.html"
  },"698": {
    "doc": "arena.objects.octahedron",
    "title": "arena.objects.octahedron",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/octahedron.html",
    "relUrl": "/content/python-api/objects/octahedron.html"
  },"699": {
    "doc": "Optical Markers",
    "title": "Optical Markers",
    "content": "ARENA can support different optical markers: Apriltags, has experimental (outside the mainline code) support for lightanchors/flash, and more are expected to be added. note . You can obtain Apriltags with different ids and sizes in our Apriltag repo. ",
    "url": "https://docs.arenaxr.org/content/xr/optical-markers.html",
    "relUrl": "/content/xr/optical-markers.html"
  },"700": {
    "doc": "Optical Markers",
    "title": "Requirements",
    "content": "Optical Markers require support for ARENA’s computer vision processing pipeline, which is supported by the custom camera access implemented in WebXR Viewer and XR Browser, and also by WebXR’s raw camera access currently implemented in Chrome. Check out the Platforms Section for details on browsers and platforms that support optical markers in ARENA. warning . IMPORTANT: Use the device in landscape orientation . The ARENA localization solver for optical markers assumes that the device is in portrait orientation, and we recommend locking the device to landscape orientation. For example, the picture below shows a blue box at the origin scene. While not visible, the blue box is overlaid on an AprilTag anchoring the Scene. The device is in landscape orientation. ",
    "url": "https://docs.arenaxr.org/content/xr/optical-markers.html#requirements",
    "relUrl": "/content/xr/optical-markers.html#requirements"
  },"701": {
    "doc": "Optical Markers",
    "title": "Attaching an ARMarker Component to Scene Objects",
    "content": "Optical markers are added to ARENA scenes by attaching ARMarker components to scene objects. To perform relocalization, the ARENA location solver must know the pose of the detected marker. It will first try to find objects in the Scene with ARMarkers attached to use the pose of these objects, and if no data about a marker is found in the Scene, it will query ATLAS. Markers with ID 0, however, are assumed to mark the origin: 0, 0, 0 (x, y, z). You can override the ID 0 parameters in the Scene if desired. This section will describe how this can be achieved and provide some examples. An ARENA scene might contain several markers with GPS coordinates and local coordinates referenced from the Scene’s origin. The following image exemplifies how to attach an ARMarker component to a geometry object in a scene (in this case, a box), using the scene builder: . The ARMarker component that will appear at the end of the form will allow defining properties of the marker: . The image above shows the default ARMarker component attributes. A few more attributes, such as GPS coordinates and a URL attached to the marker can also be added. The examples below will show how to use these properties in more detail using Apriltags, the most common ARMarkers used in ARENA. ",
    "url": "https://docs.arenaxr.org/content/xr/optical-markers.html#attaching-an-armarker-component-to-scene-objects",
    "relUrl": "/content/xr/optical-markers.html#attaching-an-armarker-component-to-scene-objects"
  },"702": {
    "doc": "Optical Markers",
    "title": "Coordinate System",
    "content": "In ARENA’s world coordinate system (shown as i. in the figure below), positive in the x-axis is to the right, positive y-axis is up, and positive z-axis is out of the screen. The origin at 0, 0, 0 (x, y, z) is the center of the world. The figure shows examples of markers and how their orientation aligns with ARENA’s coordinate system. For example, a vertical marker along the world’s z-axis (shown as ii. in the figure) does not need a rotation as this aligns with the marker’s local coordinate system. However, a marker laid horizontal on the ground (iii. in the figure) is rotated by -90° in the x-axis. The ARENA pose solver knows the pose of the marker by looking at the object to which a corresponding ARMarker component is attached. To indicate the pose of markers, we enter it as the pose of an object placed in the Scene to which we link an ARMarker component that has the identifier of the marker. See the ‘fixed origin maker’ example below for a concrete example. ",
    "url": "https://docs.arenaxr.org/content/xr/optical-markers.html#coordinate-system",
    "relUrl": "/content/xr/optical-markers.html#coordinate-system"
  },"703": {
    "doc": "Optical Markers",
    "title": "Examples",
    "content": "Apriltags are a common type of low-bit density optical markers that can be used in ARENA. ARENA can decode AprilTags (36h11 family) in browsers that allow camera access (see the Requirements Section for details). The following examples show how to use Apriltags to anchor content in the real world. Fixed Origin Marker . To add a marker and reference the Scene’s origin in the real world, we add an object (named ‘origin-marker’ in the example) that will visually represent the marker at coordinates 0,0,0 (x, y, z). Then, we attach an ARMarker component to it. Because the marker is laid horizontally on the ground, we have to rotate the object (that visually represents the marker) by -90° in the x-axis. Check the example Scene in ARENA. The AprilTag references the origin of the Scene in the real world. Here, we placed it near the corner of the carpet: . In the example, we add a .gltf to the Scene that visually represents the AprilTag and the reference axis. This object is placed at 0, 0, 0 (x, y, z), and we attached an ARMarker with id 0 and size 150 mm (the id and size of the AprilTag placed on the floor), and set it as static (dynamic=false) and not buildable (buildable=false). The object (the .gltf) is rotated by -90° in the x-axis. The entire object definition that you can enter in the scene builder is in our ARMarker schema definition. Dynamic Marker . To use a dynamic marker, we need to first reference the Scene in the real world. As shown in the previous example, we can do this by adding an AprilTag at the origin. Let us say we want to move a geometry, say a box, in the Scene. We add the box to the Scene and attach an ARMarker that we set as dynamic (this must be a different id than the AprilTag used to reference the Scene’s origin). The second object will move in the Scene every time an observer with permission to change the Scene sees the corresponding AprilTag. This last part is essential; observers who cannot change the Scene will not update the box’s position. Check the example here. We have an AprilTag that references the origin and a dynamic tag that moves the box. Notably, the dynamic ARMarker component should define the id of the dynamic marker (1) and the size (50 mm). The viewer device was an IPad with XRViewer, and the user was logged in ARENA to change the box’s position once it detected the dynamic AprilTag. In the scene builder, you can edit the Scene permissions to make sure the user logged in to the viewer device can edit the Scene: . For reference, these are the attributes of the box object (named ‘dynamic-box’) we attached a dynamic ARMarker (note that the position is just the initial static position; it will be updated once the marker gets in the view of a device with permissions to update it). ",
    "url": "https://docs.arenaxr.org/content/xr/optical-markers.html#examples",
    "relUrl": "/content/xr/optical-markers.html#examples"
  },"704": {
    "doc": "OptiTrack",
    "title": "OptiTrack",
    "content": "The ARENA team often uses OptiTrack motion capture systems for indoor tracking and to ground truth localization techniques. We integrated OptiTrack with ARENA in the lab and expect to package this capability soon. Coming Soon . Stay tuned for more details… . ",
    "url": "https://docs.arenaxr.org/content/xr/optitrack.html",
    "relUrl": "/content/xr/optitrack.html"
  },"705": {
    "doc": "UI Panel",
    "title": "UI Panel",
    "content": "The rounded UI panel primitive. ",
    "url": "https://docs.arenaxr.org/content/schemas/message/panel.html#ui-panel",
    "relUrl": "/content/schemas/message/panel.html#ui-panel"
  },"706": {
    "doc": "UI Panel",
    "title": "UI Panel Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | depth | number | 0.05 | depth | Yes | . | height | number | 1 | height | Yes | . | width | number | 1 | width | Yes | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/panel.html#ui-panel-attributes",
    "relUrl": "/content/schemas/message/panel.html#ui-panel-attributes"
  },"707": {
    "doc": "UI Panel",
    "title": "UI Panel",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/panel.html",
    "relUrl": "/content/schemas/message/panel.html"
  },"708": {
    "doc": "Panoramic Rooms",
    "title": "Panoramic Video Rooms",
    "content": "You can use the ARENA to setup a 360° panoramic streaming video room, or several rooms with a video camera like the 360° Ricoh Theta Z1 or Theta X. ",
    "url": "https://docs.arenaxr.org/content/overview/panoramic.html#panoramic-video-rooms",
    "relUrl": "/content/overview/panoramic.html#panoramic-video-rooms"
  },"709": {
    "doc": "Panoramic Rooms",
    "title": "General Performance Requirements",
    "content": "To ensure the upload of the 360 video stream isn’t diminished before other users get a chance to download it, each 360 camera should have: . | Updated camera firmware: Many of the above cameras have updates which prevent them from overheating and shutting down in the middle of your live video stream. Contact the camera manufacturer website for updates. | A fast computer. This is a little hard to measure, but slower computers will diminish the video upload. We’ve had good results with the MacBook Pro M1 chip. Our Intel x86 MacBook Pros have struggled to have enough memory in the browser for the Javascript code to marshall high frame rates of 2K 360 video streams. Other Windows/Linux machines may work. Laptops are recommended for flexibility. | A wired network connection of at least 1 Gbps since we need to make sure our upload of the 360 video stream has as much bandwidth as possible and without the variable instability of wireless connections. Wifi connections will limit your resolution down to about 50 Mbps. | Wired power: Don’t rely on the laptop battery, 3D web and 360 cameras will consume power quickly. | Optimally a 2K output stream from the camera so detail renders well, higher outputs like 4K may work, but it’s untested. | Google Chrome or Microsoft Edge. Firefox and other browsers have trouble ingesting the 2:1 video ratio required. Check the A/V Setup screen when entering the scene for strange visual artifacts. | ARENA Web Core version 1.11 or higher. | Shutdown and close any unnecessary applications and browser tabs. | Do not stream more than one camera per computer. | . ",
    "url": "https://docs.arenaxr.org/content/overview/panoramic.html#general-performance-requirements",
    "relUrl": "/content/overview/panoramic.html#general-performance-requirements"
  },"710": {
    "doc": "Panoramic Rooms",
    "title": "Setup World Single Panoramic Room",
    "content": "Setup a scene where the 360 video stream encompasses the entire world, and while other users can move in it, the “walls” of the video are 5000 meters away, so even if users move, the videosphere walls appear to stay in place. This 5000 meter radius is the default for a videosphere object. | In Build, add a videosphere object. | Add the jitsi-video attribute to the videosphere object. | Add a displayName for the jitsi-video attribute. The JSON should look like this: { \"object_id\": \"my-videosphere-object\", \"persist\": true, \"type\": \"object\", \"action\": \"update\", \"data\": { \"object_type\": \"videosphere\", \"position\": { \"x\": 0, \"y\": 0, \"z\": 0 }, \"rotation\": { \"x\": 0, \"y\": 0, \"z\": 0, \"w\": 1 }, \"radius\": 500, \"jitsi-video\": { \"displayName\": \"360 cam\" } } } . | Remove the ground and sky effects from your scene, your world scale videosphere replaces them. | To do this, add a scene-options object if you don’t already have one and remove the environment presets by adding attributes that override the default theme, sky, and ground: { \"object_id\": \"scene-options\", \"persist\": true, \"type\": \"scene-options\", \"action\": \"update\", \"data\": { \"env-presets\": { \"active\": true, \"preset\": \"none\", \"ground\": \"none\", \"skyType\": \"none\" }, \"scene-options\": { ... } } } . | Follow Connect the 360 camera to the ARENA. at the end of this page. | . ",
    "url": "https://docs.arenaxr.org/content/overview/panoramic.html#setup-world-single-panoramic-room",
    "relUrl": "/content/overview/panoramic.html#setup-world-single-panoramic-room"
  },"711": {
    "doc": "Panoramic Rooms",
    "title": "Setup Digital Twin Single Panoramic Room",
    "content": "Match a videosphere to a space in a scanned model of a space or room. Users may feel like they are joining you live and can enter and leave a “streaming” room. | Camera position is important. You may want to mount the camera lens in the exact center of the room, on a table or tripod or both. | Assumption: you already have a scanned room/space converted to GLB and loaded into the ARENA. | In Build, add a videosphere object similar to Setup World Single Panoramic Room but with some crucial differences. | Add a displayName for the jitsi-video attribute, but also you are going to scale down this videosphere to the size and position of your room to match your scanned model. | Our conference room is a small 5x7 meters and 3 meters high, not a perfect cube, so we’ll position it at the center of the scanned room model at position x=2.7, z=-3.6, which matches the position of the camera in reality. | We’ll set the height of the sphere at position y=2, which matches the real position of the the camera lens in the room at 2 meters. | At the position we’ve mounted the camera we are 90 degrees off the model, so we can set rotation of the sphere at y=-90. | We want the outside edge of the sphere wall to just graze the shortest longitudinal axis of the room to not miss any of the movement of the people in the room, so we will set the radius at 2.5 meters since we are in the center between the shortest wall of 5 meters. | . { \"object_id\": \"360-conference-room4\", \"persist\": true, \"type\": \"object\", \"action\": \"update\", \"data\": { \"object_type\": \"videosphere\", \"position\": { \"x\": 2.7, \"y\": 2, \"z\": -3.6 }, \"rotation\": { \"x\": 0, \"y\": -0.70711, \"z\": 0, \"w\": 0.70711 }, \"radius\": 2.5, \"jitsi-video\": { \"displayName\": \"Conference Room 4\" } } } . | Leave the ground and sky effects from your scene intact, you will need them for context. | Follow Connect the 360 camera to the ARENA. and the end of this page. | Optional: We recommend extending the laptop’s view of the virtual 3D ARENA using a wall mounted or freestanding monitor. In this way, physical people next to the 360 camera can view the virtual camera views of remote participants. | . ",
    "url": "https://docs.arenaxr.org/content/overview/panoramic.html#setup-digital-twin-single-panoramic-room",
    "relUrl": "/content/overview/panoramic.html#setup-digital-twin-single-panoramic-room"
  },"712": {
    "doc": "Panoramic Rooms",
    "title": "Setup Digital Twin Multiple Panoramic Rooms",
    "content": "Repeat the instructions for Setup Digital Twin Single Panoramic Room, just make sure you give each camera a different Display Name and make sure each videosphere object has that unique Display Name in it’s jitsi-video attribute. ",
    "url": "https://docs.arenaxr.org/content/overview/panoramic.html#setup-digital-twin-multiple-panoramic-rooms",
    "relUrl": "/content/overview/panoramic.html#setup-digital-twin-multiple-panoramic-rooms"
  },"713": {
    "doc": "Panoramic Rooms",
    "title": "Connect 360 Camera to ARENA",
    "content": ". | Connect the 360 camera to the computer and start the camera’s “live stream”. | Open the scene in Chrome/Edge and select the 360 camera on the A/V Setup dialog and you should see a 2:1 radio preview of the video stream. | Make sure your Display Name on the A/V Setup dialog is the same as the displayName of the jitsi-video attribute above. | Enter Scene, and the 3D sphere in the scene will appear white, then black if you wait. | Click the camera button in the upper right corner of the browser and you should see a preview again, as well as the video displayed on the “walls” of the 3D sphere. | Click the microphone button if you want. | . ",
    "url": "https://docs.arenaxr.org/content/overview/panoramic.html#connect-360-camera-to-arena",
    "relUrl": "/content/overview/panoramic.html#connect-360-camera-to-arena"
  },"714": {
    "doc": "Panoramic Rooms",
    "title": "Create a Virtual Mirror",
    "content": "To complete the effect for your physical participants, you can use a monitor or TV, preferably against a wall, to reflect visiting virtual participants back to the physical participants. To do this, we will reverse-mirror your ARENA browser view from your laptop to the wall monitor. Reverse-mirroring can be done in several ways, and in this example we will use OBS Studio. This only works for the Setup World Single Panoramic Room configuration. | You should have a 360 camera connected to your laptop and the ARENA website open in a browser to the scene you constructed in the above steps. | Connect your wall monitor to your laptop, and configure it to be an extended desktop, not mirrored. | Browser: Use the WASD-keys or arrow-keys to position your ARENA browser view outside the videosphere, exactly where your wall monitor appears on the edge of the videosphere; your ARENA view should now be looking into the center of the sphere now. | Browser: Expand your ARENA browser window to fullscreen on your laptop desktop. | OBS: On the Sources tab, add a new Source, selecting Screen Capture; you will see an infinite mirror effect. | OBS: Move the OBS window from your laptop desktop to the extended desktop on the wall monitor; the infinite mirror effect should end. | OBS: Perhaps rename this Source from the default name Screen Capture to something like Reverse Mirror if you want to reuse it later. | OBS: Select your desktop view until it has a red outline, then Edit &gt; Transform &gt; Flip Horizontal. OPTIONAL, skip this step if you don’t want the full mirror-effect. | OBS: Expand your OBS window to fullscreen to fill the entire wall monitor. | OBS: For more screen real estate, you can close some open tabs; disable Docks &gt; Scenes, Docks &gt; Sources, etc… | OBS: For even more screen real estate, also disable View &gt; Source Toolbar, View &gt; Status Bar, etc… | Now you should see a reflected live virtual scene like the image below and you should be able to see any virtual participants that enter the sphere on the wall monitor. | . goal . Build a scene in which you host a meeting using a 360 videosphere, such that it serves local and remote participants in full Hybrid-fashion. ",
    "url": "https://docs.arenaxr.org/content/overview/panoramic.html#create-a-virtual-mirror",
    "relUrl": "/content/overview/panoramic.html#create-a-virtual-mirror"
  },"715": {
    "doc": "Panoramic Rooms",
    "title": "Panoramic Rooms",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/overview/panoramic.html",
    "relUrl": "/content/overview/panoramic.html"
  },"716": {
    "doc": "URL Parameters",
    "title": "URL Parameters",
    "content": "For advanced users, the ARENA accepts URL parameters to override some internal defaults. These are passed in the address bar, after the scene name, e.g.: https://arenaxr.org/public/scenename/?name=MyName&amp;scene=AScene . ",
    "url": "https://docs.arenaxr.org/content/interface/params.html",
    "relUrl": "/content/interface/params.html"
  },"717": {
    "doc": "URL Parameters",
    "title": "URL Beginner",
    "content": "The Scenes page includes a set of easy checkboxes to change more common URL parameters you may want to use: https://arenaxr.org/scenes. | Click My Scenes and select your scene name. | Click Scene URL Options and check the boxes you need. | Change scene permissions if needed. | Use the buttons to enter the scene or copy the scene link with parameters to share with others. | . ",
    "url": "https://docs.arenaxr.org/content/interface/params.html#url-beginner",
    "relUrl": "/content/interface/params.html#url-beginner"
  },"718": {
    "doc": "URL Parameters",
    "title": "URL Advanced",
    "content": "The following URL parameters are accepted, beginner or advanced. The advanced parameters may have performance consequences that beginners may want to avoid. | Parameter | Type | Level | Description | . | armode | bool | beginner | Instantly enter AR mode, and Do not load models with hide-on-enter-ar (allows opening scenes with large models that are not visible in AR). | . | ATLASurl | string | advanced | URL of ATLAS (e.g. ATLASurl=//atlas.conix.io) | . | auth | string | beginner | Save the authentication method for the browser session (e.g. auth=anonymous, or auth=google) | . | build3d | bool | advanced | Load A-Frame Inspector with MQTT publish support. | . | camFollow | string | advanced | Force camera pose to the same as a named object-id (e.g. camFollow=Box123ObjectName) | . | camUpdateIntervalMs | string | advanced | Minimum camera update interval in milliseconds (e.g. camUpdateIntervalMs=100) | . | confstats | bool | advanced | Enable logging to MQTT of conference quality stats. | . | demoMode | bool | beginner | Removal of screen settings and chat buttons overlay from scene. | . | fixedCamera | string | advanced | Sets the camera name to the given value and enables VIO output to realm/vio/scene-name/camera-name ; fixedCamera=iPhone will set the camera name exactly to the given value (not add any prefix/suffix) | . | hudstats | bool | advanced | Render a HUD of performance/memory stats. | . | lat | float | advanced | Override device location; (e.g. lat=40.4427) | . | long | float | advanced | Override device location; (e.g. long=79.9430) | . | mqttHost | string | advanced | Override MQTT host address (e.g. mqttHost=arenaxr.org) | . | name | string | advanced | Set user name (e.g. name=MyName) | . | noav | bool | beginner | Disables videoconferencing for this browser only. | . | noname | bool | beginner | Handles display of user name on the screen. False: (default) display the user name. True: Do not display the user name. | . | noreticle | bool | beginner | In AR, change the reticle ring to transparent when true, gray when false (default). | . | objectId | string | advanced | Used with build3d param to focus Inspector omn the named object-id. | . | scene | string | advanced | Set scene name (e.g. scene=AScene) | . | skipav | bool | beginner | Skips the webcam, speaker, microphone setup modal. Attempts to use previously selected devices, or system defaults | . | startCoords | string | advanced | User starting x, y, z coordinates in the 3D environment (e.g. startCoords=0,1.6,0) | . | startLastPos | bool | beginner | User starts at the last position recorded on this browser (saved per heartbeat in localStorage) | . | vr | bool | beginner | Do not load models with hide-on-enter-vr (allows opening scenes with large models that are not visible in VR). | . ",
    "url": "https://docs.arenaxr.org/content/interface/params.html#url-advanced",
    "relUrl": "/content/interface/params.html#url-advanced"
  },"719": {
    "doc": "PCD Model",
    "title": "PCD Model",
    "content": "Load a PCD model. Format: Point Clouds. See guidance to store paths under ARENA File Store, CDN, or DropBox. All wire objects have a set of basic attributes {object_id, action, type, persist, data}. The data attribute defines the object-specific attributes . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/pcd-model.html#pcd-model",
    "relUrl": "/content/schemas/message/pcd-model.html#pcd-model"
  },"720": {
    "doc": "PCD Model",
    "title": "PCD Model Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | object_id | string |   | A uuid or otherwise unique identifier for this object. | Yes | . | persist | boolean | True | Persist this object in the database. | Yes | . | type | string; Must be: object | 'object' | AFrame 3D Object | Yes | . | action | string; One of: ['create', 'delete', 'update'] | 'create' | Message action create, update, delete. | Yes | . | ttl | integer |   | When applied to an entity, the entity will remove itself from DOM after the specified number of seconds. Update is allowed, which will reset the timer to start from that moment. | No | . | data | PCD Model data |   | PCD Model Data | Yes | . PCD Model Data Attributes . | Attribute | Type | Default | Description | Required | . | object_type | string; Must be: pcd-model | pcd-model | 3D object type. | Yes | . | url | string |   | Use File Store paths under ‘store/users/username’, see CDN and other storage options in the description above. | Yes | . | pointSize | number | 0.01 | Size of the points. | Yes | . | pointColor | string | '' | Color of the points. | No | . | opacity | number | 1 | Opacity of all points. | Yes | . | parent | string |   | Parent’s object_id. Child objects inherit attributes of their parent, for example scale and translation. | No | . | position | position |   | 3D object position. | Yes | . | rotation | rotation |   | 3D object rotation in quaternion representation; Right-handed coordinate system. Euler degrees are deprecated in wire message format. | Yes | . | scale | scale |   | 3D object scale. | Yes | . | animation | animation |   | Animate and tween values. | No | . | armarker | armarker |   | A location marker (such as an AprilTag, a lightAnchor, or an UWB tag), used to anchor scenes, or scene objects, in the real world. | No | . | click-listener | click-listener |   | Object will listen for mouse events like clicks. | No | . | box-collision-listener | box-collision-listener |   | Listen for bounding-box collisions with user camera and hands. Must be applied to an object or model with geometric mesh. Collisions are determined by course bounding-box overlaps. | No | . | collision-listener | string |   | Name of the collision-listener, default can be empty string. Collisions trigger click events. | No | . | blip | blip |   | When the object is created or deleted, it will animate in/out of the scene instead of appearing/disappearing instantly. Must have a geometric mesh. | No | . | static-body | static-body |   | A fixed-position or animated object. Other objects may collide with static bodies, but static bodies themselves are unaffected by gravity and collisions. | No | . | dynamic-body | dynamic-body |   | A freely-moving object. Dynamic bodies have mass, collide with other objects, bounce or slow during collisions, and fall if gravity is enabled. | No | . | goto-landmark | goto-landmark |   | Teleports user to the landmark with the given name. Requires click-listener. | No | . | goto-url | goto-url |   | Load new URL when object is clicked. Requires click-listener. | No | . | hide-on-enter-ar | boolean; Must be: True | True | Hide object when entering AR. Remove component to not hide. | No | . | hide-on-enter-vr | boolean; Must be: True | True | Hide object when entering VR. Remove component to not hide. | No | . | show-on-enter-ar | boolean; Must be: True | True | Show object when entering AR. Hidden otherwise. | No | . | show-on-enter-vr | boolean; Must be: True | True | Show object when entering VR. Hidden otherwise. | No | . | impulse | impulse |   | Apply an impulse to an object to set it in motion. This happens in conjunction with an event. Requires click-listener and physics. | No | . | landmark | landmark |   | Define entities as a landmark; Landmarks appears in the landmark list and you can move (teleport) to them; You can define the behavior of the teleport: if you will be at a fixed or random distance, looking at the landmark, fixed offset or if it is constrained by a navmesh (when it exists). | No | . | material-extras | material-extras |   | Define extra material properties, namely texture encoding, whether to render the material’s color and render order. | No | . | shadow | shadow |   | The shadow component enables shadows for an entity and its children. Adding the shadow component alone is not enough to display shadows in your scene. We must have at least one light with castShadow: true enabled. | No | . | sound | sound |   | The sound component defines the entity as a source of sound or audio. The sound component can be positional and is thus affected by the component’s position. | No | . | textinput | textinput |   | Opens an HTML prompt when clicked. Sends text input as an event on MQTT. Requires click-listener. | No | . | remote-render | remote-render |   | Whether or not an object should be remote rendered [Experimental]. | No | . | video-control | video-control |   | Adds a video to an entity and controls its playback. | No | . | attribution | attribution |   | Attribution Component. Saves attribution data in any entity. | No | . | spe-particles | spe-particles |   | GPU based particle systems in A-Frame. | No | . | look-at | string |   | The look-at component defines the behavior for an entity to dynamically rotate or face towards another entity or position. Use ‘#my-camera’ to face the user camera, otherwise can take either a vec3 position or a query selector to another entity. | No | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/pcd-model.html#pcd-model-attributes",
    "relUrl": "/content/schemas/message/pcd-model.html#pcd-model-attributes"
  },"721": {
    "doc": "PCD Model",
    "title": "PCD Model",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/pcd-model.html",
    "relUrl": "/content/schemas/message/pcd-model.html"
  },"722": {
    "doc": "arena.objects.pcd_model",
    "title": "\narena.objects.pcd_model    ",
    "content": "class PcdModel(arena.objects.arena_object.Object): PcdModel object class to manage its properties in the ARENA: Load a PCD model. Format: https://pointclouds.org/documentation/tutorials/index.html Point Clouds. See guidance to store paths under https://docs.arenaxr.org/content/interface/filestore.html ARENA File Store, CDN, or DropBox. Parameters . | float opacity: Opacity of all points. Defaults to '1' (optional) | str pointColor: Color of the points. (optional) | float pointSize: Size of the points. Defaults to '0.01' (optional) | str url: Use File Store paths under 'store/users/username', see CDN and other storage options in the description above. (optional) | . PcdModel(**kwargs) object_type = &#39;pcd-model&#39; Inherited Members . arena.objects.arena_object.Object type all_objects evt_handler update_handler animations delayed_prop_tasks update_attributes dispatch_animation remove_animation_at_index clear_animations clickable json_preprocess json_postprocess json get add remove exists arena.base_object.BaseObject json_encode ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/pcd_model.html",
    "relUrl": "/content/python-api/objects/pcd_model.html"
  },"723": {
    "doc": "arena.objects.pcd_model",
    "title": "arena.objects.pcd_model",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/pcd_model.html",
    "relUrl": "/content/python-api/objects/pcd_model.html"
  },"724": {
    "doc": "Persistence DB",
    "title": "Persistence",
    "content": "When a Scene in ARENA is loaded, its current state is fetched from a data store service that tracks the persisted state of the Scene. In this section, we detail some features of this essential ARENA service. Figure 3. Scene objects are first loaded from a data store service and then updated over PubSub. ",
    "url": "https://docs.arenaxr.org/content/architecture/persistence.html#persistence",
    "relUrl": "/content/architecture/persistence.html#persistence"
  },"725": {
    "doc": "Persistence DB",
    "title": "Object Persistence",
    "content": "Simply adding persist: true to the top level MQTT message for any create action and the object will be saved. A client then can make a HTTP request to the URL the server this service is running on to retrieve a list of initially loaded objects upon entering any scene. If an update message contains an explicit persist: false, then the data therein will not be saved in persistence. ",
    "url": "https://docs.arenaxr.org/content/architecture/persistence.html#object-persistence",
    "relUrl": "/content/architecture/persistence.html#object-persistence"
  },"726": {
    "doc": "Persistence DB",
    "title": "TTL",
    "content": "Adding a ttl (int seconds) to the top level MQTT message for any create action with persist:true signals that the object will be automatically deleted from persistence after set duration, as well as a corresponding delete action message sent over pubsub. ",
    "url": "https://docs.arenaxr.org/content/architecture/persistence.html#ttl",
    "relUrl": "/content/architecture/persistence.html#ttl"
  },"727": {
    "doc": "Persistence DB",
    "title": "Templates",
    "content": "Templates are special scenes that can be instantiated in entirety in other scenes. Templates are crafted in a scene name prefixed with the @ symbol, e.g. @myTemplate. The creation process is exactly the same as any other scene with C(R)UD actions on pubsub, with the exception that ttl values are not enforced. That is to say, the objects do not expire inside @template scenes, but rather activated upon instantiation. When a template is loaded, a parent container is first created in the target scene. This parent container follows the object ID naming scheme: templateId::instanceId, e.g. myTemplate::instance_0. Then every object inside the designated @template scene is replicated as descendants of the parent container. In this way, the parent can be repositioned, rotated, or scaled to adjust the template all at once. The objects within the template follow the naming scheme templateId::instanceId::objectId, e.g. myTemplate::instance_0::cube1. To load an instance of a template, send message to your desired target scene: . {\"action\":\"loadTemplate\",\"data\":{\"templateId\":\"myTemplate\",\"instanceId\":\"instance_0\"},\"object_id\":\"myClient\"} . The data object should also contain position, rotation, or scale directives if intended not to all default to 0 (or 1 for scale) values. You may also set a parent to attach the entire parent container to another existing object in the target scene. After the template load, all objects behave as typical in any scene. NOTES . If a template scene is empty with no objects, or an instance ID already exists within a target scene, the template load will fail silently. ",
    "url": "https://docs.arenaxr.org/content/architecture/persistence.html#templates",
    "relUrl": "/content/architecture/persistence.html#templates"
  },"728": {
    "doc": "Persistence DB",
    "title": "Implementation and Source",
    "content": "The persistence service listens on the pubsub message bus for ARENA objects to save to a mongodb store. | ARENA-persist repository | . ",
    "url": "https://docs.arenaxr.org/content/architecture/persistence.html#implementation-and-source",
    "relUrl": "/content/architecture/persistence.html#implementation-and-source"
  },"729": {
    "doc": "Persistence DB",
    "title": "Persistence DB",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/architecture/persistence.html",
    "relUrl": "/content/architecture/persistence.html"
  },"730": {
    "doc": "arena.event_loop.persistent_worker",
    "title": "\narena.event_loop.persistent_worker    ",
    "content": "class PersistentWorker(arena.event_loop.worker.Worker): Wrapper for an ARENA task that runs at a periodic interval. PersistentWorker(event_loop, func, event=None, interval=1000, *args, **kwargs) interval async def run(self): Inherited Members . arena.event_loop.worker.Worker event_loop func event args kwargs sleep print_traceback ",
    "url": "https://docs.arenaxr.org/content/python-api/event_loop/persistent_worker.html",
    "relUrl": "/content/python-api/event_loop/persistent_worker.html"
  },"731": {
    "doc": "arena.event_loop.persistent_worker",
    "title": "arena.event_loop.persistent_worker",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/event_loop/persistent_worker.html",
    "relUrl": "/content/python-api/event_loop/persistent_worker.html"
  },"732": {
    "doc": "Photogrammetry",
    "title": "Photogrammetry",
    "content": "In this section of the tutorial, you will construct a 3D model of a real world object using a technique known as photogrammetry. Photogrammetry estimates the 3D geometric properties (such as shape, size, and positions of objects) of an object from 2D images taken from different perspectives. While this might sound like magic, it is based on well-established physical principles. These principles, at a high level, span: . | How camera captures light and projects it onto image sensor | Algorithms that inferring camera spatial location at the time when images were captured | Depth estimation from 2D images sequences | 3D model reconstruction from color and depth information | . This tutorial will provide practical experience using photogrammetry. ",
    "url": "https://docs.arenaxr.org/content/overview/photogrammetry.html",
    "relUrl": "/content/overview/photogrammetry.html"
  },"733": {
    "doc": "Photogrammetry",
    "title": "Setting up your workflow",
    "content": "Download Meshroom, along with this dataset to a Linux / Windows computer that has an Nvidia GPU. After opening Meshroom and loading the dataset, you should see an interface as shown below. The key thing to notice is the Graph Editor panel located in the bottom left. This panel describes individual steps that photogrammetry involves. To get to know the purpose of each step, read the AliceVision photogrammetry writeup. Now, click start to generate your first 3D model. This will take several minutes or more depending on the compute power of your machine. After it’s finished, you should see sparse 3D point cloud shown in the 3D viewer panel: . If you look closely at the Scene section in 3D Viewer, you’ll find this is actually showing sparse point cloud and estimated camera position generated from Structure From Motion step (one of the blocks in Graph Editor), we can toggle the eye icon to show/hide this view. In fact, we can view output from many different steps in the viewer. Double clicking any blocks from Structure From Motion to Texturing will visualize the result. The final 3D model is generated at the Texturing step. To access the final output files, right click on the Texturing node and select Open Folder. You’ll find one OBJ file that contains the 3D model, two EXR files that represent texture maps, and one MTL file that describes how the model and texture files link to each other. ",
    "url": "https://docs.arenaxr.org/content/overview/photogrammetry.html#setting-up-your-workflow",
    "relUrl": "/content/overview/photogrammetry.html#setting-up-your-workflow"
  },"734": {
    "doc": "Photogrammetry",
    "title": "Capture your own model",
    "content": "Now that you have reconstructed a model from the dataset, it’s time to collect your own data to build a model. All you need is to take images from multiple views (make sure there’s enough overlapping view between images) and re-execute the same workflow. Try to scan a real world object that has some animate-able features, as you will be adding animations to this scan later on. This time, instead of running the pipeline only with default parameters in the nodes, explore how adjusting different parameters impacts the model quality. The knobs that might be of interest are: . | Texturing: Texture Size, Texture Downscale | Mesh Decimate (right click to add this node): Simplification Factor | . goal . Make sure you have a good-looking and complete scan (it’s ok if there are some holes/artifacts, we will fix those later). You will be using this model for the remaining tutorials, so create a virtual model you are proud of!! . ",
    "url": "https://docs.arenaxr.org/content/overview/photogrammetry.html#capture-your-own-model",
    "relUrl": "/content/overview/photogrammetry.html#capture-your-own-model"
  },"735": {
    "doc": "arena.objects.plane",
    "title": "\narena.objects.plane    ",
    "content": "class Plane(arena.objects.arena_object.Object): Plane object class to manage its properties in the ARENA: Plane Geometry. Parameters . | float height: height Defaults to '1' (optional) | int segmentsHeight: segments height Defaults to '1' (optional) | int segmentsWidth: segments width Defaults to '1' (optional) | float width: width Defaults to '1' (optional) | . Plane(**kwargs) object_type = &#39;plane&#39; Inherited Members . arena.objects.arena_object.Object type all_objects evt_handler update_handler animations delayed_prop_tasks update_attributes dispatch_animation remove_animation_at_index clear_animations clickable json_preprocess json_postprocess json get add remove exists arena.base_object.BaseObject json_encode ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/plane.html",
    "relUrl": "/content/python-api/objects/plane.html"
  },"736": {
    "doc": "arena.objects.plane",
    "title": "arena.objects.plane",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/plane.html",
    "relUrl": "/content/python-api/objects/plane.html"
  },"737": {
    "doc": "Plane",
    "title": "Plane",
    "content": "Plane Geometry. All wire objects have a set of basic attributes {object_id, action, type, persist, data}. The data attribute defines the object-specific attributes . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/plane.html#plane",
    "relUrl": "/content/schemas/message/plane.html#plane"
  },"738": {
    "doc": "Plane",
    "title": "Plane Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | object_id | string |   | A uuid or otherwise unique identifier for this object. | Yes | . | persist | boolean | True | Persist this object in the database. | Yes | . | type | string; Must be: object | 'object' | AFrame 3D Object | Yes | . | action | string; One of: ['create', 'delete', 'update'] | 'create' | Message action create, update, delete. | Yes | . | ttl | integer |   | When applied to an entity, the entity will remove itself from DOM after the specified number of seconds. Update is allowed, which will reset the timer to start from that moment. | No | . | data | Plane data |   | Plane Data | Yes | . Plane Data Attributes . | Attribute | Type | Default | Description | Required | . | object_type | string; Must be: plane | plane | 3D object type. | Yes | . | height | number | 1 | height | Yes | . | segmentsHeight | integer | 1 | segments height | No | . | segmentsWidth | integer | 1 | segments width | No | . | width | number | 1 | width | Yes | . | parent | string |   | Parent’s object_id. Child objects inherit attributes of their parent, for example scale and translation. | No | . | position | position |   | 3D object position. | Yes | . | rotation | rotation |   | 3D object rotation in quaternion representation; Right-handed coordinate system. Euler degrees are deprecated in wire message format. | Yes | . | scale | scale |   | 3D object scale. | No | . | animation | animation |   | Animate and tween values. | No | . | armarker | armarker |   | A location marker (such as an AprilTag, a lightAnchor, or an UWB tag), used to anchor scenes, or scene objects, in the real world. | No | . | click-listener | click-listener |   | Object will listen for mouse events like clicks. | No | . | box-collision-listener | box-collision-listener |   | Listen for bounding-box collisions with user camera and hands. Must be applied to an object or model with geometric mesh. Collisions are determined by course bounding-box overlaps. | No | . | collision-listener | string |   | Name of the collision-listener, default can be empty string. Collisions trigger click events. | No | . | blip | blip |   | When the object is created or deleted, it will animate in/out of the scene instead of appearing/disappearing instantly. Must have a geometric mesh. | No | . | static-body | static-body |   | A fixed-position or animated object. Other objects may collide with static bodies, but static bodies themselves are unaffected by gravity and collisions. | No | . | dynamic-body | dynamic-body |   | A freely-moving object. Dynamic bodies have mass, collide with other objects, bounce or slow during collisions, and fall if gravity is enabled. | No | . | goto-landmark | goto-landmark |   | Teleports user to the landmark with the given name. Requires click-listener. | No | . | goto-url | goto-url |   | Load new URL when object is clicked. Requires click-listener. | No | . | hide-on-enter-ar | boolean; Must be: True | True | Hide object when entering AR. Remove component to not hide. | No | . | hide-on-enter-vr | boolean; Must be: True | True | Hide object when entering VR. Remove component to not hide. | No | . | show-on-enter-ar | boolean; Must be: True | True | Show object when entering AR. Hidden otherwise. | No | . | show-on-enter-vr | boolean; Must be: True | True | Show object when entering VR. Hidden otherwise. | No | . | impulse | impulse |   | Apply an impulse to an object to set it in motion. This happens in conjunction with an event. Requires click-listener and physics. | No | . | landmark | landmark |   | Define entities as a landmark; Landmarks appears in the landmark list and you can move (teleport) to them; You can define the behavior of the teleport: if you will be at a fixed or random distance, looking at the landmark, fixed offset or if it is constrained by a navmesh (when it exists). | No | . | material-extras | material-extras |   | Define extra material properties, namely texture encoding, whether to render the material’s color and render order. | No | . | shadow | shadow |   | The shadow component enables shadows for an entity and its children. Adding the shadow component alone is not enough to display shadows in your scene. We must have at least one light with castShadow: true enabled. | No | . | sound | sound |   | The sound component defines the entity as a source of sound or audio. The sound component can be positional and is thus affected by the component’s position. | No | . | textinput | textinput |   | Opens an HTML prompt when clicked. Sends text input as an event on MQTT. Requires click-listener. | No | . | url | string |   | Use File Store paths under ‘store/users/username’, see CDN and other storage options in the description above. | No | . | remote-render | remote-render |   | Whether or not an object should be remote rendered [Experimental]. | No | . | video-control | video-control |   | Adds a video to an entity and controls its playback. | No | . | attribution | attribution |   | Attribution Component. Saves attribution data in any entity. | No | . | spe-particles | spe-particles |   | GPU based particle systems in A-Frame. | No | . | look-at | string |   | The look-at component defines the behavior for an entity to dynamically rotate or face towards another entity or position. Use ‘#my-camera’ to face the user camera, otherwise can take either a vec3 position or a query selector to another entity. | No | . | buffer | boolean | True | Transform geometry into a BufferGeometry to reduce memory usage at the cost of being harder to manipulate (geometries only: box, circle, cone, …). | No | . | jitsi-video | jitsi-video |   | Apply a jitsi video source to the geometry. | No | . | material | material | {'color': '#7f7f7f'} | The material properties of the object’s surface. | No | . | multisrc | multisrc |   | Define multiple visual sources applied to an object. | No | . | screenshareable | boolean | True | Whether or not a user can screenshare on an object. | No | . | skipCache | boolean | False | Disable retrieving the shared geometry object from the cache. (geometries only: box, circle, cone, …). | No | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/plane.html#plane-attributes",
    "relUrl": "/content/schemas/message/plane.html#plane-attributes"
  },"739": {
    "doc": "Plane",
    "title": "Plane",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/plane.html",
    "relUrl": "/content/schemas/message/plane.html"
  },"740": {
    "doc": "Cross Platform Support",
    "title": "Cross Platform Support",
    "content": "A core component of the ARENA is an environment to view and interact in virtual and augmented reality. ARENA leverages modern WebXR-capable browsers to support diverse platforms and rendering capabilities, and several existing frameworks were used to create the ARENA browser client: A-Frame, three.js and WebGL. This allows ARENA content to be viewed on a number of platforms ranging from standard web browsers on desktop computers and VR headsets (desktop browsers, FireFox Reality for VR headsets, Oculus Browser for VR headsets), on phones / tablets with passthrough AR (FireFox WebXR Viewer, Chrome) and wearable AR headsets (Hololens Edge Browser, Magic Leap Lumin Browser). All of these devices can interact in a multi-user manner with a consistent scene. In order to prototype the needs for future browser platforms, we are maintaining a custom Browser version of Firefox for iOS (based of WebXR Viewer) that is able to perform local image processing as well as 3D click I/O events. Figure 1. ARENA Browser Stack. ",
    "url": "https://docs.arenaxr.org/content/architecture/platforms.html",
    "relUrl": "/content/architecture/platforms.html"
  },"741": {
    "doc": "Position",
    "title": "Position",
    "content": "3D object position. ",
    "url": "https://docs.arenaxr.org/content/schemas/message/position.html#position",
    "relUrl": "/content/schemas/message/position.html#position"
  },"742": {
    "doc": "Position",
    "title": "Position Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | x | number | 0 | x | Yes | . | y | number | 0 | y | Yes | . | z | number | 0 | z | Yes | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/position.html#position-attributes",
    "relUrl": "/content/schemas/message/position.html#position-attributes"
  },"743": {
    "doc": "Position",
    "title": "Position",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/position.html",
    "relUrl": "/content/schemas/message/position.html"
  },"744": {
    "doc": "arena.attributes.position",
    "title": "\narena.attributes.position    ",
    "content": "class Position(arena.attributes.attribute.Attribute): Position attribute class to manage its properties in the ARENA: 3D object position. Usage: position=Position(...) or position=Position(x,y,z) or position=(x,y,z) . Parameters . | float x: x (optional) | float y: y (optional) | float z: z (optional) | . Position(x=None, y=None, z=None) def to_str(self): def distance_to(self, pos): array Inherited Members . arena.base_object.BaseObject add json_encode json ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/position.html",
    "relUrl": "/content/python-api/attributes/position.html"
  },"745": {
    "doc": "arena.attributes.position",
    "title": "arena.attributes.position",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/position.html",
    "relUrl": "/content/python-api/attributes/position.html"
  },"746": {
    "doc": "Post-Processing Effects",
    "title": "Post-Processing Effects",
    "content": "These effects are enabled in desktop and XR views. ",
    "url": "https://docs.arenaxr.org/content/schemas/message/post-processing.html#post-processing-effects",
    "relUrl": "/content/schemas/message/post-processing.html#post-processing-effects"
  },"747": {
    "doc": "Post-Processing Effects",
    "title": "Post-Processing Effects Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | bloom | object |   | Use bloom post-processing effect. | No | . | sao | object |   | Use scalable ambient occlusion (SAO) post-processing effect. | No | . | ssao | object |   | Use screen space ambient occlusion (SSAO) post-processing effect. | No | . | pixel | object |   | Use Pixelation post-processing effect. | No | . | glitch | object |   | Use Glitch post-processing effect. | No | . | fxaa | object |   | Use FXAA post-processing effect. You may want to place this last in effects list. | No | . | smaa | object |   | Use SMAA post-processing effect. You may want to place this last in effects list. | No | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/post-processing.html#post-processing-effects-attributes",
    "relUrl": "/content/schemas/message/post-processing.html#post-processing-effects-attributes"
  },"748": {
    "doc": "Post-Processing Effects",
    "title": "Post-Processing Effects",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/post-processing.html",
    "relUrl": "/content/schemas/message/post-processing.html"
  },"749": {
    "doc": "Poster Sessions",
    "title": "Usage",
    "content": "Run the script with: . make run . ",
    "url": "https://docs.arenaxr.org/content/tools/poster-session.html#usage",
    "relUrl": "/content/tools/poster-session.html#usage"
  },"750": {
    "doc": "Poster Sessions",
    "title": "Prerequisites",
    "content": "You need to have Make installed. The Makefile creates a virtual environment that deals with installing all dependencies, including the arena-py library (from pyPI; it does not use the development version in this repo). Before running, you also need to create a config file (default config.yaml). The repository includes a config_example.yaml that you can rename to config.yaml and adapt. Google Apps Script API . The script uses the google apps script API to get the spreadsheet data. Make sure to follow these google python library pre-requisites: . | A Google Cloud Platform project with Google Sheets API and Google Drive API enabled. See how to create a project | Authorization credentials for a desktop application (pasted into ‘credentials.json’). See how to create credentials. | . See Google’s Python Scripting documentation for more details. ",
    "url": "https://docs.arenaxr.org/content/tools/poster-session.html#prerequisites",
    "relUrl": "/content/tools/poster-session.html#prerequisites"
  },"751": {
    "doc": "Poster Sessions",
    "title": "Arguments",
    "content": "The script accepts the following optional arguments: . -h, --help show this help message and exit -c CONFIGFILE, --conf CONFIGFILE The configuration file. Default is ./config.yaml -s SCENENAME Scenename of the poster session (e.g. theme1, theme2) . To pass arguments to the script, add the ARGS variable when invoking Make, e.g.: . make ARGS='-h' make ARGS='--conf=myconfigfile.yaml' . ",
    "url": "https://docs.arenaxr.org/content/tools/poster-session.html#arguments",
    "relUrl": "/content/tools/poster-session.html#arguments"
  },"752": {
    "doc": "Poster Sessions",
    "title": "Environment Variables",
    "content": "Define environment variables to pass to the script in the Makefile. You can add new targets for these, e.g.: . cmu-test: venv (NAMESPACE=cmu SCENE=test $(VENV)/python pplacement.py $(ARGS)) . ",
    "url": "https://docs.arenaxr.org/content/tools/poster-session.html#environment-variables",
    "relUrl": "/content/tools/poster-session.html#environment-variables"
  },"753": {
    "doc": "Poster Sessions",
    "title": "Config file",
    "content": "Most of the time, you will want to invoke the script with no arguments: . make run . And define options in the config file (./config.yaml by default). Note: the repository includes a config_example.yaml that you can rename to config.yaml and adapt. The config file looks like this: . # persist objects (True/False) # True: objects will be saved and appear in the scene after a reload # False:objects will disappear after a reload (and only appear to clients already viewing the scene when they are created) persist: False # arena related definitions arena: host: arenaxr.org # default: arenaxr.org realm: realm # default: realm scenename: ececapstone # one of the scenes defined below # where is the input data: google spreadsheet id and cell range of the table input_table: # The spreadsheetid can be found in the google spreadsheet url e.g.: # https://docs.google.com/spreadsheets/d/**spreadsheetid**/edit#gid=0 # # For details, see: https://developers.google.com/sheets/api/guides/concepts spreadsheetid: 1jbFwUW_YWl6bAtsCJXcBDjPu1yojWso2uVY46dSGYW4 # The table_named_range is the A1 or R1C1 range of the data table; Must # include the sheet name ('Data Table') and the header, e.g: Data Table!A1:F10 # # For details, see: https://developers.google.com/sheets/api/guides/concepts named_range: Data Table!A1:G3 # where the icon files are icons: video: /store/users/arena/poster-imgs/video.png catalog: /store/users/arena/poster-imgs/catalog.png pdf: /store/users/arena/poster-imgs/pdf.png link: /store/users/arena/poster-imgs/link.png # wall settings (dimension, color, ...) wall: width: 9 # width of the wall; default: 9 height: 6 # height of the wall; default: 6 depth: 1 # depth of the wall; default: 1 img_height: 2.6 # heigh of the poster image; default: 2.6 color: 151, 171, 216 # color of the wall; default: 151, 171, 216 text_color: 0, 66, 117 # text color; default: 0, 66, 117 back_text_color: 96, 122, 163 # back text color; default: 0, 66, 117 text_font: 'exo2bold' # font title_maxlen: 150 # will add '...' after this amount of characters; default: 150 # ** Scene layout definitions (see below) ** ececapstone: layout: ROWCOL layout_args: row_dist: 20 col_dist: 20 row_off: 20 col_off: -50 . Note: The scenename command line argument overrides the config file scenename. ",
    "url": "https://docs.arenaxr.org/content/tools/poster-session.html#config-file",
    "relUrl": "/content/tools/poster-session.html#config-file"
  },"754": {
    "doc": "Poster Sessions",
    "title": "Poster Wall Layouts for Each Scene",
    "content": "You can add a section in the config file to define how the posters are arranged in each scene. To do this, add a section (to config.yaml) with the scene name and define the layout parameters. For example, the section below will define a line arrangement for the poster walls of scene test: . test: layout: LINE layout_args: length: 200 # length of the line (will try to layout the walls evenly spaced) rotation: 90 # rotation (degrees) of the walls alternating_rot: True # alternating rotation to make the walls face each other in pairs . The layouts supported and their options are shown below. ROWCOL: arrange walls in rows and columns . Parameters: . | row_dist=30: distance between rows | col_dist=30: distance between cols | row_off=0: where rows start (offset from 0) | col_off=0: where cols start (offset from 0) | col_dir=1: direction of cols (1 or -1) | row_dir=-1: direction of rows (1 or -1) | col_axis=’x’: which axis is used as the col axis | row_axis=’z’: which axis is used as the row axis | fixed_axis=’y’: axis that defines the plane where the walls are laid out | . CIRCLE: arrange walls around a circle . Parameters: . | radius=50: radius of the circle (will try to layout the walls evenly spaced) | a1_off=0: center of the circle offset from 0 in axis 1 (see axis1 param) | a2_off=0: center of the circle offset from 0 in axis 2 (see axis2 param) | axis1=’x’: which axis is used as axis1 | axis2=’z’: which axis is used as axis2 | fixed_axis=’y’: defines the plane where the walls are layed out | . SQUARE: arrange walls in a square shape . Parameters: . | length=50: length of the square (will try to layout the walls evenly spaced) | a1_off=0: offset of the corner of the square from 0 in axis 1 (see axis1 param) | a2_off=0: offset of the corner of the square from 0 in axis 2 (see axis2 param) | axis1=’x’: which axis is used as axis1 | axis2=’z’: which axis is used as axis2 | fixed_axis=’y’: defines the plane where the walls are layed out | . LINE: arrange walls in a line . Parameters: . | length=200: length of the line (will try to layout the walls evenly spaced) | rotation=90: rotation (degrees) of the wall | alternating_rot=True: alternating rotation to make the walls face each other in pairs (True/False) | a1_off=0: offset of the line start from 0 in axis 1 (see axis1 param) | a2_off=0: offset of the line start from 0 in axis 2 (see axis2 param) | axis1=’x’: which axis is used as axis1 | axis2=’z’: which axis is used as axis2 | fixed_axis=’y’: defines the plane where the walls are layed out | . ",
    "url": "https://docs.arenaxr.org/content/tools/poster-session.html#poster-wall-layouts-for-each-scene",
    "relUrl": "/content/tools/poster-session.html#poster-wall-layouts-for-each-scene"
  },"755": {
    "doc": "Poster Sessions",
    "title": "Permissions",
    "content": "This tool will use the permissions of the ARENA user logged in. Can write to scenes the user has access to. If the user is not logged in, a login prompt (in a browser) will be presented. ",
    "url": "https://docs.arenaxr.org/content/tools/poster-session.html#permissions",
    "relUrl": "/content/tools/poster-session.html#permissions"
  },"756": {
    "doc": "Poster Sessions",
    "title": "Poster Sessions",
    "content": "Because poster sessions in ARENA are a common use case, we created a script to programmatically create a poster session scene. The script creates poster walls using data from a google spreadsheet. For each line in the table (indicated by a range in the config file), it creates a poster wall. See the template google spreadsheet template with instructions. The script operates on a scene at the time, but you can have data in the template spreadsheet for several scenes, and run the script once for each scene (indicated in the config file or passed through argument). ",
    "url": "https://docs.arenaxr.org/content/tools/poster-session.html",
    "relUrl": "/content/tools/poster-session.html"
  },"757": {
    "doc": "arena.objects.program",
    "title": "\narena.objects.program    ",
    "content": "class Program(arena.base_object.BaseObject): Program object in an ARENA Scene. Parameters . | str name: Name of the program | str affinity: Indicates the module affinity (client=client's runtime; none or empty=any suitable/available runtime) | str instantiate: Single instance of the program (=single), or let every client create a program instance (=client). Per client instance will create new uuid for each program. | str filename: Filename of the entry binary | str filetype: Type of the program (WA=WASM or PY=Python) | str parent: Request to deploy to this runtime (can be a runtime name or UUID); usually left blank. | str[] args: Command-line arguments (passed in argv); e.g. [ \"arg=value\" ]. | str[] env: Environment variables; e.g. [ \"SCENE=ascene\" ]. | . Program( object_id=&#39;46909f09-28d1-44e2-9305-d1d84f59b6ea&#39;, persist=False, objects_list_add=True, **kwargs) type = &#39;program&#39; object_type = &#39;program&#39; persist def update_attributes(self, evt_handler=None, update_handler=None, **kwargs): def json(self, **kwargs): Inherited Members . arena.base_object.BaseObject add json_encode ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/program.html",
    "relUrl": "/content/python-api/objects/program.html"
  },"758": {
    "doc": "arena.objects.program",
    "title": "arena.objects.program",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/program.html",
    "relUrl": "/content/python-api/objects/program.html"
  },"759": {
    "doc": "Program Data",
    "title": "Program Data",
    "content": "Object data payload; Program config data. ",
    "url": "https://docs.arenaxr.org/content/schemas/message/program.html#program-data",
    "relUrl": "/content/schemas/message/program.html#program-data"
  },"760": {
    "doc": "Program Data",
    "title": "Program Data Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | name | string |   | Name of the program in the format namespace/program-name. | Yes | . | affinity | string; One of: ['client', 'none'] | 'client' | Indicates the module affinity (client=client’s runtime; none or empty=any suitable/available runtime). | No | . | instantiate | string; One of: ['single', 'client'] | 'client' | Single instance of the program (=single), or let every client create a program instance (=client). Per client instance will create new uuid for each program. | Yes | . | filename | string |   | Filename of the entry binary. | Yes | . | filetype | string; One of: ['WA', 'PY'] | 'WA' | Type of the program (WA=WASM or PY=Python). | Yes | . | parent | string | 'pytest' | Request the orchestrator to deploy to this runtime (can be a runtime name or UUID); usually left blank. | Yes | . | args | array |   | Command-line arguments (passed in argv). Supports variables: ${scene}, ${mqtth}, ${cameraid}, ${username}, ${runtimeid}, ${moduleid}, ${query-string-key}. | No | . | env | array | ['MID=${moduleid}', 'SCENE=${scene}', 'NAMESPACE=${namespace}', 'MQTTH=${mqtth}', 'REALM=realm'] | Environment variables. Supports variables: ${scene}, ${namespace}, ${mqtth}, ${cameraid}, ${username}, ${runtimeid}, ${moduleid}, ${query-string-key}. | Yes | . | channels | array | [{'path': '/ch/${scene}', 'type': 'pubsub', 'mode': 'rw', 'params': {'topic': 'realm/s/${scene}'}}] | Channels describe files representing access to IO from pubsub and client sockets (possibly more in the future; currently only supported for WASM programs). | No | . | run_info | object |   | Program execution info, added at runtime. | No | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/program.html#program-data-attributes",
    "relUrl": "/content/schemas/message/program.html#program-data-attributes"
  },"761": {
    "doc": "Program Data",
    "title": "Program Data",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/program.html",
    "relUrl": "/content/schemas/message/program.html"
  },"762": {
    "doc": "arena.utils.program_info",
    "title": "\narena.utils.program_info    ",
    "content": "Collect information about the program execution, such as activity times and number of messages sent/received. class GetPublicAttrsMixin: def get_attrs(self, **kwargs): Return object public members only . class QueueStats(builtins.dict): rcv_queue_len pub_queue_len Inherited Members . builtins.dict get setdefault pop popitem keys items values update fromkeys clear copy class ProgramRunInfo(arena.base_object.BaseObject, GetPublicAttrsMixin): Program Run Information; collect program execution information. ProgramRunInfo( evt_loop=None, queue_len_callable=None, update_callback=None, update_interval_ms=5000, **kwargs) Returns a ProgramRunInfo. If an event loop is passed, will setup a periodic task to update execution stats and perform a callback to notify of this update . Args: evt_loop: an event loop to which we add a periodic task to update program stats queue_len_callable: callable that returns a queue stats object update_callback: callback when stats are updated update_interval_ms: interval of the periodic task to update program stats kwargs: additional attributes to add to the program info, e.g. web host, scene, namespace . object_type = &#39;run_info&#39; filename args env create_time last_active_time rcv_msgs pub_msgs last_rcv_time last_pub_time avg_rcv_msgs_per_sec avg_pub_msgs_per_sec def msg_rcv(self): Update stats when a message is received . def msg_publish(self): Update stats when a message is published . def add_program_info(self, adict): Add program info to another dictionary . Inherited Members . arena.base_object.BaseObject add json_encode json GetPublicAttrsMixin get_attrs ",
    "url": "https://docs.arenaxr.org/content/python-api/utils/program_info.html",
    "relUrl": "/content/python-api/utils/program_info.html"
  },"763": {
    "doc": "arena.utils.program_info",
    "title": "arena.utils.program_info",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/utils/program_info.html",
    "relUrl": "/content/python-api/utils/program_info.html"
  },"764": {
    "doc": "Add Programs Example",
    "title": "Adding a Hosted ARENA Program: Step by Step Example",
    "content": "The following instructions show how to host an ARENA program using a simple example python scripts called boxes.py. ",
    "url": "https://docs.arenaxr.org/content/programs/programs.html#adding-a-hosted-arena-program-step-by-step-example",
    "relUrl": "/content/programs/programs.html#adding-a-hosted-arena-program-step-by-step-example"
  },"765": {
    "doc": "Add Programs Example",
    "title": "1. Add the files.",
    "content": "Navigate to the file store. You might be asked to login. In your home folder, create a folder called programs (the folder name can be anything; this is just for the sake of our example). Later, we will need refer to this folder in the form &lt;username-or-namespace&gt;/&lt;folder-path&gt;. You can see your username on the upper left, in this example, we would refer to the folder as cmu/programs (cmu is the user in our example). Add your program files (in this case, the boxes.py script) to this folder. Authentication . You also need to include a requirements.txt with your .py files providing the authentication version of the ARENA Python library that has at least the line: . arena-py . ",
    "url": "https://docs.arenaxr.org/content/programs/programs.html#1-add-the-files",
    "relUrl": "/content/programs/programs.html#1-add-the-files"
  },"766": {
    "doc": "Add Programs Example",
    "title": "2. Add a program object to your scene.",
    "content": "Open the scene builder and select the scene that you want to add the program to. Now, add a Program object by selecting type “program” in the Add/Edit Object select: . ",
    "url": "https://docs.arenaxr.org/content/programs/programs.html#2-add-a-program-object-to-your-scene",
    "relUrl": "/content/programs/programs.html#2-add-a-program-object-to-your-scene"
  },"767": {
    "doc": "Add Programs Example",
    "title": "3. Edit the program attributes.",
    "content": "Make sure to assign a unique object ID (use ), and: . | action is create | type is program | name is the program name in the form &lt;username-or-namespace&gt;/&lt;program-name&gt; | instantiate indicates if a program instance is started for each viewer (browser) or single instance per scene; | filename is the path to the program entry file in the form &lt;username-or-namespace&gt;/&lt;path-to-program-entryfile&gt;. In this example: cmu/programs/boxes.py | filetype is either python (PY) or wasm (WA), depending on your program. In this case, PY. | Add environment variables and arguments as needed by the program (for example, the program might read environment variable SCENE to know its scene, then add an environment variable: SCENE=${scene}, where ${scene} will be replaced by the scene name) | . note . By convention, we pass programs environment variables that indicate the scene, realm and MQTT host. These are reflected in the default values of the form. | parent is the runtime where the module should run; usually this is left blank, but due to current limitations of our deployment, this must be pytest (this is the name of the runtime that currently supports ARENA programs). | . note . Please set parent to pytest so that your programs are dispatched to this runtime. This is the corresponding object JSON: . { \"object_id\": \"1c96947e-351c-47f5-8801-65e5cd0e778d\", \"action\": \"create\", \"persist\": true, \"type\": \"program\", \"data\": { \"name\": \"cmu/boxes\", \"instantiate\": \"single\", \"filename\": \"cmu/programs/boxes.py\", \"filetype\": \"PY\", \"parent\": \"pytest\", \"env\": [ \"MID=${moduleid}\", \"SCENE=${scene}\", \"NAMESPACE=${namespace}\", \"MQTTH=${mqtth}\", \"REALM=realm\" ] } } . ",
    "url": "https://docs.arenaxr.org/content/programs/programs.html#3-edit-the-program-attributes",
    "relUrl": "/content/programs/programs.html#3-edit-the-program-attributes"
  },"768": {
    "doc": "Add Programs Example",
    "title": "4. Save the program object.",
    "content": "Finalize by pressing the “Add/Update Object” button. You should see the new program object in the scene object list: . ",
    "url": "https://docs.arenaxr.org/content/programs/programs.html#4-save-the-program-object",
    "relUrl": "/content/programs/programs.html#4-save-the-program-object"
  },"769": {
    "doc": "Add Programs Example",
    "title": "5. Open the scene",
    "content": "Open the Scene using at the top of the build page (the link should be something like https://arenaxr.org/[your username]/[scene-name]) . ",
    "url": "https://docs.arenaxr.org/content/programs/programs.html#5-open-the-scene",
    "relUrl": "/content/programs/programs.html#5-open-the-scene"
  },"770": {
    "doc": "Add Programs Example",
    "title": "6. See the details of the ARENA runtime",
    "content": "You can use the ARENA runtime dashboard to see details of the runtimes and programs running. ",
    "url": "https://docs.arenaxr.org/content/programs/programs.html#6-see-the-details-of-the-arena-runtime",
    "relUrl": "/content/programs/programs.html#6-see-the-details-of-the-arena-runtime"
  },"771": {
    "doc": "Add Programs Example",
    "title": "Add Programs Example",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/programs/programs.html",
    "relUrl": "/content/programs/programs.html"
  },"772": {
    "doc": "Access Control",
    "title": "ARENA PubSub Message Bus",
    "content": "The ARENA message bus is currently supported by a MQTT Mosquitto broker, modified to keep track of connected clients and data flows. This information is organized into a graph that is available to users and, more importantly, to the runtime supervisor - ARTS. The broker is also configured with a JWT plugin that implements the PubSub ACL on the topic structure (more details below), and we use Mosquitto’s bridging to create clusters of brokers. ",
    "url": "https://docs.arenaxr.org/content/architecture/pubsubac.html#arena-pubsub-message-bus",
    "relUrl": "/content/architecture/pubsubac.html#arena-pubsub-message-bus"
  },"773": {
    "doc": "Access Control",
    "title": "PubSub Access Control",
    "content": "The root of trust for an ARENA Realm derives from the Access Control List (ACL) permissions managed by the Authentication and Access Control service. Users are authenticated using OAuth and the service emits JSON Web Tokens (JWT) based on permissions for which scenes users control or grant control as an ACL. PubSub brokers and other services (e.g. the persistence datastore) use JWT to enforce access control. PubSub brokers accept and validate these tokens and use them to allow/disallow publish or subscribe access. We use the PubSub topic structure to sculpt and whitelist which 3D objects, chat, runtime, and other communications bind this ACL to the user’s JWT. To prevent clients from elevating their privileges by publishing malicious messages on the topics they are allowed to publish, we perform client-side checks on message reception and discard invalid messages. See more security details. A few example topics are included below for context, as well as a list of topic elements used, and which topics are added to the ARENA JWT based upon user and system defined access control list (ACL) settings. ",
    "url": "https://docs.arenaxr.org/content/architecture/pubsubac.html#pubsub-access-control",
    "relUrl": "/content/architecture/pubsubac.html#pubsub-access-control"
  },"774": {
    "doc": "Access Control",
    "title": "Example Topics",
    "content": "General 3D Object realm/s/er1k/test-scene/box_1 User 3D Object realm/s/er1k/test-scene/camera_1234567890_er1k Chat Message realm/c/er1k/p/1234567890_er1k/MTIzNDU2Nzg5MF9lcjFr AprilTag Detection realm/g/a/camera_1234567890_er1k VIO Update realm/vio/er1k/test-scene/vio-12 Runtime Stdout realm/proc/debug/stdout/e5f4439e-5a02-4e5d-9d72-704d171d8949 ",
    "url": "https://docs.arenaxr.org/content/architecture/pubsubac.html#example-topics",
    "relUrl": "/content/architecture/pubsubac.html#example-topics"
  },"775": {
    "doc": "Access Control",
    "title": "Topic Elements",
    "content": "a Storage area for AprilTag detection data c Storage area for user text chat messages g Storage area for general use o Storage area for public or open user payload topics s Storage area for scene graphic objects p Storage area for private user to user payload topics proc Storage area for runtime process and module data vio Storage area for VIO camera pose updates $NETWORK Storage area for network performance metrics {namespace} Namespace for a particular user within the scene {object-id} A-Frame object name; object topic should receive mostly A-Frame content {realm} Future use; a namespace we expect to be useful for peer MQTT brokers; probably geographic-based {process-id} Namespace for a particular application within the scene {session-id} A server-generated ID to establish a unique user connection {scene-id} Name of particular scene, could be captured from the ATLAS {userhandle} Appended to control origin of the chat messages: b64encode('{session-id}_{username}') {username} The ARENA account username for the user *Names in {} are dynamic . ",
    "url": "https://docs.arenaxr.org/content/architecture/pubsubac.html#topic-elements",
    "relUrl": "/content/architecture/pubsubac.html#topic-elements"
  },"776": {
    "doc": "Access Control",
    "title": "Scene Allowed",
    "content": "{realm}/s/# . | All scenes: Staff/Admin have rights to all scene objects. | Subscribe: Staff | Publish: Staff | . {realm}/s/{username}/# . | Scene namespaces: scene owners have rights to their scene objects only. | Subscribe: specific user: username | Publish: specific user: username | . {realm}/s/{namespace}/{scene-id}/# . | Individual scenes: did the user set specific public read or public write? | Subscribe: public_read=True, or namespace user added editor | Publish: public_write=True, or namespace user added editor | . {realm}/s/{namespace}/{scene-id}/camera_{session-id}_{username}/# . {realm}/s/{namespace}/{scene-id}/handRight_{session-id}_{username}/# . {realm}/s/{namespace}/{scene-id}/handLeft_{session-id}_{username}/# . | User-presence objects: scene owners have rights to their scene objects only. | Subscribe: public_read=True | Publish: specific Anonymous/User, issued ID and username from authentication service. | . Note . Since anonymous usernames are not authenticated, there is a risk of spoofing their user-presence, and as such, all users are issued a session-id for their camera objects to prevent this. ",
    "url": "https://docs.arenaxr.org/content/architecture/pubsubac.html#scene-allowed",
    "relUrl": "/content/architecture/pubsubac.html#scene-allowed"
  },"777": {
    "doc": "Access Control",
    "title": "Sensor Allowed",
    "content": "{realm}/g/a/# . | All AprilTag sensors | Subscribe: Staff, User, Anonymous | Publish: Staff, User, Anonymous | . {realm}/vio/{namespace}/{scene-id}/# . | VIO or test cameras for student experiments | Publish: Staff | . ",
    "url": "https://docs.arenaxr.org/content/architecture/pubsubac.html#sensor-allowed",
    "relUrl": "/content/architecture/pubsubac.html#sensor-allowed"
  },"778": {
    "doc": "Access Control",
    "title": "Chat Allowed",
    "content": "A user handle is appended to control the origin of the chat messages in the topic and payload to prevent spoofing. Where userhandle = b64encode({session-id}\\_{username}). {realm}/c/{namespace}/p/{session-id}_{username}/# . | Receive private messages: Read | Subscribe: Staff, User, Anonymous | . {realm}/c/{namespace}/o/# . | Receive open messages to everyone and/or scene: Read | Subscribe: Staff, User, Anonymous | . {realm}/c/{namespace}/o/{userhandle} . | Send open messages (chat keep-alive, messages to all/scene: Write | Publish: Staff, User, Anonymous | . {realm}/c/{namespace}/p/+/{userhandle} . | Private messages to User: Write | Publish: Staff, User, Anonymous | . ",
    "url": "https://docs.arenaxr.org/content/architecture/pubsubac.html#chat-allowed",
    "relUrl": "/content/architecture/pubsubac.html#chat-allowed"
  },"779": {
    "doc": "Access Control",
    "title": "Runtime Manager Allowed",
    "content": "{realm}/proc/# . | Open topic for controlling runtime processes | Subscribe: Staff, User, Anonymous | Publish: Staff, User, Anonymous | . ",
    "url": "https://docs.arenaxr.org/content/architecture/pubsubac.html#runtime-manager-allowed",
    "relUrl": "/content/architecture/pubsubac.html#runtime-manager-allowed"
  },"780": {
    "doc": "Access Control",
    "title": "Network Metrics Allowed",
    "content": "$NETWORK . | Monitor topic for logging or visualizing metrics | Subscribe: Staff, User, Anonymous | . $NETWORK/latency . | Topic for writing network metrics | Publish: Staff, User, Anonymous | . ",
    "url": "https://docs.arenaxr.org/content/architecture/pubsubac.html#network-metrics-allowed",
    "relUrl": "/content/architecture/pubsubac.html#network-metrics-allowed"
  },"781": {
    "doc": "Access Control",
    "title": "Access Control",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/architecture/pubsubac.html",
    "relUrl": "/content/architecture/pubsubac.html"
  },"782": {
    "doc": "Remote Render",
    "title": "Remote Render",
    "content": "Whether or not an object should be remote rendered [Experimental]. ",
    "url": "https://docs.arenaxr.org/content/schemas/message/remote-render.html#remote-render",
    "relUrl": "/content/schemas/message/remote-render.html#remote-render"
  },"783": {
    "doc": "Remote Render",
    "title": "Remote Render Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | enabled | boolean | True | Remote Render this object. | No | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/remote-render.html#remote-render-attributes",
    "relUrl": "/content/schemas/message/remote-render.html#remote-render-attributes"
  },"784": {
    "doc": "Remote Render",
    "title": "Remote Render",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/remote-render.html",
    "relUrl": "/content/schemas/message/remote-render.html"
  },"785": {
    "doc": "arena.attributes.remote_render",
    "title": "\narena.attributes.remote_render    ",
    "content": "class RemoteRender(arena.attributes.attribute.Attribute): RemoteRender attribute class to manage its properties in the ARENA: Whether or not an object should be remote rendered [Experimental]. Usage: remote_render=RemoteRender(...) . Parameters . | bool enabled: Remote Render this object. Defaults to 'True' (optional) | . RemoteRender(**kwargs) Inherited Members . arena.base_object.BaseObject add json_encode json ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/remote_render.html",
    "relUrl": "/content/python-api/attributes/remote_render.html"
  },"786": {
    "doc": "arena.attributes.remote_render",
    "title": "arena.attributes.remote_render",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/remote_render.html",
    "relUrl": "/content/python-api/attributes/remote_render.html"
  },"787": {
    "doc": "Rendering Support",
    "title": "Rendering Support",
    "content": "The ARENA MQTT and Persistance system of communication and storage support the following entities and components for rendering and interaction. Version support for the arena-web-core repository for Web browsers, the arena-py repository for Python apps, and the arena-unity repository for Unity builds are detailed here. | Web Changelog | Python Changelog | Unity Changelog | . | ARENA Entity | Web | Python | Unity | Description | . | arenaui-button-panel | 1.21.0 | 0.6.0 | - | Flat UI displays a vertical or horizontal panel of buttons | . | arenaui-card | 1.21.0 | 0.6.0 | - | Flat UI displays text and optionally an image | . | arenaui-prompt | 1.21.0 | 0.6.0 | - | Flat UI displays prompt with button actions | . | box | 1.0.0 | 0.1.12 | 0.0.1 | Box geometry | . | capsule | 1.11.0 | 0.9.0 | 0.0.12 | Capsule geometry | . | circle | 1.0.0 | 0.1.12 | 0.0.11 | Circle geometry | . | cone | 1.0.0 | 0.1.12 | 0.0.11 | Cone geometry | . | cylinder | 1.0.0 | 0.1.12 | 0.0.1 | Cylinder geometry | . | dodecahedron | 1.0.0 | 0.1.12 | 0.0.12 | Dodecahedron geometry | . | entity | 1.0.0 | 0.1.12 | 0.0.1 | Entities are the base of all objects in the scene. | . | environment | 1.0.0 | - | - | A-Frame Environment and presets. | . | gaussian_splatting | 1.24.0 | 0.9.0 | - | Load a Gaussian Splat model | . | gltf-model | 1.0.0 | 0.1.12 | 0.0.2 | Load a GLTF model | . | icosahedron | 1.0.0 | 0.1.12 | 0.0.11 | Icosahedron geometry | . | image | 1.0.0 | 0.1.12 | 0.0.7 | Display an image on a plane | . | light | 1.0.0 | 0.1.12 | 0.0.5 | A light | . | line | 1.0.0 | 0.1.12 | 0.9.0 | Draw a line | . | ocean | 1.18.0 | 0.9.0 | - | Oceans, water | . | octahedron | 1.0.0 | 0.1.12 | 0.0.11 | Octahedron geometry | . | pcd-model | 1.0.0 | 0.9.0 | - | Load a PCD model | . | plane | 1.0.0 | 0.1.12 | 0.0.1 | Plane geometry | . | post-processing | 1.20.0 | - | - | These effects are enabled in desktop and XR views | . | program | 1.0.0 | 0.9.0 | N/A | ARENA program data | . | renderer-settings | 1.0.0 | - | - | These settings are fed into three.js WebGLRenderer properties | . | ring | 1.0.0 | 0.1.12 | 0.0.11 | Ring geometry | . | roundedbox | 1.14.0 | 0.9.0 | - | Rounded Box geometry | . | scene-options | 1.0.0 | - | - | ARENA Scene Options | . | sphere | 1.0.0 | 0.1.12 | 0.0.1 | Sphere geometry | . | tetrahedron | 1.0.0 | 0.1.12 | 0.0.12 | Tetrahedron geometry | . | text | 1.0.0 | 0.1.12 | 0.3.0 | Display text | . | thickline | 1.0.0 | 0.1.12 | 0.4.0 | Draw a line that can have a custom width | . | threejs-scene | 1.0.0 | 0.9.0 | - | Load a three.js Scene | . | torus | 1.0.0 | 0.1.12 | 0.0.11 | Torus geometry | . | torusKnot | 1.0.0 | 0.1.12 | 0.10.2 | Torus Knot geometry | . | triangle | 1.0.0 | 0.1.12 | 0.0.12 | Triangle geometry | . | videosphere | 1.10.0 | 0.9.0 | N/A | Videosphere 360 video | . | ARENA Component | Web | Python | Unity | Description | . | animation-mixer | 1.0.0 | 0.1.12 | 0.7.0 | A list of available animations in model file will play by default. | . | animation | 1.0.0 | 0.1.12 | - | Animate and tween values. | . | arena-camera | 1.23.3 | N/A | 0.11.0 | Tracking camera movement in real time. Emits camera/VIO pose updates. (Format change 2023-11-02) | . | arena-hand | 1.0.0 | N/A | - | Tracking VR helmet controller movement in real time. Emits controller pose updates. | . | arena-user | 1.23.3 | 0.8.0 | 0.11.0 | Another user’s camera in the ARENA, renders Jitsi/displayName updates. (Format change 2023-11-02) | . | armarker | 1.0.0 | 0.9.0 | - | A location marker used to anchor scenes, or scene objects, in the real world. | . | attribution | 1.0.0 | 0.9.0 | - | Attribution component. Saves attribution data in any entity. | . | blip | 1.23.0 | 0.9.0 | - | Objects animate in/out of the scene instead of appearing/disappearing instantly. | . | box-collision-listener | 1.17.0 | 0.9.0 | - | AABB collision detection for entities with a mesh | . | buffer | 1.0.0 | 0.1.12 | N/A | Transform geometry into a BufferGeometry: reduce memory usage while being harder to manipulate. | . | click-listener | 1.0.0 | 0.1.12 | 0.8.0 | Keep track of mouse events and publish corresponding events | . | collision-listener | 1.0.0 | 0.9.0 | - | Listen for collisions, callback on event. | . | dynamic-body | 1.0.0 | 0.1.12 | - | Physics type attached to the object. | . | geometry | 1.0.0 | 0.1.12 | 0.10.0 | Primitive mesh geometry support in A-Frame. | . | gesture-detector | 1.0.0 | N/A | - | Detect multi-finger touch gestures. Publish events accordingly. | . | gltf-model-lod | 1.0.0 | 0.9.0 | - | GLTF lod switching between models based on distance. | . | gltf-morph | 1.0.0 | 0.1.12 | - | GLTF 3D morphable model controls | . | goto-landmark | 1.0.0 | 0.1.12 | - | Teleports user to the landmark with the given name; Requires click-listener | . | goto-url | 1.0.0 | 0.1.12 | - | Goto given URL; Requires click-listener | . | hide-on-enter-ar | 1.8.0 | 0.1.12 | - | Hide object when entering AR. Remove component to not hide. Was hide-in-ar-mode. | . | hide-on-enter-vr | 1.8.0 | 0.1.12 | - | Hide object when entering VR. Remove component to not hide. | . | impulse | 1.0.0 | 0.1.12 | - | The force applied using physics. Requires click-listener | . | jitsi-video | 1.0.0 | 0.1.39 | N/A | Apply a Jitsi video source to the geometry | . | landmark | 1.0.0 | 0.1.13 | N/A | Define entities as a landmark; appear in landmarks list, you can move (teleport) to them. | . | look-at | 1.0.0 | 0.1.13 | - | An entity can dynamically rotate or face towards another entity or position. | . | material-extras | 1.0.0 | 0.9.0 | - | Extra material properties: texture encoding, whether to render the material’s color, render order. | . | material | 1.0.0 | 0.1.12 | 0.0.10 | The material properties of the object’s surface. | . | modelUpdate | 1.17.0 | 0.9.0 | - | GLTF child components can also be manually manipulated | . | multisrc | 1.0.0 | 0.9.0 | - | Define multiple visual sources applied to an object. | . | parent | 1.0.0 | 0.1.12 | 0.0.7 | Parent’s object_id. Child objects inherit attributes of their parent: scale and translation. | . | position | 1.0.0 | 0.1.12 | 0.0.1 | 3D object position | . | remote-render | N/A | N/A | 0.10.1 | Whether or not an object should be remote rendered | . | rotation | 1.0.0 | 0.1.12 | 0.0.1 | 3D object rotation in quaternion representation; Right-handed coordinate system. | . | scale | 1.0.0 | 0.1.12 | 0.0.1 | 3D object scale | . | screenshareable | 1.0.0 | 0.1.12 | N/A | Screenshare-able component. Allows an object to be screenshared upon | . | shadow | 1.0.0 | 0.9.0 | 0.0.10 | Whether the entity cast/receives shadows onto the surrounding scene. | . | show-on-enter-ar | 1.20.0 | 0.1.12 | - | Show object when entering AR. Hidden otherwise. | . | show-on-enter-vr | 1.20.0 | 0.1.12 | - | Show object when entering VR. Hidden otherwise. | . | skipCache | 1.0.0 | 0.1.12 | - | Disable retrieving the shared geometry object from the cache. | . | sound | 1.0.0 | 0.1.12 | - | The sound component defines the entity as a source of sound or audio. | . | spe-particles | 1.18.0 | 0.7.0 | - | GPU based particle systems in A-Frame: supports single textures and spritesheets. | . | textinput | 1.0.0 | 0.1.24 | - | Opens an HTML prompt when clicked. Sends text input as an event on MQTT. Requires click-listener. | . | video-control | 1.0.0 | 0.3.0 | - | Adds a video to an entity and controls its playback. | . | visible | 1.0.0 | 0.1.12 | 0.10.1 | Whether or not an object should rendered visible. | . ",
    "url": "https://docs.arenaxr.org/content/schemas/render-support.html",
    "relUrl": "/content/schemas/render-support.html"
  },"788": {
    "doc": "Renderer Settings",
    "title": "Renderer Settings",
    "content": "These settings are fed into three.js WebGLRenderer properties. ",
    "url": "https://docs.arenaxr.org/content/schemas/message/renderer-settings.html#renderer-settings",
    "relUrl": "/content/schemas/message/renderer-settings.html#renderer-settings"
  },"789": {
    "doc": "Renderer Settings",
    "title": "Renderer Settings Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | localClippingEnabled | boolean | False | Defines whether the renderer respects object-level clipping planes. | No | . | outputColorSpace | string; One of: ['SRGBColorSpace', 'LinearSRGBColorSpace', 'DisplayP3ColorSpace', 'NoColorSpace'] | 'SRGBColorSpace' | Defines the output color space of the renderer (three.js default is SRGBColorSpace). | Yes | . | physicallyCorrectLights | boolean | False | Whether to use physically correct lighting mode. | No | . | sortObjects | boolean | True | Defines whether the renderer should sort objects. | No | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/renderer-settings.html#renderer-settings-attributes",
    "relUrl": "/content/schemas/message/renderer-settings.html#renderer-settings-attributes"
  },"790": {
    "doc": "Renderer Settings",
    "title": "Renderer Settings",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/renderer-settings.html",
    "relUrl": "/content/schemas/message/renderer-settings.html"
  },"791": {
    "doc": "Platforms",
    "title": "Supported Platforms",
    "content": "Mixed Reality experiences in ARENA require a WebXR-compatible browser, which currently includes Edge (desktop), Chrome (desktop and mobile), Firefox (desktop and mobile; not enabled by default), among others as shown in Current WebXR Support documentation. Note that these include browsers that can run in many AR and VR headsets. For example, Oculus/Meta and Magic Leap’s browsers are based on the open-source codebase of Chrome (Chromium) and include WebXR support. See below for a summary table of supported browsers and platforms. Additionally, and to prototype the needs for future browser platforms, we are also maintaining XR Browser, a custom version of Firefox for iOS (based of WebXR Viewer). Both XR Browser and WebXR Viewer support ARENA’s computer vision pipeline. In addition, the team used XR Browser to experiment with other features, such as spoof-resilient AR anchors. ",
    "url": "https://docs.arenaxr.org/content/xr/requirements.html#supported-platforms",
    "relUrl": "/content/xr/requirements.html#supported-platforms"
  },"792": {
    "doc": "Platforms",
    "title": "Browser Support",
    "content": "The following table summarizes the browsers, platforms and support for ARENA’s capabilities. Where available, the details/settings link provides more details about the specific Browser and platforms. | Browser | XR Experiences (WebXR support) | ARENA CV (Optical Markers)1 | . | XR Browser (details/settings) ios | Mobile/Tablet (iOS) | Supported | . | Mozilla WebXR Viewer (details/settings) | Mobile/Tablet (iOS) | Supported | . | Chrome (details/settings) android | Mobile/Tablet (Android) and desktop | Supported | . | Mozilla Firefox | Mobile/Tablet (Android) and desktop2 | Supported via Spot AR | . | Microsoft Edge (details/settings) | Mobile/Tablet, desktop and HoloLens | Supported | . | Safari (details/settings) | Mobile/Tablet, Desktop and AVP2 | Supported via Spot AR | . | Oculus Browser (details/settings) | Oculus headsets (e.g. Quest, Quest 2) | Not supported | . | Helio (details/settings) | Magic Leap | Supported | . 1 ARENA Computer Vision pipeline support is required for optical markers, and it will, by default, process the default camera facing the environment in each different device (the back camera in phones/tablets and the front camera facing the environment on headsets). 2 Not enabled by default. ios Preferred iOS Browser. Our fork of Mozilla’s WebXR Viewer. android Preferred Android Browser. XR Browser (iOS) . XR Browser is the preferred Browser to use with ARENA in iOS. It can be installed from the App Store. This Browser is a fork of the experimental Mozilla WebXR Viewer (XR version of Firefox) that fixes several bugs and natively supports our computer vision pipeline. Chrome (Android, and more) . Currently all Chrome releases, including Stable, support WebXR’s raw camera access, added in release 107, which is required for ARENA’s computer vision processing pipeline. WebXR Viewer (iOS) . While we recommend using XR Browser on iOS, for those who want to use the original Mozilla version, you need to apply a few setting configuration updates. Mozilla’s WebXR Viewer viewer can be installed from the App Store. After installing WebXR Viewer, go to ‘Settings -&gt; XRViewer’ and change: . | WebXR Polyfill URL: https://arenaxr.org/webxrios.js or https://arenaxr.org/vendor/webxr-webxrviewer-ios.js | Always Allow World Sensing: Yes | . Edge . Recent versions of Microsoft Edge adopted the Chromium open source project on the desktop, with WebXR support. HoloLens 2 . These are some quick instructions to start using ARENA on HoloLens’ Edge Browser: . Oculus Browser (Quest, Quest 2 and more) . To try ARENA in VR, you can use the Oculus Browser (tested on the Quest 2) and enter the scene URL. Be patient while the scene loads and the: . | Click “Enter” on the normal AV dialog box | Unmute mic BEFORE entering VR | Click the VR button in the lower right to enter immersive mode | . Moving around: . A forward push on the left-hand rocker brings up the teleportation ring. Clicking the rocker left and right rotates. Helio (Magic Leap) . Helio is Magic Leap’s web browser available on Magic Leap devices. Follow these steps to open Helio and navigate to a website, which we reproduce here for ease of access: . | In the Magic Leap device, hold down the Home Button on the Control to show The Launcher. A circle of icons appears in the view. | Use the Control pointer or swipe on the touchpad to navigate to the Helio app in The Launcher. Press the trigger on the Control to select it—the Helio app launches. | Use the Control or swipe on the touchpad to navigate to the URL bar at the top of the Helio window. | Press the trigger on the Control to select the URL bar. A virtual keyboard appears that you can use to enter a URL address. You can also use Magic Leap Mobile App to enter text from your mobile device. See Magic Leap Mobile App for more information. | Enter this page’s URL and see it display on the Magic Leap device. | . Safari &amp; visionOS . WebXR is not supported by default on Safari, but for the Apple Vision Pro (AVP) as least, there are several flags users must enable to get experimental WebXR support. | https://appleinsider.com/inside/apple-vision-pro/tips/how-to-enable-webxr-support-on-apple-vision-pro | . AVP Warning . Currently the AVP is expressing device orientation rotated incorrectly through A-Frame. The z-axis is off by 90 degrees. Stay tuned here for updates… . ",
    "url": "https://docs.arenaxr.org/content/xr/requirements.html#browser-support",
    "relUrl": "/content/xr/requirements.html#browser-support"
  },"793": {
    "doc": "Platforms",
    "title": "Platforms",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/xr/requirements.html",
    "relUrl": "/content/xr/requirements.html"
  },"794": {
    "doc": "Ring",
    "title": "Ring",
    "content": "Ring Geometry. All wire objects have a set of basic attributes {object_id, action, type, persist, data}. The data attribute defines the object-specific attributes . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/ring.html#ring",
    "relUrl": "/content/schemas/message/ring.html#ring"
  },"795": {
    "doc": "Ring",
    "title": "Ring Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | object_id | string |   | A uuid or otherwise unique identifier for this object. | Yes | . | persist | boolean | True | Persist this object in the database. | Yes | . | type | string; Must be: object | 'object' | AFrame 3D Object | Yes | . | action | string; One of: ['create', 'delete', 'update'] | 'create' | Message action create, update, delete. | Yes | . | ttl | integer |   | When applied to an entity, the entity will remove itself from DOM after the specified number of seconds. Update is allowed, which will reset the timer to start from that moment. | No | . | data | Ring data |   | Ring Data | Yes | . Ring Data Attributes . | Attribute | Type | Default | Description | Required | . | object_type | string; Must be: ring | ring | 3D object type. | Yes | . | radiusInner | number | 0.8 | radius inner | Yes | . | radiusOuter | number | 1.2 | radius outer | Yes | . | segmentsPhi | integer | 10 | segments phi | No | . | segmentsTheta | integer | 32 | segments theta | No | . | thetaLength | number | 360 | theta length | No | . | thetaStart | number | 0 | theta start | No | . | parent | string |   | Parent’s object_id. Child objects inherit attributes of their parent, for example scale and translation. | No | . | position | position |   | 3D object position. | Yes | . | rotation | rotation |   | 3D object rotation in quaternion representation; Right-handed coordinate system. Euler degrees are deprecated in wire message format. | Yes | . | scale | scale |   | 3D object scale. | No | . | animation | animation |   | Animate and tween values. | No | . | armarker | armarker |   | A location marker (such as an AprilTag, a lightAnchor, or an UWB tag), used to anchor scenes, or scene objects, in the real world. | No | . | click-listener | click-listener |   | Object will listen for mouse events like clicks. | No | . | box-collision-listener | box-collision-listener |   | Listen for bounding-box collisions with user camera and hands. Must be applied to an object or model with geometric mesh. Collisions are determined by course bounding-box overlaps. | No | . | collision-listener | string |   | Name of the collision-listener, default can be empty string. Collisions trigger click events. | No | . | blip | blip |   | When the object is created or deleted, it will animate in/out of the scene instead of appearing/disappearing instantly. Must have a geometric mesh. | No | . | static-body | static-body |   | A fixed-position or animated object. Other objects may collide with static bodies, but static bodies themselves are unaffected by gravity and collisions. | No | . | dynamic-body | dynamic-body |   | A freely-moving object. Dynamic bodies have mass, collide with other objects, bounce or slow during collisions, and fall if gravity is enabled. | No | . | goto-landmark | goto-landmark |   | Teleports user to the landmark with the given name. Requires click-listener. | No | . | goto-url | goto-url |   | Load new URL when object is clicked. Requires click-listener. | No | . | hide-on-enter-ar | boolean; Must be: True | True | Hide object when entering AR. Remove component to not hide. | No | . | hide-on-enter-vr | boolean; Must be: True | True | Hide object when entering VR. Remove component to not hide. | No | . | show-on-enter-ar | boolean; Must be: True | True | Show object when entering AR. Hidden otherwise. | No | . | show-on-enter-vr | boolean; Must be: True | True | Show object when entering VR. Hidden otherwise. | No | . | impulse | impulse |   | Apply an impulse to an object to set it in motion. This happens in conjunction with an event. Requires click-listener and physics. | No | . | landmark | landmark |   | Define entities as a landmark; Landmarks appears in the landmark list and you can move (teleport) to them; You can define the behavior of the teleport: if you will be at a fixed or random distance, looking at the landmark, fixed offset or if it is constrained by a navmesh (when it exists). | No | . | material-extras | material-extras |   | Define extra material properties, namely texture encoding, whether to render the material’s color and render order. | No | . | shadow | shadow |   | The shadow component enables shadows for an entity and its children. Adding the shadow component alone is not enough to display shadows in your scene. We must have at least one light with castShadow: true enabled. | No | . | sound | sound |   | The sound component defines the entity as a source of sound or audio. The sound component can be positional and is thus affected by the component’s position. | No | . | textinput | textinput |   | Opens an HTML prompt when clicked. Sends text input as an event on MQTT. Requires click-listener. | No | . | url | string |   | Use File Store paths under ‘store/users/username’, see CDN and other storage options in the description above. | No | . | remote-render | remote-render |   | Whether or not an object should be remote rendered [Experimental]. | No | . | video-control | video-control |   | Adds a video to an entity and controls its playback. | No | . | attribution | attribution |   | Attribution Component. Saves attribution data in any entity. | No | . | spe-particles | spe-particles |   | GPU based particle systems in A-Frame. | No | . | look-at | string |   | The look-at component defines the behavior for an entity to dynamically rotate or face towards another entity or position. Use ‘#my-camera’ to face the user camera, otherwise can take either a vec3 position or a query selector to another entity. | No | . | buffer | boolean | True | Transform geometry into a BufferGeometry to reduce memory usage at the cost of being harder to manipulate (geometries only: box, circle, cone, …). | No | . | jitsi-video | jitsi-video |   | Apply a jitsi video source to the geometry. | No | . | material | material | {'color': '#7f7f7f'} | The material properties of the object’s surface. | No | . | multisrc | multisrc |   | Define multiple visual sources applied to an object. | No | . | screenshareable | boolean | True | Whether or not a user can screenshare on an object. | No | . | skipCache | boolean | False | Disable retrieving the shared geometry object from the cache. (geometries only: box, circle, cone, …). | No | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/ring.html#ring-attributes",
    "relUrl": "/content/schemas/message/ring.html#ring-attributes"
  },"796": {
    "doc": "Ring",
    "title": "Ring",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/ring.html",
    "relUrl": "/content/schemas/message/ring.html"
  },"797": {
    "doc": "arena.objects.ring",
    "title": "\narena.objects.ring    ",
    "content": "class Ring(arena.objects.arena_object.Object): Ring object class to manage its properties in the ARENA: Ring Geometry. Parameters . | float radiusInner: radius inner Defaults to '0.8' (optional) | float radiusOuter: radius outer Defaults to '1.2' (optional) | int segmentsPhi: segments phi Defaults to '10' (optional) | int segmentsTheta: segments theta Defaults to '32' (optional) | float thetaLength: theta length Defaults to '360' (optional) | float thetaStart: theta start (optional) | . Ring(**kwargs) object_type = &#39;ring&#39; Inherited Members . arena.objects.arena_object.Object type all_objects evt_handler update_handler animations delayed_prop_tasks update_attributes dispatch_animation remove_animation_at_index clear_animations clickable json_preprocess json_postprocess json get add remove exists arena.base_object.BaseObject json_encode ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/ring.html",
    "relUrl": "/content/python-api/objects/ring.html"
  },"798": {
    "doc": "arena.objects.ring",
    "title": "arena.objects.ring",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/ring.html",
    "relUrl": "/content/python-api/objects/ring.html"
  },"799": {
    "doc": "Rotation",
    "title": "Rotation",
    "content": "3D object rotation in quaternion representation; Right-handed coordinate system. Euler degrees are deprecated in wire message format. ",
    "url": "https://docs.arenaxr.org/content/schemas/message/rotation.html#rotation",
    "relUrl": "/content/schemas/message/rotation.html#rotation"
  },"800": {
    "doc": "Rotation",
    "title": "Rotation Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | w | number | 1 | w | Yes | . | x | number | 0 | x | Yes | . | y | number | 0 | y | Yes | . | z | number | 0 | z | Yes | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/rotation.html#rotation-attributes",
    "relUrl": "/content/schemas/message/rotation.html#rotation-attributes"
  },"801": {
    "doc": "Rotation",
    "title": "Rotation",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/rotation.html",
    "relUrl": "/content/schemas/message/rotation.html"
  },"802": {
    "doc": "arena.attributes.rotation",
    "title": "\narena.attributes.rotation    ",
    "content": "class Rotation(arena.attributes.attribute.Attribute): Rotation attribute class to manage its properties in the ARENA: 3D object rotation in quaternion representation; Right-handed coordinate system. Euler degrees are deprecated in wire message format. Usage: rotation=Rotation(...) or rotation=Rotation(x,y,z,w) or rotation=Rotation(x,y,z) or rotation=(x,y,z,w) or rotation=(x,y,z) . Parameters . | float w: w Defaults to '1' (optional) | float x: x (optional) | float y: y (optional) | float z: z (optional) | . Rotation(x=None, y=None, z=None, w=None) is_quaternion euler quaternion array @classmethod def q2e(cls, q): quaternions to euler (degrees) . @classmethod def e2q(cls, e): euler (degrees) to quaternions . Inherited Members . arena.base_object.BaseObject add json_encode json ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/rotation.html",
    "relUrl": "/content/python-api/attributes/rotation.html"
  },"803": {
    "doc": "arena.attributes.rotation",
    "title": "arena.attributes.rotation",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/rotation.html",
    "relUrl": "/content/python-api/attributes/rotation.html"
  },"804": {
    "doc": "Rounded Box",
    "title": "Rounded Box",
    "content": "Rounded Box Geometry. All wire objects have a set of basic attributes {object_id, action, type, persist, data}. The data attribute defines the object-specific attributes . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/roundedbox.html#rounded-box",
    "relUrl": "/content/schemas/message/roundedbox.html#rounded-box"
  },"805": {
    "doc": "Rounded Box",
    "title": "Rounded Box Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | object_id | string |   | A uuid or otherwise unique identifier for this object. | Yes | . | persist | boolean | True | Persist this object in the database. | Yes | . | type | string; Must be: object | 'object' | AFrame 3D Object | Yes | . | action | string; One of: ['create', 'delete', 'update'] | 'create' | Message action create, update, delete. | Yes | . | ttl | integer |   | When applied to an entity, the entity will remove itself from DOM after the specified number of seconds. Update is allowed, which will reset the timer to start from that moment. | No | . | data | Rounded Box data |   | Rounded Box Data | Yes | . Rounded Box Data Attributes . | Attribute | Type | Default | Description | Required | . | object_type | string; Must be: roundedbox | roundedbox | 3D object type. | Yes | . | depth | number | 1 | depth | Yes | . | height | number | 1 | height | Yes | . | width | number | 1 | width | Yes | . | radius | number | 0.15 | radius of edge | Yes | . | radiusSegments | integer | 10 | segments radius | No | . | parent | string |   | Parent’s object_id. Child objects inherit attributes of their parent, for example scale and translation. | No | . | position | position |   | 3D object position. | Yes | . | rotation | rotation |   | 3D object rotation in quaternion representation; Right-handed coordinate system. Euler degrees are deprecated in wire message format. | Yes | . | scale | scale |   | 3D object scale. | No | . | animation | animation |   | Animate and tween values. | No | . | armarker | armarker |   | A location marker (such as an AprilTag, a lightAnchor, or an UWB tag), used to anchor scenes, or scene objects, in the real world. | No | . | click-listener | click-listener |   | Object will listen for mouse events like clicks. | No | . | box-collision-listener | box-collision-listener |   | Listen for bounding-box collisions with user camera and hands. Must be applied to an object or model with geometric mesh. Collisions are determined by course bounding-box overlaps. | No | . | collision-listener | string |   | Name of the collision-listener, default can be empty string. Collisions trigger click events. | No | . | blip | blip |   | When the object is created or deleted, it will animate in/out of the scene instead of appearing/disappearing instantly. Must have a geometric mesh. | No | . | static-body | static-body |   | A fixed-position or animated object. Other objects may collide with static bodies, but static bodies themselves are unaffected by gravity and collisions. | No | . | dynamic-body | dynamic-body |   | A freely-moving object. Dynamic bodies have mass, collide with other objects, bounce or slow during collisions, and fall if gravity is enabled. | No | . | goto-landmark | goto-landmark |   | Teleports user to the landmark with the given name. Requires click-listener. | No | . | goto-url | goto-url |   | Load new URL when object is clicked. Requires click-listener. | No | . | hide-on-enter-ar | boolean; Must be: True | True | Hide object when entering AR. Remove component to not hide. | No | . | hide-on-enter-vr | boolean; Must be: True | True | Hide object when entering VR. Remove component to not hide. | No | . | show-on-enter-ar | boolean; Must be: True | True | Show object when entering AR. Hidden otherwise. | No | . | show-on-enter-vr | boolean; Must be: True | True | Show object when entering VR. Hidden otherwise. | No | . | impulse | impulse |   | Apply an impulse to an object to set it in motion. This happens in conjunction with an event. Requires click-listener and physics. | No | . | landmark | landmark |   | Define entities as a landmark; Landmarks appears in the landmark list and you can move (teleport) to them; You can define the behavior of the teleport: if you will be at a fixed or random distance, looking at the landmark, fixed offset or if it is constrained by a navmesh (when it exists). | No | . | material-extras | material-extras |   | Define extra material properties, namely texture encoding, whether to render the material’s color and render order. | No | . | shadow | shadow |   | The shadow component enables shadows for an entity and its children. Adding the shadow component alone is not enough to display shadows in your scene. We must have at least one light with castShadow: true enabled. | No | . | sound | sound |   | The sound component defines the entity as a source of sound or audio. The sound component can be positional and is thus affected by the component’s position. | No | . | textinput | textinput |   | Opens an HTML prompt when clicked. Sends text input as an event on MQTT. Requires click-listener. | No | . | url | string |   | Use File Store paths under ‘store/users/username’, see CDN and other storage options in the description above. | No | . | remote-render | remote-render |   | Whether or not an object should be remote rendered [Experimental]. | No | . | video-control | video-control |   | Adds a video to an entity and controls its playback. | No | . | attribution | attribution |   | Attribution Component. Saves attribution data in any entity. | No | . | spe-particles | spe-particles |   | GPU based particle systems in A-Frame. | No | . | look-at | string |   | The look-at component defines the behavior for an entity to dynamically rotate or face towards another entity or position. Use ‘#my-camera’ to face the user camera, otherwise can take either a vec3 position or a query selector to another entity. | No | . | buffer | boolean | True | Transform geometry into a BufferGeometry to reduce memory usage at the cost of being harder to manipulate (geometries only: box, circle, cone, …). | No | . | jitsi-video | jitsi-video |   | Apply a jitsi video source to the geometry. | No | . | material | material | {'color': '#7f7f7f'} | The material properties of the object’s surface. | No | . | multisrc | multisrc |   | Define multiple visual sources applied to an object. | No | . | screenshareable | boolean | True | Whether or not a user can screenshare on an object. | No | . | skipCache | boolean | False | Disable retrieving the shared geometry object from the cache. (geometries only: box, circle, cone, …). | No | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/roundedbox.html#rounded-box-attributes",
    "relUrl": "/content/schemas/message/roundedbox.html#rounded-box-attributes"
  },"806": {
    "doc": "Rounded Box",
    "title": "Rounded Box",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/roundedbox.html",
    "relUrl": "/content/schemas/message/roundedbox.html"
  },"807": {
    "doc": "arena.objects.roundedbox",
    "title": "\narena.objects.roundedbox    ",
    "content": "class Roundedbox(arena.objects.arena_object.Object): Roundedbox object class to manage its properties in the ARENA: Rounded Box Geometry. Parameters . | float depth: depth Defaults to '1' (optional) | float height: height Defaults to '1' (optional) | float radius: radius of edge Defaults to '0.15' (optional) | int radiusSegments: segments radius Defaults to '10' (optional) | float width: width Defaults to '1' (optional) | . Roundedbox(**kwargs) object_type = &#39;roundedbox&#39; Inherited Members . arena.objects.arena_object.Object type all_objects evt_handler update_handler animations delayed_prop_tasks update_attributes dispatch_animation remove_animation_at_index clear_animations clickable json_preprocess json_postprocess json get add remove exists arena.base_object.BaseObject json_encode ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/roundedbox.html",
    "relUrl": "/content/python-api/objects/roundedbox.html"
  },"808": {
    "doc": "arena.objects.roundedbox",
    "title": "arena.objects.roundedbox",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/roundedbox.html",
    "relUrl": "/content/python-api/objects/roundedbox.html"
  },"809": {
    "doc": "ARENA Runtime",
    "title": "ARENA Runtime",
    "content": "ARENA applications are compiled into WebAssembly (WASM),an open standard that defines a portable binary code format for executable programs, currently supported by all major web browsers. WASM programs are run in a secure sandbox and have been gaining traction outside of the browser as a lightweight and secure option for serverless-style computing. There are compilers for many languages that target WASM. ARENA includes a WASM runtime environment for browser-capable devices that leverages the already available browser infrastructure, whereas other headless compute elements run a standalone WASM runtime. We are currently developing WASM runtimes in both Linux-capable devices and even dispatch Ahead-of-Time (AOT) compiled WASM to microcontrollers. Our WASM runtime accepts requests to execute programs, provides sandboxed execution with access to (also sandboxed) networked resources, and manages the WASM programs’ lifetime, including live migration capabilities (i.e.context swap across devices). The WASM runtime provides a basis for agile programs that operate in the dynamic, distributed computing contexts we imagine for future XR applications. It is an enabler for ARENA applications that can span cloud, edge and device plat-forms in a network transparent manner. We are also developing a program manager for scenes, we call init3D, to provide facilities to manage programs interactively from within scenes. ",
    "url": "https://docs.arenaxr.org/content/architecture/runtime.html",
    "relUrl": "/content/architecture/runtime.html"
  },"810": {
    "doc": "ARENA Runtime",
    "title": "ARENA Runtime Orchestrator",
    "content": "By leveraging a common runtime and carefully integrated resource monitoring, the ARENA Orchestrator can handle very heterogenous compute resources, across compute classes, from small embedded devices to edge servers. It is distinct from several previous frameworks for managing distributed computing in that it focus on adaptation to changing resources and support for highly heterogenous distributed systems found at the edge. The ARENA Orchestrator is responsible for managing computational resources available in an ARENA realm (realms represent a geographically distinct set of resources; see Architecture). It uses WASM modules as a basic compute unit that can run in isolation in a distributed set of available runtimes, which run in, e.g., headsets, phones, laptops, embedded routers or edge servers. Runtimes register in ARTS their availability, resources. and system access APIs implemented. As applications are started in the ARENA (Figure 1), the orchestrator decides the best available compute resource(s) to run the application and monitors its execution do adapt to changing resource availability and consumption. This execution-time adaptation is a unique aspect of ARTS that leverages an important feature: live migration of WASM modules (see runtime). Figure 1. Starting a new Application in the ARENA . See the Orchestrator github. The ARENA Programs Section details how to start programs within a scene using the ARENA runtime. ",
    "url": "https://docs.arenaxr.org/content/architecture/runtime.html#arena-runtime-orchestrator",
    "relUrl": "/content/architecture/runtime.html#arena-runtime-orchestrator"
  },"811": {
    "doc": "Runtime",
    "title": "arena-unity Runtime",
    "content": "The ArenaUnity package can be used to build new interfaces to collaboratively connect and edit ARENA scenes. Be sure to use the project setup instructions to install the package. For the Editor interface, see the ARENA Unity Editor instructions. ",
    "url": "https://docs.arenaxr.org/content/unity/runtime.html#arena-unity-runtime",
    "relUrl": "/content/unity/runtime.html#arena-unity-runtime"
  },"812": {
    "doc": "Runtime",
    "title": "Architecture",
    "content": ". | The .NET 4.x API level is required since ARENA JSON payloads are fluid, and we cannot keep up with schema serialization definitions by developers and users. So we use the dynamic object instantiations offered in the .Net 4 API to test for JSON attributes at runtime. | ArenaClientScene is a Singleton class, meant to be instantiated only once to control the auth and MQTT communication flow. | ArenaObject is a class for each GameObjects to publish to the ARENA, accessing the publish and subscribe MQTT methods through ArenaClientScene.Instance. ArenaClientScene will manage attaching ArenaObject to Unity GameObjects for you. | . ",
    "url": "https://docs.arenaxr.org/content/unity/runtime.html#architecture",
    "relUrl": "/content/unity/runtime.html#architecture"
  },"813": {
    "doc": "Runtime",
    "title": "Example",
    "content": "The example code below contains both synchronous and asynchronous APIs, so please plan your application events accordingly. using System.Collections; using ArenaUnity; using UnityEngine; using UnityEngine.UI; public class ArenaTestButton : MonoBehaviour { /// &lt;summary&gt; /// Demonstrate basic usage of the ArenaUnity package. /// &lt;/summary&gt; IEnumerator ArenaUnityBeginnerDemo() { // Only one singleton connection instance allowed per application. ArenaClientScene scene = ArenaClientScene.Instance; scene.authType = ArenaMqttClient.Auth.Anonymous; // Set the ARENA webserver main host address, default: \"arenaxr.org\". scene.hostAddress = \"arenaxr.org\"; // Set the namespace name for the scene, default: [your ARENA username]. scene.namespaceName = \"public\"; // Set the scene name for the scene, default: \"example\". scene.sceneName = \"example\"; // Authenticate flow, MQTT connection flow, and Persistence download flow. // This will execute an asynchronous coroutine thread for these flows. scene.ConnectArena(); yield return new WaitUntil(() =&gt; scene.mqttClientConnected); // Display the web browser GUI client URL, set after MQTT connection flow completes. Debug.Log($\"Scene URL: {scene.sceneUrl}\"); // Create GameObject, and add ArenaObject script to manage updates, it will automatically send an MQTT create message GameObject cube = GameObject.CreatePrimitive(PrimitiveType.Cube); ArenaObject arenaObject = cube.AddComponent(typeof(ArenaObject)) as ArenaObject; // Change the parent/name/transform, it will automatically send an MQTT update message cube.transform.rotation = UnityEngine.Random.rotation; // Publish a custom event under this client's \"camera\" object scene.PublishEvent(scene.camid, \"my-custom-event-type\", \"{\\\"my-attribute\\\": \\\"my-custom-attribute\\\"}\"); // Publish a fully formed json object update message const string payload = \"{\\\"object_id\\\":\\\"scene-options\\\",\\\"persist\\\":true,\\\"type\\\":\\\"scene-options\\\",\\\"action\\\":\\\"update\\\",\\\"data\\\":{\\\"env-presets\\\":{\\\"ground\\\":\\\"none\\\"}}}\"; scene.PublishObject(\"scene-options\", payload); // Instantiate the callback for all messages. scene.OnMessageCallback = MessageCallback; } /// &lt;summary&gt; /// A delegate method used as a callback to go some special handling on incoming messages. /// &lt;/summary&gt; public static void MessageCallback(string topic, byte[] message) { Debug.LogFormat(\"Message received on topic {0}: {1}\", topic, System.Text.Encoding.UTF8.GetString(message)); } /// &lt;summary&gt; /// Demonstrate advanced usage of the ArenaUnity package. /// &lt;/summary&gt; IEnumerator ArenaUnityAdvancedDemo() { // Create a simple arena mqtt client and send receive messages. GameObject gobj = new GameObject(\"Arena Mqtt Client Advanced\"); MyArenaClient client = gobj.AddComponent(typeof(MyArenaClient)) as MyArenaClient; // Setup a connection using a custom namespace and anonymous authentication. client.hostAddress = \"arenaxr.org\"; client.authType = ArenaMqttClient.Auth.Anonymous; // Alternate, Manual auth: Store any local jwt tokens here, before auth starts. // Derive the local path from the next line. // string localMqttPath = Path.Combine(client.appFilesPath, \".arena_mqtt_auth\"); // client.authType = ArenaMqttClient.Auth.Manual; // Authenticate flow, MQTT connection flow. client.ConnectArena(); yield return new WaitUntil(() =&gt; client.mqttClientConnected); // Display the MQTT JWT permission payload/claims, set after authentication flow completes. Debug.Log($\"Permissions: {client.permissions}\"); // Custom MQTT pub/sub string[] topics = new string[] { \"my/custom/topic/#\" }; client.Subscribe(topics); yield return new WaitForSeconds(2); client.Publish(\"my/custom/topic/channel/device-888\", System.Text.Encoding.UTF8.GetBytes(\"some payload\")); // MQTT disconnect client.DisconnectArena(); } public class MyArenaClient : ArenaMqttClient { public void ConnectArena() { // start auth flow and MQTT connection StartCoroutine(Signin()); } // Directly override the incoming message handler. protected override void DecodeMessage(string topic, byte[] message) { Debug.LogFormat(\"Message received on topic {0}: {1}\", topic, System.Text.Encoding.UTF8.GetString(message)); } } } . ",
    "url": "https://docs.arenaxr.org/content/unity/runtime.html#example",
    "relUrl": "/content/unity/runtime.html#example"
  },"814": {
    "doc": "Runtime",
    "title": "Runtime",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/unity/runtime.html",
    "relUrl": "/content/unity/runtime.html"
  },"815": {
    "doc": "arena.attributes.scale",
    "title": "\narena.attributes.scale    ",
    "content": "class Scale(arena.attributes.attribute.Attribute): Scale attribute class to manage its properties in the ARENA: 3D object scale. Usage: scale=Scale(...) or scale=Scale(x,y,z) or scale=(x,y,z) . Parameters . | float x: x Defaults to '1' (optional) | float y: y Defaults to '1' (optional) | float z: z Defaults to '1' (optional) | . Scale(x=None, y=None, z=None) def to_str(self): array Inherited Members . arena.base_object.BaseObject add json_encode json ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/scale.html",
    "relUrl": "/content/python-api/attributes/scale.html"
  },"816": {
    "doc": "arena.attributes.scale",
    "title": "arena.attributes.scale",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/scale.html",
    "relUrl": "/content/python-api/attributes/scale.html"
  },"817": {
    "doc": "Scale",
    "title": "Scale",
    "content": "3D object scale. ",
    "url": "https://docs.arenaxr.org/content/schemas/message/scale.html#scale",
    "relUrl": "/content/schemas/message/scale.html#scale"
  },"818": {
    "doc": "Scale",
    "title": "Scale Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | x | number | 1 | x | Yes | . | y | number | 1 | y | Yes | . | z | number | 1 | z | Yes | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/scale.html#scale-attributes",
    "relUrl": "/content/schemas/message/scale.html#scale-attributes"
  },"819": {
    "doc": "Scale",
    "title": "Scale",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/scale.html",
    "relUrl": "/content/schemas/message/scale.html"
  },"820": {
    "doc": "3D Scanner Tools",
    "title": "List of 3D Scanner Tools",
    "content": "There are a number of tools and technologies to choose from to capture 3D scans of reality. We’ve tried to share our experiences here when scanning Objects and Rooms. ",
    "url": "https://docs.arenaxr.org/content/3d-content/scan-tools.html#list-of-3d-scanner-tools",
    "relUrl": "/content/3d-content/scan-tools.html#list-of-3d-scanner-tools"
  },"821": {
    "doc": "3D Scanner Tools",
    "title": "LiDAR",
    "content": "LiDAR or “light/laser detection and ranging” is a method for determining ranges to an object or a surface with a laser and measuring the time for the reflected light to return to the receiver. This can be powerful when combined with visual light from a camera to capture RGB-D images. | App Name | Quality / 10 | Time to Use | Difficulty / 10 | Other notes | . | Polycam | 3/10, gives good idea of room but very choppy | 5 min | 0/10 | Can only do 360 picture, can’t do room scan without lidar sensor (needs iphone 12 pro/promax) | . | Scaniverse | 4/10 not great, depends on room but gives good idea of size | 8 min | 0/10 | Can do room scan &amp; objects. Scaniverse room scan write up. | . | 3D Scanner App | Obj:7/10, Room: 4/10 | Obj: 15 min, Room: 5 min | 0/10 | Works best with small/medium sized objects, not rooms. There is a home scan mode that only works indoors, should be better with lidar sensor. The small object is difficult to export out of app | . | KIRI Engine |   |   | 0/10 | Has free &amp; paid version, requires phone with lidar sensor | . | Matterport |   |   |   | Matterport room scan write up. | . ",
    "url": "https://docs.arenaxr.org/content/3d-content/scan-tools.html#lidar",
    "relUrl": "/content/3d-content/scan-tools.html#lidar"
  },"822": {
    "doc": "3D Scanner Tools",
    "title": "NeRF",
    "content": "NeRF or “neural radiance field” is an AI-based method of building a 3D model from 2D images. | App Name | Quality / 10 | Time to Use | Difficulty / 10 | Other notes | . | 3Dpresso |   |   | 0/10 | Film video and it turns it into 3d model, doesn’t do rooms | . | Luma AI | 2/10 | 40 min | 0/10 |   | . | Nerfstudio | 8/10, can capture 360 of outdoors pretty well but not super clear |   | 8/10, based on description |   | . | Volinga |   |   |   | Have to create account, has licenses | . ",
    "url": "https://docs.arenaxr.org/content/3d-content/scan-tools.html#nerf",
    "relUrl": "/content/3d-content/scan-tools.html#nerf"
  },"823": {
    "doc": "3D Scanner Tools",
    "title": "Photogrammetry",
    "content": "Photogrammetry is the process of recording models through photography and other electromagnetic radiant data. | App Name | Quality / 10 | Time to Use | Difficulty / 10 | Other notes | . | AliceVision (Meshroom) | 7/10, depends on object, and equipment to take pictures | Depends how many images &amp; what the object is | 4/10 | Better for models, not room scan. Can be difficult for certain objects. Our Meshroom Tutorial. | . | Agisoft Metashape | 10/10, looks good |   |   | Have to pay, Works for room scan (also does satellite image processing &amp; satellite image processing) | . | RealityCapture (Unreal Engine) | 10/10, looks good |   |   | Have to pay | . | RealityScan (Unreal Engine) | Obj: 8/10 | 10 min | 0/10 easy | Scans models, not room | . ",
    "url": "https://docs.arenaxr.org/content/3d-content/scan-tools.html#photogrammetry",
    "relUrl": "/content/3d-content/scan-tools.html#photogrammetry"
  },"824": {
    "doc": "3D Scanner Tools",
    "title": "3D Scanner Tools",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/3d-content/scan-tools.html",
    "relUrl": "/content/3d-content/scan-tools.html"
  },"825": {
    "doc": "Scaniverse Small Scans",
    "title": "Scanning Spaces with LiDAR iPhone and Scaniverse",
    "content": "Scaniverse uses the lidar on your iPhone or iPad to generate a 3D model. Requirements (one of): . | iPhone 12 Pro | iPhone Pro Max | 2020 iPad Pro | . Scan Steps . | Review the Scaniverse tutorials. | Download the Scaniverse iOS software. | Scan the room you want, and save it as a .glb format model. (see below) | Generate a scene for your model. You may use our scene build tutorial for pointers. | Upload your model to dropbox using our suggestions. | Review your model in the ARENA and adjust the room model’s position and rotation as needed. | . Using Scaniverse . | Open Scaniverse and click on “Create Scan”. | Make sure the range setting is at the max (typically 5m). | Press the “Start Scan” button and move around the space trying to fill in the entire volume. Slow and steady motions work best. | When you are done, select texture quality “High”. Experiment with different quality levels, but keep in mind that “Ultra” can lead to significantly larger model files which take longer to download and won’t work as well on slower machines. | Save the file (sadly you can’t go back and change the quality after this step) | Click the share button on the preview screen | Click export model | Select GLB for ARENA | Use airdrop or one of the other options to transfer the model to your computer. This can be done later offline. | . ",
    "url": "https://docs.arenaxr.org/content/3d-content/scaniverse.html#scanning-spaces-with-lidar-iphone-and-scaniverse",
    "relUrl": "/content/3d-content/scaniverse.html#scanning-spaces-with-lidar-iphone-and-scaniverse"
  },"826": {
    "doc": "Scaniverse Small Scans",
    "title": "Scaniverse Small Scans",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/3d-content/scaniverse.html",
    "relUrl": "/content/3d-content/scaniverse.html"
  },"827": {
    "doc": "Scene Options",
    "title": "Scene Options",
    "content": "ARENA Scene Options. ",
    "url": "https://docs.arenaxr.org/content/schemas/message/scene-options.html#scene-options",
    "relUrl": "/content/schemas/message/scene-options.html#scene-options"
  },"828": {
    "doc": "Scene Options",
    "title": "Scene Options Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | clickableOnlyEvents | boolean | True | True = publish only mouse events for objects with click-listeners; False = all objects publish mouse events. | Yes | . | distanceModel | string; One of: ['exponential', 'inverse', 'linear'] | 'inverse' | Algorithm to use to reduce the volume of the audio source as it moves away from the listener. | No | . | sceneHeadModels | array | [] | Define the default head model(s) for the scene in a list. Users may still choose from the ARENA default list of head models as well. | No | . | jitsiHost | string | 'jitsi0.andrew.cmu.edu:8443' | Jitsi host used for this scene. | No | . | maxAVDist | number | 20 | Maximum distance between cameras/users until audio and video are cut off. For saving bandwidth on scenes with large amounts of user activity at once. | Yes | . | navMesh | string | '' | Navigation Mesh URL. | No | . | networkedLocationSolver | boolean | False | ARMarker location solver parameter. By default (networkedLocationSolver=false) clients solve camera location locally when a static marker is detected. When true, publishes marker detections (to realm/g/a/camera-name) and defers all tag solving of client camera to a solver sitting on pubsub. | No | . | privateScene | boolean | False | False = scene will be visible; True = scene will not show in listings. | Yes | . | refDistance | number | 1 | Distance at which the volume reduction starts taking effect. | No | . | rolloffFactor | number | 1 | How quickly the volume is reduced as the source moves away from the listener. | No | . | screenshare | string | 'screenshare' | Name of the 3D object used when sharing desktop. | No | . | videoFrustumCulling | boolean | True | If false, will disable video frustum culling (video frustum culling stops video from users outside of view). | Yes | . | videoDistanceConstraints | boolean | True | If false, will disable video distance constraints (video resolution decreases with distance from users in view). | Yes | . | videoDefaultResolutionConstraint | number | 180 | Sets the default max resolution for all users. Ignored when videoDistanceConstraints = true. | Yes | . | volume | number | 1 | Volume for users in a scene. | No | . | physics | boolean | False | If true, will load the aframe-physics-system. Required for the following: dynamic-body, impulse, collision-listener. | Yes | . | ar-hit-test | object |   | A-Frame AR Hit Test Settings. |   | . | More properties at AR Hit Test component. | No | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/scene-options.html#scene-options-attributes",
    "relUrl": "/content/schemas/message/scene-options.html#scene-options-attributes"
  },"829": {
    "doc": "Scene Options",
    "title": "Scene Options",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/scene-options.html",
    "relUrl": "/content/schemas/message/scene-options.html"
  },"830": {
    "doc": "arena.scene",
    "title": "\narena.scene    ",
    "content": "class Scene(arena.arena_mqtt.ArenaMQTT): Gives access to an ARENA scene. Can create and execute various user-defined functions/tasks. Parameters . | str host: Hostname of the ARENA webserver (required). | str realm: Reserved topic fork for future use (optional). | str namespace: Username of authenticated user or other namespace (automatic). | str scene: The name of the scene, without namespace (required). | . Scene( host=&#39;arenaxr.org&#39;, realm=&#39;realm&#39;, network_latency_interval=10000, on_msg_callback=None, new_obj_callback=None, user_join_callback=None, user_left_callback=None, delete_obj_callback=None, end_program_callback=None, video=False, debug=False, cli_args=False, **kwargs) telemetry connected_evt cmd_interpreter def parse_cli(self, cli_args=False): Reusable command-line options to give apps flexible options to avoid hard-coding locations. def exit(self, arg=0): Custom exit to push errors to telemetry . def on_connect(self, client, userdata, flags, rc): Paho MQTT client on_connect callback . def on_message(self, client, userdata, msg): def on_publish(self, client, userdata, mid): async def process_message(self): def callback_wrapper(self, func, arg, msg): Checks for number of arguments for callback . def generate_custom_event(self, evt, action=&#39;clientEvent&#39;): Publishes an custom event. Could be user or library defined . def generate_click_event(self, obj, type=&#39;mousedown&#39;, **kwargs): Publishes an click event . def manipulate_camera(self, cam, **kwargs): Publishes a camera manipulation event . def look_at(self, cam, target): Publishes a camera manipulation event . def teleport_to_landmark(self, cam, target): Publishes a camera manipulation event . all_objects Returns all the objects in a scene . def add_object(self, obj): Public function to create an object . def add_objects(self, objs): Public function to create multiple objects in a list . def update_object(self, obj, **kwargs): Public function to update an object . def update_objects(self, objs, **kwargs): Public function to update multiple objects in a list . def delete_object(self, obj): Public function to delete an object . def delete_attributes(self, obj, attributes=None): Public function to delete a list of 'attributes' as a string[], updating each to null . def run_animations(self, obj): Runs all dispatched animations . def create_delayed_task(self, obj, anim): Creates a delayed task to push the end state of an animation after the expected duration. Uses async sleep to avoid blocking. Parameters . | obj: arena object to update | anim: Animation to run | . Returns . created async task . def get_persisted_obj(self, object_id): Returns a dictionary for a persisted object. If object is known by arena-py, return local object, not persisted . def get_persisted_objs(self): Returns a dictionary of persisted objects. If object is known by arena-py, return our local object, not persisted Silently fails/skip objects without object_id and object_type (except programs) Instantiates generic Object if object_type is given but unknown to arena-py . def get_persisted_scene_option(self): Returns a dictionary for scene-options. [TODO] wrap the output as a BaseObject . def get_writable_scenes(self): Request list of scene names for logged in user account that user has publish permission for. Returns: list of scenes. def get_user_list(self): Returns a list of users . def get_rcv_pub_queue_len(self): Return QueueStats object with receive and publish queue length . def run_info_update(self, run_info): Callback when program stats are updated; publish program object update . Inherited Members . arena.arena_mqtt.ArenaMQTT scene device auth debug username remote_auth_token mqttc_id config_url config_data mqtt_host subscribe_topic latency_topic ignore_topic mqttc can_publish on_msg_callback end_program_callback event_loop mqtt_connect_evt msg_queue generate_client_id network_latency_update run_once run_after_interval run_async run_forever run_tasks stop_tasks sleep on_disconnect disconnect message_callback_add message_callback_remove rcv_queue_len pub_queue_len client_id class Arena(Scene): Another name for Scene. Inherited Members . Scene Scene telemetry connected_evt cmd_interpreter parse_cli exit on_connect on_message on_publish process_message callback_wrapper generate_custom_event generate_click_event manipulate_camera look_at teleport_to_landmark all_objects add_object add_objects update_object update_objects delete_object delete_attributes run_animations create_delayed_task get_persisted_obj get_persisted_objs get_persisted_scene_option get_writable_scenes get_user_list get_rcv_pub_queue_len run_info_update arena.arena_mqtt.ArenaMQTT scene device auth debug username remote_auth_token mqttc_id config_url config_data mqtt_host subscribe_topic latency_topic ignore_topic mqttc can_publish on_msg_callback end_program_callback event_loop mqtt_connect_evt msg_queue generate_client_id network_latency_update run_once run_after_interval run_async run_forever run_tasks stop_tasks sleep on_disconnect disconnect message_callback_add message_callback_remove rcv_queue_len pub_queue_len client_id ",
    "url": "https://docs.arenaxr.org/content/python-api/scene.html",
    "relUrl": "/content/python-api/scene.html"
  },"831": {
    "doc": "arena.scene",
    "title": "arena.scene",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/scene.html",
    "relUrl": "/content/python-api/scene.html"
  },"832": {
    "doc": "Scenes",
    "title": "Scenes in arena-py",
    "content": "Scenes give arena-py programs access to an ARENA scene. It provides an interface to add/update objects, run animations, and many more! There are 3 main ways to define which server, scene name, and other arguments you wish to use: . | Python Object Args | Environment Variable Args | Command Line Args | . ",
    "url": "https://docs.arenaxr.org/content/python/scenes.html#scenes-in-arena-py",
    "relUrl": "/content/python/scenes.html#scenes-in-arena-py"
  },"833": {
    "doc": "Scenes",
    "title": "Python Object Args",
    "content": "To get access to a scene in the ARENA, create a Scene object. Make sure you have proper permissions to access it! . scene = Scene(host=\"arenaxr.org\", scene=\"example\") # scene = Arena(host=\"arenaxr.org\", scene=\"example\") works too . Scene Object Arguments . See Scene API Spec. | host: Base ARENA URL. | realm: ARENA realm name. | scene: ARENA scene name. | namespace: ARENA namespace. Default value is ARENA username. | video: If true, request permissions for video conference. Default = False. | debug: If true, print a log of all publish messages from this client. Default = False. | cli_args: If true, several standardized parameters are available. Default = False. | debug: If True, print authentication debug information and every published message. Ignore this parameter. | network_latency_interval: Interval (in ms) to run network graph latency update. Default value is 10000 (10 secs). Ignore this parameter. | . Scene Object Callbacks . See Scene Callbacks. | on_msg_callback: See Scene Callbacks | new_obj_callback: See Scene Callbacks | user_join_callback: See Scene Callbacks | user_left_callback: See Scene Callbacks | delete_obj_callback: See Scene Callbacks | end_program_callback: See Scene Callbacks | . ",
    "url": "https://docs.arenaxr.org/content/python/scenes.html#python-object-args",
    "relUrl": "/content/python/scenes.html#python-object-args"
  },"834": {
    "doc": "Scenes",
    "title": "Environment Variable Args",
    "content": "It is also possible to override these args un Scene() using environmental variables at the command line as shown below. This allows a simple way to re-target applications for your own environment without having to change the parameters manually in the code. export MQTTH=arenaxr.org # ARENA webserver main host export SCENE=scene export NAMESPACE=namespace python3 program.py . Definitions of other environment variables are available. ",
    "url": "https://docs.arenaxr.org/content/python/scenes.html#environment-variable-args",
    "relUrl": "/content/python/scenes.html#environment-variable-args"
  },"835": {
    "doc": "Scenes",
    "title": "Command Line Args",
    "content": "The cli_args parameter can be used to avoid defining many of these parameters in the Scene() object, and expect the user to supply them on the command line. Several have been standardized, and we make it simple to include custom args for your program. Simple CLI . If you have scene-dependant settings, like position, rogation, scale, which might change with each scene name change, you can supply them on the command line. Usage: . python program.py -s example -p -10 0 10 -r 0 45 0 -c 0.5 0.5 0.5 . Then you can consume them in your program: . scene = Scene(cli_args=True) scene.add_object(Object( object_id=\"my-parent-object-name\", position=scene.args[\"position\"], rotation=scene.args[\"rotation\"], scale=scene.args[\"scale\"], )) . This is a list of the most common options available in this mode, (python3 program.py -h to view): . -h, --help show this help message and exit -mh HOST, --host HOST ARENA webserver main host to connect to -n NAMESPACE, --namespace NAMESPACE Namespace of scene -s SCENE, --scene SCENE Scene to publish and listen to -d DEVICE, --device DEVICE Device to publish and listen to -p POSITION POSITION POSITION, --position POSITION POSITION POSITION App position as cartesian.x cartesian.y cartesian.z -r ROTATION ROTATION ROTATION, --rotation ROTATION ROTATION ROTATION App rotation as euler.x euler.y euler.z -c SCALE SCALE SCALE, --scale SCALE SCALE SCALE App scale as cartesian.x cartesian.y cartesian.z -D, --debug Debug mode. Advanced CLI . You can add arbitrary arguments to any arena program. python program.py -s example --config ./configuration.json . You can specify the dictionary of help text, used in usage help, and the config will at least be None if unused. Simply set cli_args to true, use --config on the CLI, and then reference, but it’s a little unsafe if unused. scene = Scene(cli_args={\"config\": \"The location of the config file to load.\"}) # scene = Scene(cli_args=True) # works too! file = open(scene.args[\"config\"]) . ",
    "url": "https://docs.arenaxr.org/content/python/scenes.html#command-line-args",
    "relUrl": "/content/python/scenes.html#command-line-args"
  },"836": {
    "doc": "Scenes",
    "title": "Access to Persisted Objects",
    "content": "To get access to Objects in the persist database, you can use get_persisted_obj. @scene.run_once def main(): obj = scene.get_persisted_obj(object_id) print(obj) # obj should be an object in persist with persist=True . You can also just do: . @scene.run_once def main(): obj = scene.all_objects[object_id] print(obj) # obj should be an object in persist with persist=True . ",
    "url": "https://docs.arenaxr.org/content/python/scenes.html#access-to-persisted-objects",
    "relUrl": "/content/python/scenes.html#access-to-persisted-objects"
  },"837": {
    "doc": "Scenes",
    "title": "Scenes",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/python/scenes.html",
    "relUrl": "/content/python/scenes.html"
  },"838": {
    "doc": "ARENA Scenes",
    "title": "ARENA Scenes",
    "content": "ARENA scenes include 3D content, configuration parameters, applications with shared end-points that allow users’ interactions, and information about markers that might serve as location anchors to the Scene. Scenes exist within a tree-like hierarchy with configurable access control and are often attached to a physical location. Using a web analogy, the Realm is like a (local) webserver and the Scene is like a particular web application at a URL endpoint. ",
    "url": "https://docs.arenaxr.org/content/architecture/scenes.html",
    "relUrl": "/content/architecture/scenes.html"
  },"839": {
    "doc": "ARENA Scenes",
    "title": "Scene Objects",
    "content": "ARENA scenes are a collection of Entities to which Components can be attached, following A-Frame’s Entity-Component-System (ECS) architecture. We support the majority of A-Frames’s primitives (e.g., geometries like boxes, circles, spheres) and components (attributes that can be attached to objects, such as position, rotation, material, sound). We also added ARENA-specific components for AR markers, programs, networked events, and options. All ARENA objects have well-defined schemas, which are the basis for the over-the-wire message format shown below (Figure 2) and are transmitted over the PubSub. { \"object_id\": \"abox\", \"persist\": true, \"type\": \"object\", \"action\": \"create\", \"data\": { \"object_type\": \"box\", \"depth\": 1, \"height\": 1, \"width\": 1, \"position\": { \"x\": 1, \"y\": 1, \"z\": 1 }, \"rotation\": { \"x\": 0, \"y\": 0, \"z\": 0, \"w\": 1 }, \"armarker\": { \"lat\": 40.4432, \"lon\": 79.9428, \"markerid\": \"1\", \"markertype\": \"apriltag_36h11\", \"size\": 150, \"ele\": 200 } } } . Figure 2. Example Message and Object Definition. All messages have an objectid, type, and an action (create, update, delete). Attributes in data are the object’s-specific attributes and components. The example shows a box geometry with depth, height and width attributes, position and rotation components, and an ARENA-specific ARMarker component. A web interface developed to make simple edits to a scene, shows an editable scene object list, which can include scene options, programs, lights and 3D geometries and models. We imagine more advanced interfaces could be developed to create scenes, and have already some prototype editors for VR/AR. ",
    "url": "https://docs.arenaxr.org/content/architecture/scenes.html#scene-objects",
    "relUrl": "/content/architecture/scenes.html#scene-objects"
  },"840": {
    "doc": "ARENA Scenes",
    "title": "Scene Loading",
    "content": "Scenes are loaded akin to web applications within a web browser. However, unlike most standard web browsers, it is possible to simultaneously view a composition of multiple scenes without switching between tabs. In XR, a user might have access to one or more scenes in the same physical area that can be layered within an XR browser session. When the Scene is loaded, its current state is fetched from a data store service that tracks the persisted state of the Scene (see Figure 3). Compositing scenes together in a single view approximates how people naturally interact with the physical environment (as opposed to manually switching tabs). Figure 3. Scene objects are first loaded from a data store service and then updated over PubSub. ",
    "url": "https://docs.arenaxr.org/content/architecture/scenes.html#scene-loading",
    "relUrl": "/content/architecture/scenes.html#scene-loading"
  },"841": {
    "doc": "ARENA Scenes",
    "title": "Real-time Updates",
    "content": "Once loaded, each of the 3D assets in a scene are then updated in real-time over the Realm’s local PubSub bus (see Figure 3). For example, if an application changes the color of a cube, this would be captured in a message over the bus. Figure 4 below exemplifies how a 3D scene is represented. Figure 4. Objects in an ARENA Scene are implicitly networked over a PubSub bus, where each object is controlled by a topic end-point. The topic hierarchy is partitioned by Realm (RealmID), owner name space (nsID), scenes (sceneID) and objects within the scene(camObjID or objID). Each object in a Scene is managed by a topic end-point on the PubSub bus, making them implicitly networked. When a user moves their camera or clicks on an object, these updates and events are transmitted as messages. This network transparency allows any number of applications and users running from different devices to interact seamlessly within the 3D environment. As shown in Figure 4, users can see an avatar representation of other users in AR/VR as their camera pose is being published. See more details about the ARENA PubSub structure. ",
    "url": "https://docs.arenaxr.org/content/architecture/scenes.html#real-time-updates",
    "relUrl": "/content/architecture/scenes.html#real-time-updates"
  },"842": {
    "doc": "ARENA Scenes",
    "title": "Access Control",
    "content": "Each user is given a token which defines read/write access to topics within the scene structure. This mechanism allows for very granular control over the objects in a scene. For example, we can make certain objects invisible to a user by not granting read ac-cess to that particular object in the PubSub structure. For simplicity, we currently use scenes as our basic unit of access control. We have defined two basic roles for users in a scene: editor and viewer. See more details about the ARENA PubSub access control. ",
    "url": "https://docs.arenaxr.org/content/architecture/scenes.html#access-control",
    "relUrl": "/content/architecture/scenes.html#access-control"
  },"843": {
    "doc": "Screenshare",
    "title": "Screenshare",
    "content": "You can share your screen in the ARENA following the tips below. ",
    "url": "https://docs.arenaxr.org/content/interface/screenshare.html",
    "relUrl": "/content/interface/screenshare.html"
  },"844": {
    "doc": "Screenshare",
    "title": "Screenshare on Primitive Objects",
    "content": "There are a few hints to help you establish objects to screenshare on. | If you choose the name/ID of an already existing object in a scene, it will set the texture of that existing object to be your screen. | If you choose an object that does not exist in a scene, it will spawn a new screen sharing plane with your chosen object_id. This object is not sent through the MQTT bus but is still created for all clients. | Once you have selected your object name, it will open a new tab that allows you to choose which screen you want to share, and ARENA will automatically place that screen onto the object with an object_id you specified. | You can do whatever you want the object you’re screen sharing on as if it were a normal arena object (change size, shape, attach children, etc). This also applies to the object screenshare; it’s just a standard ARENA object with object_id: screenshare! | When an object is dynamically created with the screen share button, it won’t go away after you stop screen sharing. It will only go away if you refresh the page. | You can no longer screenshare to every and any object. only objects with attribute screenshareable=True can be screen-shared on. | Screen share button now gives a list of objects with screenshareable=True and lets you select from them. you are allowed to select multiple. | An object with id screenshare will be created like before if there are no screenshareble objects in a scene. | . ",
    "url": "https://docs.arenaxr.org/content/interface/screenshare.html#screenshare-on-primitive-objects",
    "relUrl": "/content/interface/screenshare.html#screenshare-on-primitive-objects"
  },"845": {
    "doc": "Screenshare",
    "title": "Screenshare Custom Flat Screen Example",
    "content": "If you want to create a custom screen with traditional flat properties, the below example is one way. Note the box object type in use, adjusting the depth, height, width properties for the screen ratio we want. Applying the material texture to the outside of the box mesh (\"material\": {\"side\": \"front\"}) allows the screen to render from left to right on both sides since it is a box with 6 front planes and 6 back planes. The plane object, conversely, has 1 front plane and 1 back plane, and is another good primitive type to use. { \"object_id\": \"screen-flat\", \"data\": { \"object_type\": \"box\", \"depth\": 0.1, \"height\": 3, \"width\": 5.3, \"position\": { \"x\": 3, \"y\": 2.7, \"z\": 0 }, \"material\": { \"color\": \"#ffffff\", \"shader\": \"flat\", \"side\": \"front\" }, \"screenshareable\": true } } . ",
    "url": "https://docs.arenaxr.org/content/interface/screenshare.html#screenshare-custom-flat-screen-example",
    "relUrl": "/content/interface/screenshare.html#screenshare-custom-flat-screen-example"
  },"846": {
    "doc": "Screenshare",
    "title": "Screenshare Custom Curved Screen Example",
    "content": "If you want to create a custom screen with curved screen properties similar to a curved monitor, the below example is one way which generally mimics the A-Frame a-curvedimage primitive. Note the cylinder object type in use, adjusting the radius, height, thetaStart, thetaLength, openEnded properties for the screen ratio we want. Applying the material texture to the (\"material\": {\"side\": \"double\", \"repeat\": {\"x\": -1, \"y\": 1}}) allows the screen to render in reverse from left to right on both sides which has the effect of producing the correct left to right forward view on the inside curve of the cylinder since an open ended cylinder has 1 side front plane and 1 side back plane. { \"object_id\": \"screen-curved\", \"data\": { \"object_type\": \"cylinder\", \"height\": 5, \"radius\": 10, \"position\": { \"x\": 3, \"y\": 2.5, \"z\": 7 }, \"material\": { \"color\": \"#ffffff\", \"side\": \"double\", \"shader\": \"flat\", \"repeat\": { \"x\": -1, \"y\": 1 } }, \"openEnded\": true, \"thetaLength\": 60, \"screenshareable\": true, \"thetaStart\": 150 } } . ",
    "url": "https://docs.arenaxr.org/content/interface/screenshare.html#screenshare-custom-curved-screen-example",
    "relUrl": "/content/interface/screenshare.html#screenshare-custom-curved-screen-example"
  },"847": {
    "doc": "Screenshare",
    "title": "Screenshare Walkthrough",
    "content": ". | Click the More Options icon: | Click the Screenshare icon: | . | You will be asked to confirm if you intend to share your screen to the scene. | . | You can enter multiple screen object_id comma-delimited to share to multiple screens. | For a single screen share, the default screenshare id is typically a good option. | . | Select screens or application sharing. | . warning . Mac OS users: You need to give permissions to Chrome in the System Preferences first. | Click Screen Recording | Check Google Chrome | . | ARENA will open a new tab showing which view is being shared. | Click Exit to end screen sharing. | . | The ARENA scene view will now show your screen mapped across each object_id chosen. | . | Closeup view. | . ",
    "url": "https://docs.arenaxr.org/content/interface/screenshare.html#screenshare-walkthrough",
    "relUrl": "/content/interface/screenshare.html#screenshare-walkthrough"
  },"848": {
    "doc": "Screenshare",
    "title": "Using PowerPoint",
    "content": "tip . You can easily share just a screen in PowerPoint even in presenter mode. | Slide Show -&gt; Setup Slide Show Options -&gt; Browsed by an individual | Right-click during presentation brings up cursor options | Select Browsed by an individual | Select Slide Show | Select Setup Slide Show | . Single Window Present . | Select Slide Show tab | Select Setup Slide Show | Select Browsed by an individual (window) | . | Right-click for Pointers. | . ",
    "url": "https://docs.arenaxr.org/content/interface/screenshare.html#using-powerpoint",
    "relUrl": "/content/interface/screenshare.html#using-powerpoint"
  },"849": {
    "doc": "arena.scripts",
    "title": "\narena.scripts    ",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/python-api/scripts.html",
    "relUrl": "/content/python-api/scripts.html"
  },"850": {
    "doc": "arena.scripts",
    "title": "arena.scripts",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/scripts.html",
    "relUrl": "/content/python-api/scripts.html"
  },"851": {
    "doc": "Security",
    "title": "ARENA Security Overview",
    "content": "The root of trust for ARENA MQTT messages and other resources derives from the ACL permissions stored in the user database applied to an ARENA JWT. ",
    "url": "https://docs.arenaxr.org/content/architecture/security.html#arena-security-overview",
    "relUrl": "/content/architecture/security.html#arena-security-overview"
  },"852": {
    "doc": "Security",
    "title": "Authenticated or Anonymous",
    "content": "The ARENA supports 2 basic modes of access: an Authenticated account to control scenes, and a more restricted Anonymous login to view scenes only. | Web Authenticated: Users can view and edit ARENA scenes, and video conferences. | Web Anonymous: Users can only view ARENA scenes, video conferences, and additional features are restricted. Users can only update their own avatar 3d object. | CLI Authenticated: Users can run ARENA command line applications to alter the scene interactively. | . ",
    "url": "https://docs.arenaxr.org/content/architecture/security.html#authenticated-or-anonymous",
    "relUrl": "/content/architecture/security.html#authenticated-or-anonymous"
  },"853": {
    "doc": "Security",
    "title": "Authority Flow",
    "content": "The user database is consulted to generate the ARENA JSON Web Token (jwt1), then each client can use the jwt1 to connect to the MQTT broker. The scene persistence database generates its own JWT (jwt2) to subscribe to published messages. This means that the ACL for scenes can only be stored in the user database, since the scene persistence database depends on the token (jwt1) generated by the user database for published messages to succeed. Web and CLI Client Authority Flow . | A user supplies their login credentials on the ARENA web client by visiting the web host in a browser or when launching an ARENA Python application. | Login credentials are checked in the ARENA User database and an ACL-appropriate ARENA JWT (jwt1) is returned. The jwt1 will include a specific list of topics the user is allowed to publish and subscribe to. | (Web only) A Jitsi server connection is established using jwt1 which includes authority for this scene as a meeting room. | Any static graphical object data for the scene is loaded from the object persistence database if the jwt1 permits subscribing to this scene. | A MQTT broker connection is established with a subscription to messages for scene graphical updates, user text chat, and runtime management topics. Now the user can publish MQTT messages to change scene graphics, which is generally only permitted by the scene creator via jwt1. | If MQTT messages for the scene requested to be persistent and not ephemeral in the scene, the persistence database has subscribed to the MQTT broker with an all-scene subscription JWT (jwt2) so it may save those published message payloads. | The user is subscribed via MQTT to all graphical updates to the scene, user text chats, and app updates, creating a synchronized real-time 3d-experience for users. | Optionally, a user may add/delete scenes from the persistence database, requiring the appropriate topic level permission from jwt1. | . ",
    "url": "https://docs.arenaxr.org/content/architecture/security.html#authority-flow",
    "relUrl": "/content/architecture/security.html#authority-flow"
  },"854": {
    "doc": "Security",
    "title": "User IDs",
    "content": "ARENA web visitors are uniquely identified by their camera object-id, which includes their username and a server-issued session-id. As all 3D objects in the ARENA are identified by names, camera IDs have 3 underscore separated components, e.g: camera_1234567890_er1k. The last part is your username, the middle part is a unique ID. To restrict user-spoofing, the user database service assigns a unique session-id at the time the ARENA JWT is issued. Staff users may override the random user ID to test experimental cameras and equipment. You can specify the scene address URL parameter e.g. &amp;fixedCamera=er1k which will ignore the server assigned ID. ",
    "url": "https://docs.arenaxr.org/content/architecture/security.html#user-ids",
    "relUrl": "/content/architecture/security.html#user-ids"
  },"855": {
    "doc": "Security",
    "title": "Scene Permissions",
    "content": "All scenes have a few default permissions to allow public viewing and private editing. | Public Write: Open permission to subscribe to the entire scene (default: enabled). | Public Read: Open permission to publish to the entire scene (default: disabled). | Allow Anonymous: Open to allow Anonymous login users (default: enabled). | Editors: List of usernames namespace owner has added as editor (default: none). | . ",
    "url": "https://docs.arenaxr.org/content/architecture/security.html#scene-permissions",
    "relUrl": "/content/architecture/security.html#scene-permissions"
  },"856": {
    "doc": "Security",
    "title": "MQTT Permissions List",
    "content": "The list of topics the ARENA JWT permits you to publish and subscribe to can be viewed on those pages which make direct MQTT broker connections. | Scene View: Permissions link on the Settings panel. | Scene Builder: Permissions link on the right navigation menu in the top of the page. | Network Graph: Permissions link on the right navigation menu in the top of the page. | Runtime Visualization: Permissions link on the right navigation menu in the top of the page. | . ",
    "url": "https://docs.arenaxr.org/content/architecture/security.html#mqtt-permissions-list",
    "relUrl": "/content/architecture/security.html#mqtt-permissions-list"
  },"857": {
    "doc": "Security",
    "title": "User database access",
    "content": "User database access is controlled by use of third party Oauth2 from Google at the moment. ",
    "url": "https://docs.arenaxr.org/content/architecture/security.html#user-database-access",
    "relUrl": "/content/architecture/security.html#user-database-access"
  },"858": {
    "doc": "Security",
    "title": "MQTT Broker access",
    "content": "The ARENA JWT is required to connect to the broker and the custom claims of the JWT describe exactly which topics any user can publish or subscribe to. ",
    "url": "https://docs.arenaxr.org/content/architecture/security.html#mqtt-broker-access",
    "relUrl": "/content/architecture/security.html#mqtt-broker-access"
  },"859": {
    "doc": "Security",
    "title": "Jitsi Server access",
    "content": "The ARENA JWT is required to allow any client to publish video conferencing data to our Jitsi servers. The ARENA JWT includes fields denoting the Jitsi room representing the scene. ",
    "url": "https://docs.arenaxr.org/content/architecture/security.html#jitsi-server-access",
    "relUrl": "/content/architecture/security.html#jitsi-server-access"
  },"860": {
    "doc": "Security",
    "title": "Persistence database access",
    "content": "The ARENA JWT is required to save any scene objects or other scene settings. The topic structure which allows permissions for publish to a scene is used to determine if commands to delete a scene should be permitted or denied. It is also used to determine if a user can publish commands to the MQTT bus and in turn anything the persistence database is subscribed to. ",
    "url": "https://docs.arenaxr.org/content/architecture/security.html#persistence-database-access",
    "relUrl": "/content/architecture/security.html#persistence-database-access"
  },"861": {
    "doc": "Security",
    "title": "Security",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/architecture/security.html",
    "relUrl": "/content/architecture/security.html"
  },"862": {
    "doc": "Shadow",
    "title": "Shadow",
    "content": "The shadow component enables shadows for an entity and its children. Adding the shadow component alone is not enough to display shadows in your scene. We must have at least one light with castShadow: true enabled. ",
    "url": "https://docs.arenaxr.org/content/schemas/message/shadow.html#shadow",
    "relUrl": "/content/schemas/message/shadow.html#shadow"
  },"863": {
    "doc": "Shadow",
    "title": "Shadow Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | cast | boolean | False | Whether the entity casts shadows onto the surrounding scene. | Yes | . | receive | boolean | False | Whether the entity receives shadows from the surrounding scene. | Yes | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/shadow.html#shadow-attributes",
    "relUrl": "/content/schemas/message/shadow.html#shadow-attributes"
  },"864": {
    "doc": "Shadow",
    "title": "Shadow",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/shadow.html",
    "relUrl": "/content/schemas/message/shadow.html"
  },"865": {
    "doc": "arena.attributes.shadow",
    "title": "\narena.attributes.shadow    ",
    "content": "class Shadow(arena.attributes.attribute.Attribute): Shadow attribute class to manage its properties in the ARENA: The shadow component enables shadows for an entity and its children. Adding the shadow component alone is not enough to display shadows in your scene. We must have at least one light with castShadow: true enabled. Usage: shadow=Shadow(...) . Parameters . | bool cast: Whether the entity casts shadows onto the surrounding scene. (optional) | bool receive: Whether the entity receives shadows from the surrounding scene. (optional) | . Shadow(**kwargs) Inherited Members . arena.base_object.BaseObject add json_encode json ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/shadow.html",
    "relUrl": "/content/python-api/attributes/shadow.html"
  },"866": {
    "doc": "arena.attributes.shadow",
    "title": "arena.attributes.shadow",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/shadow.html",
    "relUrl": "/content/python-api/attributes/shadow.html"
  },"867": {
    "doc": "arena.event_loop.single_worker",
    "title": "\narena.event_loop.single_worker    ",
    "content": "class SingleWorker(arena.event_loop.worker.Worker): Wrapper for an ARENA task that runs once at startup. Inherited Members . arena.event_loop.worker.Worker Worker event_loop func event args kwargs run sleep print_traceback ",
    "url": "https://docs.arenaxr.org/content/python-api/event_loop/single_worker.html",
    "relUrl": "/content/python-api/event_loop/single_worker.html"
  },"868": {
    "doc": "arena.event_loop.single_worker",
    "title": "arena.event_loop.single_worker",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/event_loop/single_worker.html",
    "relUrl": "/content/python-api/event_loop/single_worker.html"
  },"869": {
    "doc": "Sound",
    "title": "Sound",
    "content": "The sound component defines the entity as a source of sound or audio. The sound component can be positional and is thus affected by the component’s position. More properties at A-Frame Sound. ",
    "url": "https://docs.arenaxr.org/content/schemas/message/sound.html#sound",
    "relUrl": "/content/schemas/message/sound.html#sound"
  },"870": {
    "doc": "Sound",
    "title": "Sound Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | autoplay | boolean | False | Whether to automatically play sound once set. | No | . | distanceModel | string; One of: ['linear', 'inverse', 'exponential'] | 'inverse' | Sound model. | No | . | loop | boolean | False | Whether to loop the sound once the sound finishes playing. | No | . | maxDistance | number | 10000 | Maximum distance between the audio source and the listener, after which the volume is not reduced any further. | No | . | on | string; One of: ['mousedown', 'mouseup', 'mouseenter', 'mouseleave', 'triggerdown', 'triggerup', 'gripdown', 'gripup', 'menudown', 'menuup', 'systemdown', 'systemup', 'trackpaddown', 'trackpadup'] | 'mousedown' | An event for the entity to listen to before playing sound. | No | . | poolSize | number | 1 | Numbers of simultaneous instances of this sound that can be playing at the same time. | No | . | positional | boolean | True | Whether or not the audio is positional (movable). | No | . | refDistance | number | 1 | Reference distance for reducing volume as the audio source moves further from the listener. | No | . | rolloffFactor | number | 1 | Describes how quickly the volume is reduced as the source moves away from the listener. | No | . | src | string |   | URL path to sound file e.g. ‘store/users/wiselab/sound/wave.mp3’. | No | . | volume | number | 1 | How loud to play the sound. | No | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/sound.html#sound-attributes",
    "relUrl": "/content/schemas/message/sound.html#sound-attributes"
  },"871": {
    "doc": "Sound",
    "title": "Sound",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/sound.html",
    "relUrl": "/content/schemas/message/sound.html"
  },"872": {
    "doc": "arena.attributes.sound",
    "title": "\narena.attributes.sound    ",
    "content": "class Sound(arena.attributes.attribute.Attribute): Sound attribute class to manage its properties in the ARENA: The sound component defines the entity as a source of sound or audio. The sound component can be positional and is thus affected by the component's position. More properties at https://aframe.io/docs/1.5.0/components/sound.html A-Frame Sound. Usage: sound=Sound(...) . Parameters . | bool autoplay: Whether to automatically play sound once set. (optional) | str distanceModel: Sound model. Allows [linear, inverse, exponential] Defaults to 'inverse' (optional) | bool loop: Whether to loop the sound once the sound finishes playing. (optional) | float maxDistance: Maximum distance between the audio source and the listener, after which the volume is not reduced any further. Defaults to '10000' (optional) | str on: An event for the entity to listen to before playing sound. Allows [mousedown, mouseup, mouseenter, mouseleave, triggerdown, triggerup, gripdown, gripup, menudown, menuup, systemdown, systemup, trackpaddown, trackpadup] Defaults to 'mousedown' (optional) | float poolSize: Numbers of simultaneous instances of this sound that can be playing at the same time. Defaults to '1' (optional) | bool positional: Whether or not the audio is positional (movable). Defaults to 'True' (optional) | float refDistance: Reference distance for reducing volume as the audio source moves further from the listener. Defaults to '1' (optional) | float rolloffFactor: Describes how quickly the volume is reduced as the source moves away from the listener. Defaults to '1' (optional) | str src: URL path to sound file e.g. 'store/users/wiselab/sound/wave.mp3'. (optional) | float volume: How loud to play the sound. Defaults to '1' (optional) | . Sound(src, positional=False, **kwargs) Inherited Members . arena.base_object.BaseObject add json_encode json ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/sound.html",
    "relUrl": "/content/python-api/attributes/sound.html"
  },"873": {
    "doc": "arena.attributes.sound",
    "title": "arena.attributes.sound",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/sound.html",
    "relUrl": "/content/python-api/attributes/sound.html"
  },"874": {
    "doc": "Source and Links",
    "title": "ARENA Source and Links",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/source.html#arena-source-and-links",
    "relUrl": "/content/source.html#arena-source-and-links"
  },"875": {
    "doc": "Source and Links",
    "title": "Publications",
    "content": ". | Pereira, N., Rowe, A., Farb, M., Liang, I., Lu, E., &amp; Riebling, E. (2021). ARENA: The Augmented Reality Edge Networking Architecture. 2021 International Symposium on Mixed and Augmented Reality (ISMAR). (PDF) BibTeX | Dasari, M., Lu, E., Farb, M. W., Pereira, N., Liang, I., &amp; Rowe, A. (2023). Scaling VR Video Conferencing. 2023 International Conference on Virtual Reality and 3D User Interfaces (VR). BibTeX | Lu, E., Bharadwaj, S., Dasari, M., Smith, C., Seshan, S., &amp; Rowe, A. (2023). RenderFusion: Balancing Local and Remote Rendering for Interactive 3D Scenes. 2023 International Symposium on Mixed and Augmented Reality (ISMAR). BibTeX | Jin, T., and Wu, S., Dasari, M., Apicharttrisorn, K., &amp; Rowe, A. (2024). StageAR: Markerless Mobile Phone Localization for AR in Live Events. 2024 IEEE Conference Virtual Reality and 3D User Interfaces (VR). (PDF) BibTeX | Jin, T., Dasari, M., Smith, C., Apicharttrisorn, K., Seshan, S., &amp; Rowe, A. (2024). MeshReduce: Scalable and Bandwidth Efficient 3D Scene Capture. 2024 IEEE Conference Virtual Reality and 3D User Interfaces (VR). (PDF) BibTeX | . ",
    "url": "https://docs.arenaxr.org/content/source.html#publications",
    "relUrl": "/content/source.html#publications"
  },"876": {
    "doc": "Source and Links",
    "title": "ARENA Usage Links",
    "content": "Our demonstration sample server runs at https://arenaxr.org . | ARENA Default Scene | ARENA Scene Builder | ARENA Network Graph | ARENA Runtime Supervisor - ARTS | ARENA File Store | ARENA Scene Locator - ATLAS - COMING SOON | ARENA Scene list | ARENA User Account | . ",
    "url": "https://docs.arenaxr.org/content/source.html#arena-usage-links",
    "relUrl": "/content/source.html#arena-usage-links"
  },"877": {
    "doc": "Source and Links",
    "title": "ARENA Sources",
    "content": "The ARENA project creates and makes use of several open source projects. This is a short list of the major projects in use, with ARENA projects in bold. | Repository | Project Purpose | . | aframevr/aframe | Web 3D Renderer | . | arenaxr/apriltag-gen | AprilTag 36h11 Generator | . | arenaxr/apriltag-js-standalone | AprilTag WASM Detector | . | arenaxr/arena-account | Authentication Backend | . | arenaxr/arena-docs | Documentation | . | arenaxr/arena-persist | Persistence Database | . | arenaxr/arena-py | Python Library | . | arenaxr/arena-renderfusion | Remote Renderer | . | arenaxr/arena-schemas | Wire Schema Generator | . | arenaxr/arena-services-docker | Deployment Docker | . | arenaxr/arena-unity | Unity Library | . | arenaxr/arena-web-core | Web Browser Client | . | arenaxr/ATLAS | Geolocation Database | . | conix-center/AR.js | AprilTag Decoding for AR.js | . | conix-center/posefusion | Pose Capture | . | filebrowser/filebrowser | File Store Backend | . | jitsi/jitsi-meet | Video Conferencing | . | SilverLineFramework/mosquitto-broker | Mosquitto Broker | . | SilverLineFramework/orchestrator | Runtime Orchestrator | . ",
    "url": "https://docs.arenaxr.org/content/source.html#arena-sources",
    "relUrl": "/content/source.html#arena-sources"
  },"878": {
    "doc": "Source and Links",
    "title": "Source and Links",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/source.html",
    "relUrl": "/content/source.html"
  },"879": {
    "doc": "SPE Particles",
    "title": "SPE Particles",
    "content": "GPU based particle systems in A-Frame. More properties at A-Frame SPE Particles component. ",
    "url": "https://docs.arenaxr.org/content/schemas/message/spe-particles.html#spe-particles",
    "relUrl": "/content/schemas/message/spe-particles.html#spe-particles"
  },"880": {
    "doc": "SPE Particles",
    "title": "SPE Particles Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | acceleration | vector3 | {'x': 0, 'y': 0, 'z': 0} | For sphere and disc distributions, only the x axis is used. | No | . | accelerationDistribution | string; One of: ['none', 'box', 'sphere', 'disc'] | 'none' | Distribution of particle acceleration, for disc and sphere, only the x component will be used. if set to NONE use the ‘distribution’ attribute for accelerationDistribution. | No | . | accelerationSpread | vector3 | {'x': 0, 'y': 0, 'z': 0} | Spread of the particle’s acceleration. for sphere and disc distributions, only the x axis is used. | No | . | activeMultiplier | number | 1 | Multiply the rate of particles emission, if larger than 1 then the particles will be emitted in bursts. note, very large numbers will emit all particles at once. | No | . | affectedByFog | boolean | True | If true, the particles are affected by THREE js fog. | No | . | alphaTest | number | 0 | Alpha values below the alphaTest threshold are considered invisible. | No | . | angle | array | [0] | 2D rotation of the particle over the particle’s lifetime, max 4 elements. | No | . | angleSpread | array | [0] | Spread in angle over the particle’s lifetime, max 4 elements. | No | . | blending | string; One of: ['no', 'normal', 'additive', 'subtractive', 'multiply', 'custom'] | 'normal' | Blending mode, when drawing particles. | No | . | color | array | ['#fff'] | Array of colors over the particle’s lifetime, max 4 elements. | No | . | colorSpread | array | [] | Spread to apply to colors, spread an array of vec3 (r g b) with 0 for no spread. note the spread will be re-applied through-out the lifetime of the particle. | No | . | depthTest | boolean | True | If true, don’t render a particle’s pixels if something is closer in the depth buffer. | No | . | depthWrite | boolean | False | If true, particles write their depth into the depth buffer. this should be false if we use transparent particles. | No | . | direction | string; One of: ['forward', 'backward'] | 'forward' | Make the emitter operate forward or backward in time. | No | . | distribution | string; One of: ['box', 'sphere', 'disc'] | 'box' | Distribution for particle positions, velocities and acceleration. will be overridden by specific ‘…Distribution’ attributes. | No | . | drag | number | 0 | Apply resistance to moving the particle, 0 is no resistance, 1 is full resistance, particle will stop moving at half of it’s maxAge. | No | . | dragSpread | number | 0 | Spread to apply to the drag attribute. | No | . | duration | number | -1 | Duration of the emitter (seconds), if less than 0 then continuously emit particles. | No | . | emitterScale | number | 100 | Global scaling factor for all particles from the emitter. | No | . | enableInEditor | boolean | False | Enable the emitter while the editor is active (i.e. while scene is paused). | No | . | enabled | boolean | True | Enable/disable the emitter. | No | . | frustumCulled | boolean | False | Enable/disable frustum culling. | No | . | hasPerspective | boolean | True | If true, particles will be larger the closer they are to the camera. | No | . | maxAge | number | 1 | Maximum age of a particle before reusing. | No | . | maxAgeSpread | number | 0 | Variance for the ‘maxAge’ attribute. | No | . | opacity | array | [1] | Opacity over the particle’s lifetime, max 4 elements. | No | . | opacitySpread | array | [0] | Spread in opacity over the particle’s lifetime, max 4 elements. | No | . | particleCount | integer | 100 | Maximum number of particles for this emitter. | No | . | positionDistribution | string; One of: ['none', 'box', 'sphere', 'disc'] | 'none' | Distribution of particle positions, disc and sphere will use the radius attributes. For box particles emit at 0,0,0, for sphere they emit on the surface of the sphere and for disc on the edge of a 2D disc on the XY plane. | No | . | positionOffset | vector3 | {'x': 0, 'y': 0, 'z': 0} | Fixed offset to the apply to the emitter relative to its parent entity. | No | . | positionSpread | vector3 | {'x': 0, 'y': 0, 'z': 0} | Particles are positioned within +- of these local bounds. for sphere and disc distributions only the x axis is used. | No | . | radius | number | 1 | Radius of the disc or sphere emitter (ignored for box). note radius of 0 will prevent velocity and acceleration if they use a sphere or disc distribution. | No | . | radiusScale | vector3 | {'x': 1, 'y': 1, 'z': 1} | Scales the emitter for sphere and disc shapes to form oblongs and ellipses. | No | . | randomizeAcceleration | boolean | False | If true, re-randomize acceleration when re-spawning a particle, can incur a performance hit. | No | . | randomizeAngle | boolean | False | If true, re-randomize angle when re-spawning a particle, can incur a performance hit. | No | . | randomizeColor | boolean | False | If true, re-randomize colour when re-spawning a particle, can incur a performance hit. | No | . | randomizeDrag | boolean | False | If true, re-randomize drag when re-spawning a particle, can incur a performance hit. | No | . | randomizeOpacity | boolean | False | If true, re-randomize opacity when re-spawning a particle, can incur a performance hit. | No | . | randomizePosition | boolean | False | If true, re-randomize position when re-spawning a particle, can incur a performance hit. | No | . | randomizeRotation | boolean | False | If true, re-randomize rotation when re-spawning a particle, can incur a performance hit. | No | . | randomizeSize | boolean | False | If true, re-randomize size when re-spawning a particle, can incur a performance hit. | No | . | randomizeVelocity | boolean | False | If true, re-randomize velocity when re-spawning a particle, can incur a performance hit. | No | . | relative | string; One of: ['local', 'world'] | 'local' | World relative particles move relative to the world, while local particles move relative to the emitter (i.e. if the emitter moves, all particles move with it). | No | . | rotation | number | 0 | Rotation in degrees. | No | . | rotationAxis | vector3 | {'x': 0, 'y': 0, 'z': 0} | Local axis when using rotation. | No | . | rotationAxisSpread | vector3 | {'x': 0, 'y': 0, 'z': 0} | Variance in the axis of rotation. | No | . | rotationSpread | number | 0 | Rotation variance in degrees. | No | . | rotationStatic | boolean | False | If true, the particles are fixed at their initial rotation value. if false, the particle will rotate from 0 to the ‘rotation’ value. | No | . | size | array | [1] | Array of sizes over the particle’s lifetime, max 4 elements. | No | . | sizeSpread | array | [0] | Spread in size over the particle’s lifetime, max 4 elements. | No | . | texture | string | '' | Texture to be used for each particle, may be a spritesheet. Examples: [blob.png, fog.png, square.png, explosion_sheet.png, fireworks_sheet.png], like path ‘static/images/textures/blob.png’. | No | . | textureFrameCount | integer | -1 | Number of frames in the spritesheet, negative numbers default to textureFrames.x * textureFrames.y. | No | . | textureFrameLoop | integer | 1 | Number of times the spritesheet should be looped over the lifetime of a particle. | No | . | textureFrames | vector2 | {'x': 1, 'y': 1} | X and Y frames for a spritesheet. each particle will transition through every frame of the spritesheet over its lifetime (see textureFramesLoop). | No | . | useTransparency | boolean | True | Should the particles be rendered with transparency? | No | . | velocity | vector3 | {'x': 0, 'y': 0, 'z': 0} | For sphere and disc distributions, only the x axis is used. | No | . | velocityDistribution | string; One of: ['none', 'box', 'sphere', 'disc'] | 'none' | Distribution of particle velocities, for disc and sphere, only the x component will be used. if set to NONE use the ‘distribution’ attribute for velocityDistribution. | No | . | velocitySpread | vector3 | {'x': 0, 'y': 0, 'z': 0} | Variance for the velocity. | No | . | wiggle | number | 0 | Extra distance the particle moves over its lifetime. | No | . | wiggleSpread | number | 0 | +- spread for the wiggle attribute. | No | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/spe-particles.html#spe-particles-attributes",
    "relUrl": "/content/schemas/message/spe-particles.html#spe-particles-attributes"
  },"881": {
    "doc": "SPE Particles",
    "title": "SPE Particles",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/spe-particles.html",
    "relUrl": "/content/schemas/message/spe-particles.html"
  },"882": {
    "doc": "arena.attributes.spe_particles",
    "title": "\narena.attributes.spe_particles    ",
    "content": "class SpeParticles(arena.attributes.attribute.Attribute): SpeParticles attribute class to manage its properties in the ARENA: GPU based particle systems in A-Frame. More properties at https://github.com/harlyq/aframe-spe-particles-component A-Frame SPE Particles component. Usage: spe_particles=SpeParticles(...) . Parameters . | dict acceleration: For sphere and disc distributions, only the x axis is used. Defaults to '{'x': 0, 'y': 0, 'z': 0}' (optional) | str accelerationDistribution: Distribution of particle acceleration, for disc and sphere, only the x component will be used. if set to NONE use the 'distribution' attribute for accelerationDistribution. Allows [none, box, sphere, disc] Defaults to 'none' (optional) | dict accelerationSpread: Spread of the particle's acceleration. for sphere and disc distributions, only the x axis is used. Defaults to '{'x': 0, 'y': 0, 'z': 0}' (optional) | float activeMultiplier: Multiply the rate of particles emission, if larger than 1 then the particles will be emitted in bursts. note, very large numbers will emit all particles at once. Defaults to '1' (optional) | bool affectedByFog: If true, the particles are affected by THREE js fog. Defaults to 'True' (optional) | float alphaTest: Alpha values below the alphaTest threshold are considered invisible. Defaults to '0' (optional) | list[float] angle: 2D rotation of the particle over the particle's lifetime, max 4 elements. Defaults to '[0]' (optional) | list[float] angleSpread: Spread in angle over the particle's lifetime, max 4 elements. Defaults to '[0]' (optional) | str blending: Blending mode, when drawing particles. Allows [no, normal, additive, subtractive, multiply, custom] Defaults to 'normal' (optional) | list[str] color: Array of colors over the particle's lifetime, max 4 elements. Defaults to '['#fff']' (optional) | list[dict] colorSpread: Spread to apply to colors, spread an array of vec3 (r g b) with 0 for no spread. note the spread will be re-applied through-out the lifetime of the particle. (optional) | bool depthTest: If true, don't render a particle's pixels if something is closer in the depth buffer. Defaults to 'True' (optional) | bool depthWrite: If true, particles write their depth into the depth buffer. this should be false if we use transparent particles. (optional) | str direction: Make the emitter operate forward or backward in time. Allows [forward, backward] Defaults to 'forward' (optional) | str distribution: Distribution for particle positions, velocities and acceleration. will be overridden by specific '...Distribution' attributes. Allows [box, sphere, disc] Defaults to 'box' (optional) | float drag: Apply resistance to moving the particle, 0 is no resistance, 1 is full resistance, particle will stop moving at half of it's maxAge. Defaults to '0' (optional) | float dragSpread: Spread to apply to the drag attribute. Defaults to '0' (optional) | float duration: Duration of the emitter (seconds), if less than 0 then continuously emit particles. Defaults to '-1' (optional) | float emitterScale: Global scaling factor for all particles from the emitter. Defaults to '100' (optional) | bool enableInEditor: Enable the emitter while the editor is active (i.e. while scene is paused). (optional) | bool enabled: Enable/disable the emitter. Defaults to 'True' (optional) | bool frustumCulled: Enable/disable frustum culling. (optional) | bool hasPerspective: If true, particles will be larger the closer they are to the camera. Defaults to 'True' (optional) | float maxAge: Maximum age of a particle before reusing. Defaults to '1' (optional) | float maxAgeSpread: Variance for the 'maxAge' attribute. Defaults to '0' (optional) | list[float] opacity: Opacity over the particle's lifetime, max 4 elements. Defaults to '[1]' (optional) | list[float] opacitySpread: Spread in opacity over the particle's lifetime, max 4 elements. Defaults to '[0]' (optional) | int particleCount: Maximum number of particles for this emitter. Defaults to '100' (optional) | str positionDistribution: Distribution of particle positions, disc and sphere will use the radius attributes. For box particles emit at 0,0,0, for sphere they emit on the surface of the sphere and for disc on the edge of a 2D disc on the XY plane. Allows [none, box, sphere, disc] Defaults to 'none' (optional) | dict positionOffset: Fixed offset to the apply to the emitter relative to its parent entity. Defaults to '{'x': 0, 'y': 0, 'z': 0}' (optional) | dict positionSpread: Particles are positioned within +- of these local bounds. for sphere and disc distributions only the x axis is used. Defaults to '{'x': 0, 'y': 0, 'z': 0}' (optional) | float radius: Radius of the disc or sphere emitter (ignored for box). note radius of 0 will prevent velocity and acceleration if they use a sphere or disc distribution. Defaults to '1' (optional) | dict radiusScale: Scales the emitter for sphere and disc shapes to form oblongs and ellipses. Defaults to '{'x': 1, 'y': 1, 'z': 1}' (optional) | bool randomizeAcceleration: If true, re-randomize acceleration when re-spawning a particle, can incur a performance hit. (optional) | bool randomizeAngle: If true, re-randomize angle when re-spawning a particle, can incur a performance hit. (optional) | bool randomizeColor: If true, re-randomize colour when re-spawning a particle, can incur a performance hit. (optional) | bool randomizeDrag: If true, re-randomize drag when re-spawning a particle, can incur a performance hit. (optional) | bool randomizeOpacity: If true, re-randomize opacity when re-spawning a particle, can incur a performance hit. (optional) | bool randomizePosition: If true, re-randomize position when re-spawning a particle, can incur a performance hit. (optional) | bool randomizeRotation: If true, re-randomize rotation when re-spawning a particle, can incur a performance hit. (optional) | bool randomizeSize: If true, re-randomize size when re-spawning a particle, can incur a performance hit. (optional) | bool randomizeVelocity: If true, re-randomize velocity when re-spawning a particle, can incur a performance hit. (optional) | str relative: World relative particles move relative to the world, while local particles move relative to the emitter (i.e. if the emitter moves, all particles move with it). Allows [local, world] Defaults to 'local' (optional) | float rotation: Rotation in degrees. Defaults to '0' (optional) | dict rotationAxis: Local axis when using rotation. Defaults to '{'x': 0, 'y': 0, 'z': 0}' (optional) | dict rotationAxisSpread: Variance in the axis of rotation. Defaults to '{'x': 0, 'y': 0, 'z': 0}' (optional) | float rotationSpread: Rotation variance in degrees. Defaults to '0' (optional) | bool rotationStatic: If true, the particles are fixed at their initial rotation value. if false, the particle will rotate from 0 to the 'rotation' value. (optional) | list[float] size: Array of sizes over the particle's lifetime, max 4 elements. Defaults to '[1]' (optional) | list[float] sizeSpread: Spread in size over the particle's lifetime, max 4 elements. Defaults to '[0]' (optional) | str texture: Texture to be used for each particle, may be a spritesheet. Examples: [blob.png, fog.png, square.png, explosion_sheet.png, fireworks_sheet.png], like path 'static/images/textures/blob.png'. (optional) | int textureFrameCount: Number of frames in the spritesheet, negative numbers default to textureFrames.x * textureFrames.y. Defaults to '-1' (optional) | int textureFrameLoop: Number of times the spritesheet should be looped over the lifetime of a particle. Defaults to '1' (optional) | dict textureFrames: X and Y frames for a spritesheet. each particle will transition through every frame of the spritesheet over its lifetime (see textureFramesLoop). Defaults to '{'x': 1, 'y': 1}' (optional) | bool useTransparency: Should the particles be rendered with transparency? Defaults to 'True' (optional) | dict velocity: For sphere and disc distributions, only the x axis is used. Defaults to '{'x': 0, 'y': 0, 'z': 0}' (optional) | str velocityDistribution: Distribution of particle velocities, for disc and sphere, only the x component will be used. if set to NONE use the 'distribution' attribute for velocityDistribution. Allows [none, box, sphere, disc] Defaults to 'none' (optional) | dict velocitySpread: Variance for the velocity. Defaults to '{'x': 0, 'y': 0, 'z': 0}' (optional) | float wiggle: Extra distance the particle moves over its lifetime. Defaults to '0' (optional) | float wiggleSpread: +- spread for the wiggle attribute. Defaults to '0' (optional) | . SpeParticles(**kwargs) Inherited Members . arena.base_object.BaseObject add json_encode json class Particles(SpeParticles): Alternate name for SpeParticles. Usage: spe_particles=Particles(...) . Inherited Members . SpeParticles SpeParticles arena.base_object.BaseObject add json_encode json ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/spe_particles.html",
    "relUrl": "/content/python-api/attributes/spe_particles.html"
  },"883": {
    "doc": "arena.attributes.spe_particles",
    "title": "arena.attributes.spe_particles",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/spe_particles.html",
    "relUrl": "/content/python-api/attributes/spe_particles.html"
  },"884": {
    "doc": "Sphere",
    "title": "Sphere",
    "content": "Sphere Geometry. All wire objects have a set of basic attributes {object_id, action, type, persist, data}. The data attribute defines the object-specific attributes . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/sphere.html#sphere",
    "relUrl": "/content/schemas/message/sphere.html#sphere"
  },"885": {
    "doc": "Sphere",
    "title": "Sphere Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | object_id | string |   | A uuid or otherwise unique identifier for this object. | Yes | . | persist | boolean | True | Persist this object in the database. | Yes | . | type | string; Must be: object | 'object' | AFrame 3D Object | Yes | . | action | string; One of: ['create', 'delete', 'update'] | 'create' | Message action create, update, delete. | Yes | . | ttl | integer |   | When applied to an entity, the entity will remove itself from DOM after the specified number of seconds. Update is allowed, which will reset the timer to start from that moment. | No | . | data | Sphere data |   | Sphere Data | Yes | . Sphere Data Attributes . | Attribute | Type | Default | Description | Required | . | object_type | string; Must be: sphere | sphere | 3D object type. | Yes | . | phiLength | number | 360 | phi length | No | . | phiStart | number | 0 | phi start | No | . | radius | number | 1 | radius | Yes | . | segmentsHeight | integer | 18 | segments height | No | . | segmentsWidth | integer | 36 | segments width | No | . | thetaLength | number | 180 | theta length | No | . | thetaStart | number | 0 | theta start | No | . | parent | string |   | Parent’s object_id. Child objects inherit attributes of their parent, for example scale and translation. | No | . | position | position |   | 3D object position. | Yes | . | rotation | rotation |   | 3D object rotation in quaternion representation; Right-handed coordinate system. Euler degrees are deprecated in wire message format. | Yes | . | scale | scale |   | 3D object scale. | No | . | animation | animation |   | Animate and tween values. | No | . | armarker | armarker |   | A location marker (such as an AprilTag, a lightAnchor, or an UWB tag), used to anchor scenes, or scene objects, in the real world. | No | . | click-listener | click-listener |   | Object will listen for mouse events like clicks. | No | . | box-collision-listener | box-collision-listener |   | Listen for bounding-box collisions with user camera and hands. Must be applied to an object or model with geometric mesh. Collisions are determined by course bounding-box overlaps. | No | . | collision-listener | string |   | Name of the collision-listener, default can be empty string. Collisions trigger click events. | No | . | blip | blip |   | When the object is created or deleted, it will animate in/out of the scene instead of appearing/disappearing instantly. Must have a geometric mesh. | No | . | static-body | static-body |   | A fixed-position or animated object. Other objects may collide with static bodies, but static bodies themselves are unaffected by gravity and collisions. | No | . | dynamic-body | dynamic-body |   | A freely-moving object. Dynamic bodies have mass, collide with other objects, bounce or slow during collisions, and fall if gravity is enabled. | No | . | goto-landmark | goto-landmark |   | Teleports user to the landmark with the given name. Requires click-listener. | No | . | goto-url | goto-url |   | Load new URL when object is clicked. Requires click-listener. | No | . | hide-on-enter-ar | boolean; Must be: True | True | Hide object when entering AR. Remove component to not hide. | No | . | hide-on-enter-vr | boolean; Must be: True | True | Hide object when entering VR. Remove component to not hide. | No | . | show-on-enter-ar | boolean; Must be: True | True | Show object when entering AR. Hidden otherwise. | No | . | show-on-enter-vr | boolean; Must be: True | True | Show object when entering VR. Hidden otherwise. | No | . | impulse | impulse |   | Apply an impulse to an object to set it in motion. This happens in conjunction with an event. Requires click-listener and physics. | No | . | landmark | landmark |   | Define entities as a landmark; Landmarks appears in the landmark list and you can move (teleport) to them; You can define the behavior of the teleport: if you will be at a fixed or random distance, looking at the landmark, fixed offset or if it is constrained by a navmesh (when it exists). | No | . | material-extras | material-extras |   | Define extra material properties, namely texture encoding, whether to render the material’s color and render order. | No | . | shadow | shadow |   | The shadow component enables shadows for an entity and its children. Adding the shadow component alone is not enough to display shadows in your scene. We must have at least one light with castShadow: true enabled. | No | . | sound | sound |   | The sound component defines the entity as a source of sound or audio. The sound component can be positional and is thus affected by the component’s position. | No | . | textinput | textinput |   | Opens an HTML prompt when clicked. Sends text input as an event on MQTT. Requires click-listener. | No | . | url | string |   | Use File Store paths under ‘store/users/username’, see CDN and other storage options in the description above. | No | . | remote-render | remote-render |   | Whether or not an object should be remote rendered [Experimental]. | No | . | video-control | video-control |   | Adds a video to an entity and controls its playback. | No | . | attribution | attribution |   | Attribution Component. Saves attribution data in any entity. | No | . | spe-particles | spe-particles |   | GPU based particle systems in A-Frame. | No | . | look-at | string |   | The look-at component defines the behavior for an entity to dynamically rotate or face towards another entity or position. Use ‘#my-camera’ to face the user camera, otherwise can take either a vec3 position or a query selector to another entity. | No | . | buffer | boolean | True | Transform geometry into a BufferGeometry to reduce memory usage at the cost of being harder to manipulate (geometries only: box, circle, cone, …). | No | . | jitsi-video | jitsi-video |   | Apply a jitsi video source to the geometry. | No | . | material | material | {'color': '#7f7f7f'} | The material properties of the object’s surface. | No | . | multisrc | multisrc |   | Define multiple visual sources applied to an object. | No | . | screenshareable | boolean | True | Whether or not a user can screenshare on an object. | No | . | skipCache | boolean | False | Disable retrieving the shared geometry object from the cache. (geometries only: box, circle, cone, …). | No | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/sphere.html#sphere-attributes",
    "relUrl": "/content/schemas/message/sphere.html#sphere-attributes"
  },"886": {
    "doc": "Sphere",
    "title": "Sphere",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/sphere.html",
    "relUrl": "/content/schemas/message/sphere.html"
  },"887": {
    "doc": "arena.objects.sphere",
    "title": "\narena.objects.sphere    ",
    "content": "class Sphere(arena.objects.arena_object.Object): Sphere object class to manage its properties in the ARENA: Sphere Geometry. Parameters . | float phiLength: phi length Defaults to '360' (optional) | float phiStart: phi start (optional) | float radius: radius Defaults to '1' (optional) | int segmentsHeight: segments height Defaults to '18' (optional) | int segmentsWidth: segments width Defaults to '36' (optional) | float thetaLength: theta length Defaults to '180' (optional) | float thetaStart: theta start (optional) | . Sphere(**kwargs) object_type = &#39;sphere&#39; Inherited Members . arena.objects.arena_object.Object type all_objects evt_handler update_handler animations delayed_prop_tasks update_attributes dispatch_animation remove_animation_at_index clear_animations clickable json_preprocess json_postprocess json get add remove exists arena.base_object.BaseObject json_encode ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/sphere.html",
    "relUrl": "/content/python-api/objects/sphere.html"
  },"888": {
    "doc": "arena.objects.sphere",
    "title": "arena.objects.sphere",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/sphere.html",
    "relUrl": "/content/python-api/objects/sphere.html"
  },"889": {
    "doc": "Spot AR",
    "title": "Spot AR",
    "content": "ARENA uses the WebXR Device API to drive it’s Augmented Reality interface, but not all web browsers support it well yet (Safari/Firefox) on mobile devices. To accommodate Safari and Firefox until they fully support the WebXR Device API, we implemented a simple form of computer vision (CV) for AprilTags that uses the fixed position of the user’s camera called Spot AR. In Spot AR, the device does not yet have access to the accelerometer data usually supplied to the WebXR Device API to account for device drift, so we ask users to stay within the standing position they scan from. To test Spot AR: . | Scan the QR Code below with your smartphone camera. | Visit the scene link from the QR code scan in your phone web browser. | Keep your phone camera pointed toward the AprilTag. | . The QR Code should link to this ARENA scene URL using several of our URL parameters: . | https://arenaxr.org/poster?armode=1&amp;auth=anonymous&amp;camUpdateIntervalMs=16&amp;skipav=1 | . You can also print and scan our ARENA poster for your wall, which visits the same link. ",
    "url": "https://docs.arenaxr.org/content/xr/spotar.html",
    "relUrl": "/content/xr/spotar.html"
  },"890": {
    "doc": "Physics Static Body",
    "title": "Physics Static Body",
    "content": "A fixed-position or animated object. Other objects may collide with static bodies, but static bodies themselves are unaffected by gravity and collisions. More properties at A-Frame Physics System. ",
    "url": "https://docs.arenaxr.org/content/schemas/message/static-body.html#physics-static-body",
    "relUrl": "/content/schemas/message/static-body.html#physics-static-body"
  },"891": {
    "doc": "Physics Static Body",
    "title": "Physics Static Body Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | shape | string; One of: ['auto', 'box', 'cylinder', 'sphere', 'hull', 'none'] | 'auto' | Body components will attempt to find an appropriate CANNON.js shape to fit your model. When defining an object you may choose a shape or leave the default, auto. Select a shape carefully, as there are performance implications with different choices. | No | . | cylinderAxis | string; One of: ['x', 'y', 'z'] | 'y' | Override default axis of bounding cylinder. Requires shape:cylinder. | No | . | sphereRadius | number |   | Override default radius of bounding sphere. Requires shape:sphere. NaN by default. | No | . | type | string; One of: ['dynamic', 'static'] | 'static' | Define the result of collisions. Dynamic can be moved, Static cannot be moved. | No | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/static-body.html#physics-static-body-attributes",
    "relUrl": "/content/schemas/message/static-body.html#physics-static-body-attributes"
  },"892": {
    "doc": "Physics Static Body",
    "title": "Physics Static Body",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/static-body.html",
    "relUrl": "/content/schemas/message/static-body.html"
  },"893": {
    "doc": "arena.attributes.static_body",
    "title": "\narena.attributes.static_body    ",
    "content": "class StaticBody(arena.attributes.attribute.Attribute): StaticBody attribute class to manage its properties in the ARENA: A fixed-position or animated object. Other objects may collide with static bodies, but static bodies themselves are unaffected by gravity and collisions. More properties at https://github.com/c-frame/aframe-physics-system/blob/master/CannonDriver.md A-Frame Physics System. Usage: static_body=StaticBody(...) . Parameters . | str cylinderAxis: Override default axis of bounding cylinder. Requires shape: cylinder. Allows [x, y, z] Defaults to 'y' (optional) | str shape: Body components will attempt to find an appropriate CANNON.js shape to fit your model. When defining an object you may choose a shape or leave the default, auto. Select a shape carefully, as there are performance implications with different choices. Allows [auto, box, cylinder, sphere, hull, none] Defaults to 'auto' (optional) | float sphereRadius: Override default radius of bounding sphere. Requires shape: sphere. NaN by default. (optional) | str type: Define the result of collisions. Dynamic can be moved, Static cannot be moved. Allows [dynamic, static] Defaults to 'static' (optional) | . StaticBody(**kwargs) Inherited Members . arena.base_object.BaseObject add json_encode json ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/static_body.html",
    "relUrl": "/content/python-api/attributes/static_body.html"
  },"894": {
    "doc": "arena.attributes.static_body",
    "title": "arena.attributes.static_body",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/static_body.html",
    "relUrl": "/content/python-api/attributes/static_body.html"
  },"895": {
    "doc": "Tasks",
    "title": "Tasks in arena-py",
    "content": "Tasks are ways you can run programs in the ARENA. You can think of tasks like threads. In fact, they behave a bit like Python threads, but unlike threads, arena-py tasks are all run in a single event loop. ",
    "url": "https://docs.arenaxr.org/content/python/tasks.html#tasks-in-arena-py",
    "relUrl": "/content/python/tasks.html#tasks-in-arena-py"
  },"896": {
    "doc": "Tasks",
    "title": "Run Tasks/Start Event Loop",
    "content": "scene.run_tasks() . ",
    "url": "https://docs.arenaxr.org/content/python/tasks.html#run-tasksstart-event-loop",
    "relUrl": "/content/python/tasks.html#run-tasksstart-event-loop"
  },"897": {
    "doc": "Tasks",
    "title": "Stop Running Tasks/Stop Event Loop",
    "content": "scene.stop_tasks() . ",
    "url": "https://docs.arenaxr.org/content/python/tasks.html#stop-running-tasksstop-event-loop",
    "relUrl": "/content/python/tasks.html#stop-running-tasksstop-event-loop"
  },"898": {
    "doc": "Tasks",
    "title": "Tasks",
    "content": "You can run a task once at startup: . @scene.run_once def f(): print(\"here on startup\") # or do this: scene.run_once(f) . You can run a task after a specified period of time (after [interval_ms] milliseconds): . @scene.run_after_interval(interval_ms=1000) def f(): print(\"here, but after 1 second\") # or do this: scene.run_after_interval(f, 1000) . You can run a task every [interval_ms] milliseconds: . @scene.run_forever(interval_ms=10000) def f(): print(\"here, but after 10 seconds\") # or do this: scene.run_forever(f, 10000) . You can run an async task (for advanced users who want to use asyncio to have more control over what their tasks are doing): . @scene.run_async def f(): print(\"here\") await scene.sleep(5000) # must use scene.sleep or asyncio.sleep. DO NOT use time.sleep! print(\"here, but after 5 seconds\") # or do this: scene.run_async(f, 1000) . ",
    "url": "https://docs.arenaxr.org/content/python/tasks.html",
    "relUrl": "/content/python/tasks.html"
  },"899": {
    "doc": "Tasks",
    "title": "Sharing global variables",
    "content": "Like with threads, global variables in arena-py must be used with the “global” keyword. Note: If global variables are pointing to something allocated in memory (like a class or list), “global” may not be needed, but it’s always best to use “global” just to be safe. x = 0 @scene.run_once def main(): global x # note the use of \"global\" x += 1 print(x) @scene.run_after_interval(interval_ms=1000) def hello(): global x # note the use of \"global\" x += 1 print(x) # below might not work as intended @scene.run_after_interval(interval_ms=2000) def hello1(): # note the lack of \"global\" x += 1 print(x) . ",
    "url": "https://docs.arenaxr.org/content/python/tasks.html#sharing-global-variables",
    "relUrl": "/content/python/tasks.html#sharing-global-variables"
  },"900": {
    "doc": "Tasks",
    "title": "Arguments",
    "content": "You can add arguments to tasks like so: . @scene.run_once(text=\"arena-py 2.0!\", parent=\"sphere\") def make_text(text, parent): text_obj = Text(value=text, position=(0,1.5,0), parent=parent) scene.add_object(text_obj) # scene.run_once(make_text, text=\"arena-py 2.0!\", parent=\"sphere\") # also works . objs = [] @scene.run_forever(interval_ms=1234, objs=objs) def forever(objs): for o in objs: print(o) # scene.run_forever(forever, 1234, objs=objs) # also works . ",
    "url": "https://docs.arenaxr.org/content/python/tasks.html#arguments",
    "relUrl": "/content/python/tasks.html#arguments"
  },"901": {
    "doc": "arena.objects.tetrahedron",
    "title": "\narena.objects.tetrahedron    ",
    "content": "class Tetrahedron(arena.objects.arena_object.Object): Tetrahedron object class to manage its properties in the ARENA: Tetrahedron Geometry. Parameters . | int detail: detail (optional) | float radius: radius Defaults to '1' (optional) | . Tetrahedron(**kwargs) object_type = &#39;tetrahedron&#39; Inherited Members . arena.objects.arena_object.Object type all_objects evt_handler update_handler animations delayed_prop_tasks update_attributes dispatch_animation remove_animation_at_index clear_animations clickable json_preprocess json_postprocess json get add remove exists arena.base_object.BaseObject json_encode ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/tetrahedron.html",
    "relUrl": "/content/python-api/objects/tetrahedron.html"
  },"902": {
    "doc": "arena.objects.tetrahedron",
    "title": "arena.objects.tetrahedron",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/tetrahedron.html",
    "relUrl": "/content/python-api/objects/tetrahedron.html"
  },"903": {
    "doc": "Tetrahedron",
    "title": "Tetrahedron",
    "content": "Tetrahedron Geometry. All wire objects have a set of basic attributes {object_id, action, type, persist, data}. The data attribute defines the object-specific attributes . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/tetrahedron.html#tetrahedron",
    "relUrl": "/content/schemas/message/tetrahedron.html#tetrahedron"
  },"904": {
    "doc": "Tetrahedron",
    "title": "Tetrahedron Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | object_id | string |   | A uuid or otherwise unique identifier for this object. | Yes | . | persist | boolean | True | Persist this object in the database. | Yes | . | type | string; Must be: object | 'object' | AFrame 3D Object | Yes | . | action | string; One of: ['create', 'delete', 'update'] | 'create' | Message action create, update, delete. | Yes | . | ttl | integer |   | When applied to an entity, the entity will remove itself from DOM after the specified number of seconds. Update is allowed, which will reset the timer to start from that moment. | No | . | data | Tetrahedron data |   | Tetrahedron Data | Yes | . Tetrahedron Data Attributes . | Attribute | Type | Default | Description | Required | . | object_type | string; Must be: tetrahedron | tetrahedron | 3D object type. | Yes | . | detail | integer | 0 | detail | No | . | radius | number | 1 | radius | Yes | . | parent | string |   | Parent’s object_id. Child objects inherit attributes of their parent, for example scale and translation. | No | . | position | position |   | 3D object position. | Yes | . | rotation | rotation |   | 3D object rotation in quaternion representation; Right-handed coordinate system. Euler degrees are deprecated in wire message format. | Yes | . | scale | scale |   | 3D object scale. | No | . | animation | animation |   | Animate and tween values. | No | . | armarker | armarker |   | A location marker (such as an AprilTag, a lightAnchor, or an UWB tag), used to anchor scenes, or scene objects, in the real world. | No | . | click-listener | click-listener |   | Object will listen for mouse events like clicks. | No | . | box-collision-listener | box-collision-listener |   | Listen for bounding-box collisions with user camera and hands. Must be applied to an object or model with geometric mesh. Collisions are determined by course bounding-box overlaps. | No | . | collision-listener | string |   | Name of the collision-listener, default can be empty string. Collisions trigger click events. | No | . | blip | blip |   | When the object is created or deleted, it will animate in/out of the scene instead of appearing/disappearing instantly. Must have a geometric mesh. | No | . | static-body | static-body |   | A fixed-position or animated object. Other objects may collide with static bodies, but static bodies themselves are unaffected by gravity and collisions. | No | . | dynamic-body | dynamic-body |   | A freely-moving object. Dynamic bodies have mass, collide with other objects, bounce or slow during collisions, and fall if gravity is enabled. | No | . | goto-landmark | goto-landmark |   | Teleports user to the landmark with the given name. Requires click-listener. | No | . | goto-url | goto-url |   | Load new URL when object is clicked. Requires click-listener. | No | . | hide-on-enter-ar | boolean; Must be: True | True | Hide object when entering AR. Remove component to not hide. | No | . | hide-on-enter-vr | boolean; Must be: True | True | Hide object when entering VR. Remove component to not hide. | No | . | show-on-enter-ar | boolean; Must be: True | True | Show object when entering AR. Hidden otherwise. | No | . | show-on-enter-vr | boolean; Must be: True | True | Show object when entering VR. Hidden otherwise. | No | . | impulse | impulse |   | Apply an impulse to an object to set it in motion. This happens in conjunction with an event. Requires click-listener and physics. | No | . | landmark | landmark |   | Define entities as a landmark; Landmarks appears in the landmark list and you can move (teleport) to them; You can define the behavior of the teleport: if you will be at a fixed or random distance, looking at the landmark, fixed offset or if it is constrained by a navmesh (when it exists). | No | . | material-extras | material-extras |   | Define extra material properties, namely texture encoding, whether to render the material’s color and render order. | No | . | shadow | shadow |   | The shadow component enables shadows for an entity and its children. Adding the shadow component alone is not enough to display shadows in your scene. We must have at least one light with castShadow: true enabled. | No | . | sound | sound |   | The sound component defines the entity as a source of sound or audio. The sound component can be positional and is thus affected by the component’s position. | No | . | textinput | textinput |   | Opens an HTML prompt when clicked. Sends text input as an event on MQTT. Requires click-listener. | No | . | url | string |   | Use File Store paths under ‘store/users/username’, see CDN and other storage options in the description above. | No | . | remote-render | remote-render |   | Whether or not an object should be remote rendered [Experimental]. | No | . | video-control | video-control |   | Adds a video to an entity and controls its playback. | No | . | attribution | attribution |   | Attribution Component. Saves attribution data in any entity. | No | . | spe-particles | spe-particles |   | GPU based particle systems in A-Frame. | No | . | look-at | string |   | The look-at component defines the behavior for an entity to dynamically rotate or face towards another entity or position. Use ‘#my-camera’ to face the user camera, otherwise can take either a vec3 position or a query selector to another entity. | No | . | buffer | boolean | True | Transform geometry into a BufferGeometry to reduce memory usage at the cost of being harder to manipulate (geometries only: box, circle, cone, …). | No | . | jitsi-video | jitsi-video |   | Apply a jitsi video source to the geometry. | No | . | material | material | {'color': '#7f7f7f'} | The material properties of the object’s surface. | No | . | multisrc | multisrc |   | Define multiple visual sources applied to an object. | No | . | screenshareable | boolean | True | Whether or not a user can screenshare on an object. | No | . | skipCache | boolean | False | Disable retrieving the shared geometry object from the cache. (geometries only: box, circle, cone, …). | No | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/tetrahedron.html#tetrahedron-attributes",
    "relUrl": "/content/schemas/message/tetrahedron.html#tetrahedron-attributes"
  },"905": {
    "doc": "Tetrahedron",
    "title": "Tetrahedron",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/tetrahedron.html",
    "relUrl": "/content/schemas/message/tetrahedron.html"
  },"906": {
    "doc": "Text",
    "title": "Text",
    "content": "Display text. More properties at A-Frame Text. All wire objects have a set of basic attributes {object_id, action, type, persist, data}. The data attribute defines the object-specific attributes . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/text.html#text",
    "relUrl": "/content/schemas/message/text.html#text"
  },"907": {
    "doc": "Text",
    "title": "Text Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | object_id | string |   | A uuid or otherwise unique identifier for this object. | Yes | . | persist | boolean | True | Persist this object in the database. | Yes | . | type | string; Must be: object | 'object' | AFrame 3D Object | Yes | . | action | string; One of: ['create', 'delete', 'update'] | 'create' | Message action create, update, delete. | Yes | . | ttl | integer |   | When applied to an entity, the entity will remove itself from DOM after the specified number of seconds. Update is allowed, which will reset the timer to start from that moment. | No | . | data | Text data |   | Text Data | Yes | . Text Data Attributes . | Attribute | Type | Default | Description | Required | . | object_type | string; Must be: text | text | 3D object type. | Yes | . | align | string; One of: ['left', 'center', 'right'] | 'left' | Multi-line text alignment. | No | . | alphaTest | number | 0.5 | Discard text pixels if alpha is less than this value. | No | . | anchor | string; One of: ['left', 'right', 'center', 'align'] | 'center' | Horizontal positioning. | No | . | baseline | string; One of: ['top', 'center', 'bottom'] | 'center' | Vertical positioning. | No | . | color | string | '#000000' | Text color. | Yes | . | font | string; One of: ['aileronsemibold', 'dejavu', 'exo2bold', 'exo2semibold', 'kelsonsans', 'monoid', 'mozillavr', 'roboto', 'sourcecodepro'] | 'roboto' | Font to render text, either the name of one of A-Frame’s stock fonts or a URL to a font file. | Yes | . | fontImage | string |   | Font image texture path to render text. Defaults to the font’s name with extension replaced to .png. Don’t need to specify if using a stock font. (derived from font name). | No | . | height | number |   | Height of text block. (derived from text size). | No | . | letterSpacing | number | 0 | Letter spacing in pixels. | No | . | lineHeight | number |   | Line height in pixels. (derived from font file). | No | . | opacity | number | 1 | Opacity, on a scale from 0 to 1, where 0 means fully transparent and 1 means fully opaque. | No | . | shader | string; One of: ['portal', 'flat', 'standard', 'sdf', 'msdf', 'ios10hls', 'skyshader', 'gradientshader'] | 'sdf' | Shader used to render text. | No | . | side | string; One of: ['front', 'back', 'double'] | 'double' | Side to render. | Yes | . | tabSize | number | 4 | Tab size in spaces. | No | . | transparent | boolean | True | Whether text is transparent. | No | . | value | string |   | The actual content of the text. Line breaks and tabs are supported with \\n and \\t. | Yes | . | whiteSpace | string; One of: ['normal', 'pre', 'nowrap'] | 'normal' | How whitespace should be handled. | No | . | width | number | 5 | Width in meters. (derived from geometry if exists). | No | . | wrapCount | number | 40 | Number of characters before wrapping text (more or less). | No | . | wrapPixels | number |   | Number of pixels before wrapping text. (derived from wrapCount). | No | . | xOffset | number | 0 | X-offset to apply to add padding. | No | . | zOffset | number | 0.001 | Z-offset to apply to avoid Z-fighting if using with a geometry as a background. | No | . | parent | string |   | Parent’s object_id. Child objects inherit attributes of their parent, for example scale and translation. | No | . | position | position |   | 3D object position. | Yes | . | rotation | rotation |   | 3D object rotation in quaternion representation; Right-handed coordinate system. Euler degrees are deprecated in wire message format. | Yes | . | scale | scale |   | 3D object scale. | No | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/text.html#text-attributes",
    "relUrl": "/content/schemas/message/text.html#text-attributes"
  },"908": {
    "doc": "Text",
    "title": "Text",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/text.html",
    "relUrl": "/content/schemas/message/text.html"
  },"909": {
    "doc": "arena.objects.text",
    "title": "\narena.objects.text    ",
    "content": "class Text(arena.objects.arena_object.Object): Text object class to manage its properties in the ARENA: Display text. More properties at https://aframe.io/docs/1.5.0/components/text.html A-Frame Text. Parameters . | str align: Multi-line text alignment. Allows [left, center, right] Defaults to 'left' (optional) | float alphaTest: Discard text pixels if alpha is less than this value. Defaults to '0.5' (optional) | str anchor: Horizontal positioning. Allows [left, right, center, align] Defaults to 'center' (optional) | str baseline: Vertical positioning. Allows [top, center, bottom] Defaults to 'center' (optional) | str color: Text color. Defaults to '#000000' (optional) | str font: Font to render text, either the name of one of A-Frame's stock fonts or a URL to a font file. Allows [aileronsemibold, dejavu, exo2bold, exo2semibold, kelsonsans, monoid, mozillavr, roboto, sourcecodepro] Defaults to 'roboto' (optional) | str fontImage: Font image texture path to render text. Defaults to the font's name with extension replaced to .png. Don't need to specify if using a stock font. (derived from font name). (optional) | float height: Height of text block. (derived from text size). (optional) | float letterSpacing: Letter spacing in pixels. (optional) | float lineHeight: Line height in pixels. (derived from font file). (optional) | float opacity: Opacity, on a scale from 0 to 1, where 0 means fully transparent and 1 means fully opaque. Defaults to '1' (optional) | str shader: Shader used to render text. Allows [portal, flat, standard, sdf, msdf, ios10hls, skyshader, gradientshader] Defaults to 'sdf' (optional) | str side: Side to render. Allows [front, back, double] Defaults to 'double' (optional) | float tabSize: Tab size in spaces. Defaults to '4' (optional) | bool transparent: Whether text is transparent. Defaults to 'True' (optional) | str value: The actual content of the text. Line breaks and tabs are supported with \\n and \\t. (optional) | str whiteSpace: How whitespace should be handled. Allows [normal, pre, nowrap] Defaults to 'normal' (optional) | float width: Width in meters. (derived from geometry if exists). Defaults to '5' (optional) | float wrapCount: Number of characters before wrapping text (more or less). Defaults to '40' (optional) | float wrapPixels: Number of pixels before wrapping text. (derived from wrapCount). (optional) | float xOffset: X-offset to apply to add padding. (optional) | float zOffset: Z-offset to apply to avoid Z-fighting if using with a geometry as a background. Defaults to '0.001' (optional) | . Text(**kwargs) object_type = &#39;text&#39; Inherited Members . arena.objects.arena_object.Object type all_objects evt_handler update_handler animations delayed_prop_tasks update_attributes dispatch_animation remove_animation_at_index clear_animations clickable json_preprocess json_postprocess json get add remove exists arena.base_object.BaseObject json_encode ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/text.html",
    "relUrl": "/content/python-api/objects/text.html"
  },"910": {
    "doc": "arena.objects.text",
    "title": "arena.objects.text",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/text.html",
    "relUrl": "/content/python-api/objects/text.html"
  },"911": {
    "doc": "arena.attributes.textinput",
    "title": "\narena.attributes.textinput    ",
    "content": "class Textinput(arena.attributes.attribute.Attribute): Textinput attribute class to manage its properties in the ARENA: Opens an HTML prompt when clicked. Sends text input as an event on MQTT. Requires click-listener. Usage: textinput=Textinput(...) . Parameters . | str label: Text prompt label Defaults to 'Input text below (max is 140 characters).' (optional) | str on: A case-sensitive string representing the event type to listen for. See &lt;https: //developer.mozilla.org/en-US/docs/Web/Events&gt; Web Events Allows [mousedown, mouseup, mouseenter, mouseleave, triggerdown, triggerup, gripdown, gripup, menudown, menuup, systemdown, systemup, trackpaddown, trackpadup] Defaults to 'mousedown' (optional) | str placeholder: Text input place holder. Defaults to 'Type here' (optional) | str title: The prompt title. Defaults to 'Text Input' (optional) | . Textinput( title=&#39;Text Input&#39;, label=&#39;Input text below (max is 140 characters)&#39;, placeholder=&#39;Type here&#39;, on=&#39;mousedown&#39;, **kwargs) Inherited Members . arena.base_object.BaseObject add json_encode json class TextInput(Textinput): Alternate name for Textinput. Usage: textinput=TextInput(...) . Inherited Members . Textinput Textinput arena.base_object.BaseObject add json_encode json ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/textinput.html",
    "relUrl": "/content/python-api/attributes/textinput.html"
  },"912": {
    "doc": "arena.attributes.textinput",
    "title": "arena.attributes.textinput",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/textinput.html",
    "relUrl": "/content/python-api/attributes/textinput.html"
  },"913": {
    "doc": "Text Input",
    "title": "Text Input",
    "content": "Opens an HTML prompt when clicked. Sends text input as an event on MQTT. Requires click-listener. ",
    "url": "https://docs.arenaxr.org/content/schemas/message/textinput.html#text-input",
    "relUrl": "/content/schemas/message/textinput.html#text-input"
  },"914": {
    "doc": "Text Input",
    "title": "Text Input Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | on | string; One of: ['mousedown', 'mouseup', 'mouseenter', 'mouseleave', 'triggerdown', 'triggerup', 'gripdown', 'gripup', 'menudown', 'menuup', 'systemdown', 'systemup', 'trackpaddown', 'trackpadup'] | 'mousedown' | A case-sensitive string representing the event type to listen for. See Web Events | Yes | . | title | string | 'Text Input' | The prompt title. | Yes | . | label | string | 'Input text below (max is 140 characters).' | Text prompt label | Yes | . | placeholder | string | 'Type here' | Text input place holder. | Yes | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/textinput.html#text-input-attributes",
    "relUrl": "/content/schemas/message/textinput.html#text-input-attributes"
  },"915": {
    "doc": "Text Input",
    "title": "Text Input",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/textinput.html",
    "relUrl": "/content/schemas/message/textinput.html"
  },"916": {
    "doc": "Thickline",
    "title": "Thickline",
    "content": "Draw a line that can have a custom width. All wire objects have a set of basic attributes {object_id, action, type, persist, data}. The data attribute defines the object-specific attributes . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/thickline.html#thickline",
    "relUrl": "/content/schemas/message/thickline.html#thickline"
  },"917": {
    "doc": "Thickline",
    "title": "Thickline Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | object_id | string |   | A uuid or otherwise unique identifier for this object. | Yes | . | persist | boolean | True | Persist this object in the database. | Yes | . | type | string; Must be: object | 'object' | AFrame 3D Object | Yes | . | action | string; One of: ['create', 'delete', 'update'] | 'create' | Message action create, update, delete. | Yes | . | ttl | integer |   | When applied to an entity, the entity will remove itself from DOM after the specified number of seconds. Update is allowed, which will reset the timer to start from that moment. | No | . | data | Thickline data |   | Thickline Data | Yes | . Thickline Data Attributes . | Attribute | Type | Default | Description | Required | . | object_type | string; Must be: thickline | thickline | 3D object type. | Yes | . | color | string | '#000000' | Line color. | Yes | . | lineWidth | number | 1 | Width of line in px. | Yes | . | lineWidthStyler | string; One of: ['default', 'grow', 'shrink', 'center-sharp', 'center-smooth', 'sine-wave'] | 'default' | Allows defining the line width as a function of relative position p along the path of the line. By default it is set to a constant 1. You may also choose one of the preset functions. | Yes | . | path | string | '-2 -1 0, 0 20 0, 10 -1 10' | Comma-separated list of x y z coordinates of the line vertices. | Yes | . | parent | string |   | Parent’s object_id. Child objects inherit attributes of their parent, for example scale and translation. | No | . | position | position |   | 3D object position. | No | . | rotation | rotation |   | 3D object rotation in quaternion representation; Right-handed coordinate system. Euler degrees are deprecated in wire message format. | No | . | scale | scale |   | 3D object scale. | No | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/thickline.html#thickline-attributes",
    "relUrl": "/content/schemas/message/thickline.html#thickline-attributes"
  },"918": {
    "doc": "Thickline",
    "title": "Thickline",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/thickline.html",
    "relUrl": "/content/schemas/message/thickline.html"
  },"919": {
    "doc": "arena.objects.thickline",
    "title": "\narena.objects.thickline    ",
    "content": "class Thickline(arena.objects.arena_object.Object): Thickline object class to manage its properties in the ARENA: Draw a line that can have a custom width. Parameters . | str color: Line color. Defaults to '#000000' (optional) | float lineWidth: Width of line in px. Defaults to '1' (optional) | str lineWidthStyler: Allows defining the line width as a function of relative position p along the path of the line. By default it is set to a constant 1. You may also choose one of the preset functions. Allows [default, grow, shrink, center-sharp, center-smooth, sine-wave] Defaults to 'default' (optional) | str path: Comma-separated list of x y z coordinates of the line vertices. Defaults to '-2 -1 0, 0 20 0, 10 -1 10' (optional) | . Thickline(path=None, lineWidth=1, **kwargs) object_type = &#39;thickline&#39; Inherited Members . arena.objects.arena_object.Object type all_objects evt_handler update_handler animations delayed_prop_tasks update_attributes dispatch_animation remove_animation_at_index clear_animations clickable json_preprocess json_postprocess json get add remove exists arena.base_object.BaseObject json_encode class ThickLine(Thickline): Alternate name for Thickline. Inherited Members . Thickline Thickline object_type arena.objects.arena_object.Object type all_objects evt_handler update_handler animations delayed_prop_tasks update_attributes dispatch_animation remove_animation_at_index clear_animations clickable json_preprocess json_postprocess json get add remove exists arena.base_object.BaseObject json_encode ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/thickline.html",
    "relUrl": "/content/python-api/objects/thickline.html"
  },"920": {
    "doc": "arena.objects.thickline",
    "title": "arena.objects.thickline",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/thickline.html",
    "relUrl": "/content/python-api/objects/thickline.html"
  },"921": {
    "doc": "Three.js Scene",
    "title": "Three.js Scene",
    "content": "Load a Three.js Scene. Could be THREE.js version-specific; you can see the THREE.js version in the JS console once you open ARENA; using glTF is preferred. Format: THREE.js Scene. See guidance to store paths under ARENA File Store, CDN, or DropBox. All wire objects have a set of basic attributes {object_id, action, type, persist, data}. The data attribute defines the object-specific attributes . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/threejs-scene.html#threejs-scene",
    "relUrl": "/content/schemas/message/threejs-scene.html#threejs-scene"
  },"922": {
    "doc": "Three.js Scene",
    "title": "Three.js Scene Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | object_id | string |   | A uuid or otherwise unique identifier for this object. | Yes | . | persist | boolean | True | Persist this object in the database. | Yes | . | type | string; Must be: object | 'object' | AFrame 3D Object | Yes | . | action | string; One of: ['create', 'delete', 'update'] | 'create' | Message action create, update, delete. | Yes | . | ttl | integer |   | When applied to an entity, the entity will remove itself from DOM after the specified number of seconds. Update is allowed, which will reset the timer to start from that moment. | No | . | data | Three.js Scene data |   | Three.js Scene Data | Yes | . Three.js Scene Data Attributes . | Attribute | Type | Default | Description | Required | . | object_type | string; Must be: threejs-scene | threejs-scene | 3D object type. | Yes | . | url | string |   | Use File Store paths under ‘store/users/username’, see CDN and other storage options in the description above. | Yes | . | parent | string |   | Parent’s object_id. Child objects inherit attributes of their parent, for example scale and translation. | No | . | position | position |   | 3D object position. | Yes | . | rotation | rotation |   | 3D object rotation in quaternion representation; Right-handed coordinate system. Euler degrees are deprecated in wire message format. | Yes | . | scale | scale |   | 3D object scale. | Yes | . | animation | animation |   | Animate and tween values. | No | . | armarker | armarker |   | A location marker (such as an AprilTag, a lightAnchor, or an UWB tag), used to anchor scenes, or scene objects, in the real world. | No | . | click-listener | click-listener |   | Object will listen for mouse events like clicks. | No | . | box-collision-listener | box-collision-listener |   | Listen for bounding-box collisions with user camera and hands. Must be applied to an object or model with geometric mesh. Collisions are determined by course bounding-box overlaps. | No | . | collision-listener | string |   | Name of the collision-listener, default can be empty string. Collisions trigger click events. | No | . | blip | blip |   | When the object is created or deleted, it will animate in/out of the scene instead of appearing/disappearing instantly. Must have a geometric mesh. | No | . | static-body | static-body |   | A fixed-position or animated object. Other objects may collide with static bodies, but static bodies themselves are unaffected by gravity and collisions. | No | . | dynamic-body | dynamic-body |   | A freely-moving object. Dynamic bodies have mass, collide with other objects, bounce or slow during collisions, and fall if gravity is enabled. | No | . | goto-landmark | goto-landmark |   | Teleports user to the landmark with the given name. Requires click-listener. | No | . | goto-url | goto-url |   | Load new URL when object is clicked. Requires click-listener. | No | . | hide-on-enter-ar | boolean; Must be: True | True | Hide object when entering AR. Remove component to not hide. | No | . | hide-on-enter-vr | boolean; Must be: True | True | Hide object when entering VR. Remove component to not hide. | No | . | show-on-enter-ar | boolean; Must be: True | True | Show object when entering AR. Hidden otherwise. | No | . | show-on-enter-vr | boolean; Must be: True | True | Show object when entering VR. Hidden otherwise. | No | . | impulse | impulse |   | Apply an impulse to an object to set it in motion. This happens in conjunction with an event. Requires click-listener and physics. | No | . | landmark | landmark |   | Define entities as a landmark; Landmarks appears in the landmark list and you can move (teleport) to them; You can define the behavior of the teleport: if you will be at a fixed or random distance, looking at the landmark, fixed offset or if it is constrained by a navmesh (when it exists). | No | . | material-extras | material-extras |   | Define extra material properties, namely texture encoding, whether to render the material’s color and render order. | No | . | shadow | shadow |   | The shadow component enables shadows for an entity and its children. Adding the shadow component alone is not enough to display shadows in your scene. We must have at least one light with castShadow: true enabled. | No | . | sound | sound |   | The sound component defines the entity as a source of sound or audio. The sound component can be positional and is thus affected by the component’s position. | No | . | textinput | textinput |   | Opens an HTML prompt when clicked. Sends text input as an event on MQTT. Requires click-listener. | No | . | remote-render | remote-render |   | Whether or not an object should be remote rendered [Experimental]. | No | . | video-control | video-control |   | Adds a video to an entity and controls its playback. | No | . | attribution | attribution |   | Attribution Component. Saves attribution data in any entity. | No | . | spe-particles | spe-particles |   | GPU based particle systems in A-Frame. | No | . | look-at | string |   | The look-at component defines the behavior for an entity to dynamically rotate or face towards another entity or position. Use ‘#my-camera’ to face the user camera, otherwise can take either a vec3 position or a query selector to another entity. | No | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/threejs-scene.html#threejs-scene-attributes",
    "relUrl": "/content/schemas/message/threejs-scene.html#threejs-scene-attributes"
  },"923": {
    "doc": "Three.js Scene",
    "title": "Three.js Scene",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/threejs-scene.html",
    "relUrl": "/content/schemas/message/threejs-scene.html"
  },"924": {
    "doc": "arena.objects.threejs_scene",
    "title": "\narena.objects.threejs_scene    ",
    "content": "class ThreejsScene(arena.objects.arena_object.Object): ThreejsScene object class to manage its properties in the ARENA: Load a Three.js Scene. Could be THREE.js version-specific; you can see the THREE.js version in the JS console once you open ARENA; using glTF is preferred. Format: https://threejs.org/docs/#api/en/scenes/Scene THREE.js Scene. See guidance to store paths under https://docs.arenaxr.org/content/interface/filestore.html ARENA File Store, CDN, or DropBox. Parameters . | str url: Use File Store paths under 'store/users/username', see CDN and other storage options in the description above. (optional) | . ThreejsScene(**kwargs) object_type = &#39;threejs-scene&#39; Inherited Members . arena.objects.arena_object.Object type all_objects evt_handler update_handler animations delayed_prop_tasks update_attributes dispatch_animation remove_animation_at_index clear_animations clickable json_preprocess json_postprocess json get add remove exists arena.base_object.BaseObject json_encode ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/threejs_scene.html",
    "relUrl": "/content/python-api/objects/threejs_scene.html"
  },"925": {
    "doc": "arena.objects.threejs_scene",
    "title": "arena.objects.threejs_scene",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/threejs_scene.html",
    "relUrl": "/content/python-api/objects/threejs_scene.html"
  },"926": {
    "doc": "Torus",
    "title": "Torus",
    "content": "Torus Geometry. All wire objects have a set of basic attributes {object_id, action, type, persist, data}. The data attribute defines the object-specific attributes . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/torus.html#torus",
    "relUrl": "/content/schemas/message/torus.html#torus"
  },"927": {
    "doc": "Torus",
    "title": "Torus Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | object_id | string |   | A uuid or otherwise unique identifier for this object. | Yes | . | persist | boolean | True | Persist this object in the database. | Yes | . | type | string; Must be: object | 'object' | AFrame 3D Object | Yes | . | action | string; One of: ['create', 'delete', 'update'] | 'create' | Message action create, update, delete. | Yes | . | ttl | integer |   | When applied to an entity, the entity will remove itself from DOM after the specified number of seconds. Update is allowed, which will reset the timer to start from that moment. | No | . | data | Torus data |   | Torus Data | Yes | . Torus Data Attributes . | Attribute | Type | Default | Description | Required | . | object_type | string; Must be: torus | torus | 3D object type. | Yes | . | arc | number | 360 | Arc | No | . | radius | number | 1 | radius | Yes | . | radiusTubular | number | 0.2 | radius tubular | Yes | . | segmentsRadial | integer | 36 | segments radial | No | . | segmentsTubular | integer | 32 | segments tubular | No | . | parent | string |   | Parent’s object_id. Child objects inherit attributes of their parent, for example scale and translation. | No | . | position | position |   | 3D object position. | Yes | . | rotation | rotation |   | 3D object rotation in quaternion representation; Right-handed coordinate system. Euler degrees are deprecated in wire message format. | Yes | . | scale | scale |   | 3D object scale. | No | . | animation | animation |   | Animate and tween values. | No | . | armarker | armarker |   | A location marker (such as an AprilTag, a lightAnchor, or an UWB tag), used to anchor scenes, or scene objects, in the real world. | No | . | click-listener | click-listener |   | Object will listen for mouse events like clicks. | No | . | box-collision-listener | box-collision-listener |   | Listen for bounding-box collisions with user camera and hands. Must be applied to an object or model with geometric mesh. Collisions are determined by course bounding-box overlaps. | No | . | collision-listener | string |   | Name of the collision-listener, default can be empty string. Collisions trigger click events. | No | . | blip | blip |   | When the object is created or deleted, it will animate in/out of the scene instead of appearing/disappearing instantly. Must have a geometric mesh. | No | . | static-body | static-body |   | A fixed-position or animated object. Other objects may collide with static bodies, but static bodies themselves are unaffected by gravity and collisions. | No | . | dynamic-body | dynamic-body |   | A freely-moving object. Dynamic bodies have mass, collide with other objects, bounce or slow during collisions, and fall if gravity is enabled. | No | . | goto-landmark | goto-landmark |   | Teleports user to the landmark with the given name. Requires click-listener. | No | . | goto-url | goto-url |   | Load new URL when object is clicked. Requires click-listener. | No | . | hide-on-enter-ar | boolean; Must be: True | True | Hide object when entering AR. Remove component to not hide. | No | . | hide-on-enter-vr | boolean; Must be: True | True | Hide object when entering VR. Remove component to not hide. | No | . | show-on-enter-ar | boolean; Must be: True | True | Show object when entering AR. Hidden otherwise. | No | . | show-on-enter-vr | boolean; Must be: True | True | Show object when entering VR. Hidden otherwise. | No | . | impulse | impulse |   | Apply an impulse to an object to set it in motion. This happens in conjunction with an event. Requires click-listener and physics. | No | . | landmark | landmark |   | Define entities as a landmark; Landmarks appears in the landmark list and you can move (teleport) to them; You can define the behavior of the teleport: if you will be at a fixed or random distance, looking at the landmark, fixed offset or if it is constrained by a navmesh (when it exists). | No | . | material-extras | material-extras |   | Define extra material properties, namely texture encoding, whether to render the material’s color and render order. | No | . | shadow | shadow |   | The shadow component enables shadows for an entity and its children. Adding the shadow component alone is not enough to display shadows in your scene. We must have at least one light with castShadow: true enabled. | No | . | sound | sound |   | The sound component defines the entity as a source of sound or audio. The sound component can be positional and is thus affected by the component’s position. | No | . | textinput | textinput |   | Opens an HTML prompt when clicked. Sends text input as an event on MQTT. Requires click-listener. | No | . | url | string |   | Use File Store paths under ‘store/users/username’, see CDN and other storage options in the description above. | No | . | remote-render | remote-render |   | Whether or not an object should be remote rendered [Experimental]. | No | . | video-control | video-control |   | Adds a video to an entity and controls its playback. | No | . | attribution | attribution |   | Attribution Component. Saves attribution data in any entity. | No | . | spe-particles | spe-particles |   | GPU based particle systems in A-Frame. | No | . | look-at | string |   | The look-at component defines the behavior for an entity to dynamically rotate or face towards another entity or position. Use ‘#my-camera’ to face the user camera, otherwise can take either a vec3 position or a query selector to another entity. | No | . | buffer | boolean | True | Transform geometry into a BufferGeometry to reduce memory usage at the cost of being harder to manipulate (geometries only: box, circle, cone, …). | No | . | jitsi-video | jitsi-video |   | Apply a jitsi video source to the geometry. | No | . | material | material | {'color': '#7f7f7f'} | The material properties of the object’s surface. | No | . | multisrc | multisrc |   | Define multiple visual sources applied to an object. | No | . | screenshareable | boolean | True | Whether or not a user can screenshare on an object. | No | . | skipCache | boolean | False | Disable retrieving the shared geometry object from the cache. (geometries only: box, circle, cone, …). | No | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/torus.html#torus-attributes",
    "relUrl": "/content/schemas/message/torus.html#torus-attributes"
  },"928": {
    "doc": "Torus",
    "title": "Torus",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/torus.html",
    "relUrl": "/content/schemas/message/torus.html"
  },"929": {
    "doc": "arena.objects.torus",
    "title": "\narena.objects.torus    ",
    "content": "class Torus(arena.objects.arena_object.Object): Torus object class to manage its properties in the ARENA: Torus Geometry. Parameters . | float arc: Arc Defaults to '360' (optional) | float radius: radius Defaults to '1' (optional) | float radiusTubular: radius tubular Defaults to '0.2' (optional) | int segmentsRadial: segments radial Defaults to '36' (optional) | int segmentsTubular: segments tubular Defaults to '32' (optional) | . Torus(**kwargs) object_type = &#39;torus&#39; Inherited Members . arena.objects.arena_object.Object type all_objects evt_handler update_handler animations delayed_prop_tasks update_attributes dispatch_animation remove_animation_at_index clear_animations clickable json_preprocess json_postprocess json get add remove exists arena.base_object.BaseObject json_encode ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/torus.html",
    "relUrl": "/content/python-api/objects/torus.html"
  },"930": {
    "doc": "arena.objects.torus",
    "title": "arena.objects.torus",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/torus.html",
    "relUrl": "/content/python-api/objects/torus.html"
  },"931": {
    "doc": "Torus Knot",
    "title": "Torus Knot",
    "content": "Torus Knot Geometry. All wire objects have a set of basic attributes {object_id, action, type, persist, data}. The data attribute defines the object-specific attributes . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/torusKnot.html#torus-knot",
    "relUrl": "/content/schemas/message/torusKnot.html#torus-knot"
  },"932": {
    "doc": "Torus Knot",
    "title": "Torus Knot Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | object_id | string |   | A uuid or otherwise unique identifier for this object. | Yes | . | persist | boolean | True | Persist this object in the database. | Yes | . | type | string; Must be: object | 'object' | AFrame 3D Object | Yes | . | action | string; One of: ['create', 'delete', 'update'] | 'create' | Message action create, update, delete. | Yes | . | ttl | integer |   | When applied to an entity, the entity will remove itself from DOM after the specified number of seconds. Update is allowed, which will reset the timer to start from that moment. | No | . | data | Torus Knot data |   | Torus Knot Data | Yes | . Torus Knot Data Attributes . | Attribute | Type | Default | Description | Required | . | object_type | string; Must be: torusKnot | torusKnot | 3D object type. | Yes | . | p | number | 2 | P | No | . | q | number | 3 | Q | No | . | radius | number | 1 | radius | Yes | . | radiusTubular | number | 0.2 | radius tubular | Yes | . | segmentsRadial | integer | 8 | segments radial | No | . | segmentsTubular | integer | 100 | segments tubular | No | . | parent | string |   | Parent’s object_id. Child objects inherit attributes of their parent, for example scale and translation. | No | . | position | position |   | 3D object position. | Yes | . | rotation | rotation |   | 3D object rotation in quaternion representation; Right-handed coordinate system. Euler degrees are deprecated in wire message format. | Yes | . | scale | scale |   | 3D object scale. | No | . | animation | animation |   | Animate and tween values. | No | . | armarker | armarker |   | A location marker (such as an AprilTag, a lightAnchor, or an UWB tag), used to anchor scenes, or scene objects, in the real world. | No | . | click-listener | click-listener |   | Object will listen for mouse events like clicks. | No | . | box-collision-listener | box-collision-listener |   | Listen for bounding-box collisions with user camera and hands. Must be applied to an object or model with geometric mesh. Collisions are determined by course bounding-box overlaps. | No | . | collision-listener | string |   | Name of the collision-listener, default can be empty string. Collisions trigger click events. | No | . | blip | blip |   | When the object is created or deleted, it will animate in/out of the scene instead of appearing/disappearing instantly. Must have a geometric mesh. | No | . | static-body | static-body |   | A fixed-position or animated object. Other objects may collide with static bodies, but static bodies themselves are unaffected by gravity and collisions. | No | . | dynamic-body | dynamic-body |   | A freely-moving object. Dynamic bodies have mass, collide with other objects, bounce or slow during collisions, and fall if gravity is enabled. | No | . | goto-landmark | goto-landmark |   | Teleports user to the landmark with the given name. Requires click-listener. | No | . | goto-url | goto-url |   | Load new URL when object is clicked. Requires click-listener. | No | . | hide-on-enter-ar | boolean; Must be: True | True | Hide object when entering AR. Remove component to not hide. | No | . | hide-on-enter-vr | boolean; Must be: True | True | Hide object when entering VR. Remove component to not hide. | No | . | show-on-enter-ar | boolean; Must be: True | True | Show object when entering AR. Hidden otherwise. | No | . | show-on-enter-vr | boolean; Must be: True | True | Show object when entering VR. Hidden otherwise. | No | . | impulse | impulse |   | Apply an impulse to an object to set it in motion. This happens in conjunction with an event. Requires click-listener and physics. | No | . | landmark | landmark |   | Define entities as a landmark; Landmarks appears in the landmark list and you can move (teleport) to them; You can define the behavior of the teleport: if you will be at a fixed or random distance, looking at the landmark, fixed offset or if it is constrained by a navmesh (when it exists). | No | . | material-extras | material-extras |   | Define extra material properties, namely texture encoding, whether to render the material’s color and render order. | No | . | shadow | shadow |   | The shadow component enables shadows for an entity and its children. Adding the shadow component alone is not enough to display shadows in your scene. We must have at least one light with castShadow: true enabled. | No | . | sound | sound |   | The sound component defines the entity as a source of sound or audio. The sound component can be positional and is thus affected by the component’s position. | No | . | textinput | textinput |   | Opens an HTML prompt when clicked. Sends text input as an event on MQTT. Requires click-listener. | No | . | url | string |   | Use File Store paths under ‘store/users/username’, see CDN and other storage options in the description above. | No | . | remote-render | remote-render |   | Whether or not an object should be remote rendered [Experimental]. | No | . | video-control | video-control |   | Adds a video to an entity and controls its playback. | No | . | attribution | attribution |   | Attribution Component. Saves attribution data in any entity. | No | . | spe-particles | spe-particles |   | GPU based particle systems in A-Frame. | No | . | look-at | string |   | The look-at component defines the behavior for an entity to dynamically rotate or face towards another entity or position. Use ‘#my-camera’ to face the user camera, otherwise can take either a vec3 position or a query selector to another entity. | No | . | buffer | boolean | True | Transform geometry into a BufferGeometry to reduce memory usage at the cost of being harder to manipulate (geometries only: box, circle, cone, …). | No | . | jitsi-video | jitsi-video |   | Apply a jitsi video source to the geometry. | No | . | material | material | {'color': '#7f7f7f'} | The material properties of the object’s surface. | No | . | multisrc | multisrc |   | Define multiple visual sources applied to an object. | No | . | screenshareable | boolean | True | Whether or not a user can screenshare on an object. | No | . | skipCache | boolean | False | Disable retrieving the shared geometry object from the cache. (geometries only: box, circle, cone, …). | No | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/torusKnot.html#torus-knot-attributes",
    "relUrl": "/content/schemas/message/torusKnot.html#torus-knot-attributes"
  },"933": {
    "doc": "Torus Knot",
    "title": "Torus Knot",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/torusKnot.html",
    "relUrl": "/content/schemas/message/torusKnot.html"
  },"934": {
    "doc": "arena.objects.torus_knot",
    "title": "\narena.objects.torus_knot    ",
    "content": "class TorusKnot(arena.objects.arena_object.Object): TorusKnot object class to manage its properties in the ARENA: Torus Knot Geometry. Parameters . | float p: P Defaults to '2' (optional) | float q: Q Defaults to '3' (optional) | float radius: radius Defaults to '1' (optional) | float radiusTubular: radius tubular Defaults to '0.2' (optional) | int segmentsRadial: segments radial Defaults to '8' (optional) | int segmentsTubular: segments tubular Defaults to '100' (optional) | . TorusKnot(**kwargs) object_type = &#39;torusKnot&#39; Inherited Members . arena.objects.arena_object.Object type all_objects evt_handler update_handler animations delayed_prop_tasks update_attributes dispatch_animation remove_animation_at_index clear_animations clickable json_preprocess json_postprocess json get add remove exists arena.base_object.BaseObject json_encode ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/torus_knot.html",
    "relUrl": "/content/python-api/objects/torus_knot.html"
  },"935": {
    "doc": "arena.objects.torus_knot",
    "title": "arena.objects.torus_knot",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/torus_knot.html",
    "relUrl": "/content/python-api/objects/torus_knot.html"
  },"936": {
    "doc": "arena.attributes.translate",
    "title": "\narena.attributes.translate    ",
    "content": "ATTRIBUTE_KEYWORD_TRANSLATION = {&#39;physics&#39;: &#39;dynamic-body&#39;, &#39;clickable&#39;: &#39;click-listener&#39;, &#39;animation&#39;: &#39;animation&#39;, &#39;animation_mixer&#39;: &#39;animation-mixer&#39;, &#39;armarker&#39;: &#39;armarker&#39;, &#39;attribution&#39;: &#39;attribution&#39;, &#39;blip&#39;: &#39;blip&#39;, &#39;box_collision_listener&#39;: &#39;box-collision-listener&#39;, &#39;buffer&#39;: &#39;buffer&#39;, &#39;click_listener&#39;: &#39;click-listener&#39;, &#39;collision_listener&#39;: &#39;collision-listener&#39;, &#39;dynamic_body&#39;: &#39;dynamic-body&#39;, &#39;gltf_model_lod&#39;: &#39;gltf-model-lod&#39;, &#39;gltf_morph&#39;: &#39;gltf-morph&#39;, &#39;goto_landmark&#39;: &#39;goto-landmark&#39;, &#39;goto_url&#39;: &#39;goto-url&#39;, &#39;hide_on_enter_ar&#39;: &#39;hide-on-enter-ar&#39;, &#39;hide_on_enter_vr&#39;: &#39;hide-on-enter-vr&#39;, &#39;impulse&#39;: &#39;impulse&#39;, &#39;jitsi_video&#39;: &#39;jitsi-video&#39;, &#39;landmark&#39;: &#39;landmark&#39;, &#39;look_at&#39;: &#39;look-at&#39;, &#39;material&#39;: &#39;material&#39;, &#39;material_extras&#39;: &#39;material-extras&#39;, &#39;modelUpdate&#39;: &#39;modelUpdate&#39;, &#39;multisrc&#39;: &#39;multisrc&#39;, &#39;parent&#39;: &#39;parent&#39;, &#39;position&#39;: &#39;position&#39;, &#39;remote_render&#39;: &#39;remote-render&#39;, &#39;rotation&#39;: &#39;rotation&#39;, &#39;scale&#39;: &#39;scale&#39;, &#39;screenshareable&#39;: &#39;screenshareable&#39;, &#39;shadow&#39;: &#39;shadow&#39;, &#39;show_on_enter_ar&#39;: &#39;show-on-enter-ar&#39;, &#39;show_on_enter_vr&#39;: &#39;show-on-enter-vr&#39;, &#39;skipCache&#39;: &#39;skipCache&#39;, &#39;sound&#39;: &#39;sound&#39;, &#39;spe_particles&#39;: &#39;spe-particles&#39;, &#39;static_body&#39;: &#39;static-body&#39;, &#39;textinput&#39;: &#39;textinput&#39;, &#39;url&#39;: &#39;url&#39;, &#39;video_control&#39;: &#39;video-control&#39;} KEYWORD_ATTRIBUTE_TRANSLATION = {&#39;animation&#39;: &#39;animation&#39;, &#39;animation-mixer&#39;: &#39;animation_mixer&#39;, &#39;armarker&#39;: &#39;armarker&#39;, &#39;attribution&#39;: &#39;attribution&#39;, &#39;blip&#39;: &#39;blip&#39;, &#39;box-collision-listener&#39;: &#39;box_collision_listener&#39;, &#39;buffer&#39;: &#39;buffer&#39;, &#39;click-listener&#39;: &#39;click_listener&#39;, &#39;collision-listener&#39;: &#39;collision_listener&#39;, &#39;dynamic-body&#39;: &#39;dynamic_body&#39;, &#39;gltf-model-lod&#39;: &#39;gltf_model_lod&#39;, &#39;gltf-morph&#39;: &#39;gltf_morph&#39;, &#39;goto-landmark&#39;: &#39;goto_landmark&#39;, &#39;goto-url&#39;: &#39;goto_url&#39;, &#39;hide-on-enter-ar&#39;: &#39;hide_on_enter_ar&#39;, &#39;hide-on-enter-vr&#39;: &#39;hide_on_enter_vr&#39;, &#39;impulse&#39;: &#39;impulse&#39;, &#39;jitsi-video&#39;: &#39;jitsi_video&#39;, &#39;landmark&#39;: &#39;landmark&#39;, &#39;look-at&#39;: &#39;look_at&#39;, &#39;material&#39;: &#39;material&#39;, &#39;material-extras&#39;: &#39;material_extras&#39;, &#39;modelUpdate&#39;: &#39;modelUpdate&#39;, &#39;multisrc&#39;: &#39;multisrc&#39;, &#39;parent&#39;: &#39;parent&#39;, &#39;position&#39;: &#39;position&#39;, &#39;remote-render&#39;: &#39;remote_render&#39;, &#39;rotation&#39;: &#39;rotation&#39;, &#39;scale&#39;: &#39;scale&#39;, &#39;screenshareable&#39;: &#39;screenshareable&#39;, &#39;shadow&#39;: &#39;shadow&#39;, &#39;show-on-enter-ar&#39;: &#39;show_on_enter_ar&#39;, &#39;show-on-enter-vr&#39;: &#39;show_on_enter_vr&#39;, &#39;skipCache&#39;: &#39;skipCache&#39;, &#39;sound&#39;: &#39;sound&#39;, &#39;spe-particles&#39;: &#39;spe_particles&#39;, &#39;static-body&#39;: &#39;static_body&#39;, &#39;textinput&#39;: &#39;textinput&#39;, &#39;url&#39;: &#39;url&#39;, &#39;video-control&#39;: &#39;video_control&#39;} ATTRIBUTE_CLASS_TRANSLATION = {&#39;animation&#39;: &lt;class &#39;arena.attributes.animation.Animation&#39;&gt;, &#39;animation_mixer&#39;: &lt;class &#39;arena.attributes.animation_mixer.AnimationMixer&#39;&gt;, &#39;armarker&#39;: &lt;class &#39;arena.attributes.armarker.Armarker&#39;&gt;, &#39;attribution&#39;: &lt;class &#39;arena.attributes.attribution.Attribution&#39;&gt;, &#39;blip&#39;: &lt;class &#39;arena.attributes.blip.Blip&#39;&gt;, &#39;box_collision_listener&#39;: &lt;class &#39;arena.attributes.box_collision_listener.BoxCollisionListener&#39;&gt;, &#39;click_listener&#39;: &lt;class &#39;arena.attributes.click_listener.ClickListener&#39;&gt;, &#39;dynamic_body&#39;: &lt;class &#39;arena.attributes.dynamic_body.DynamicBody&#39;&gt;, &#39;gltf_model_lod&#39;: &lt;class &#39;arena.attributes.gltf_model_lod.GltfModelLod&#39;&gt;, &#39;gltf_morph&#39;: &lt;class &#39;arena.attributes.gltf_morph.GltfMorph&#39;&gt;, &#39;goto_landmark&#39;: &lt;class &#39;arena.attributes.goto_landmark.GotoLandmark&#39;&gt;, &#39;goto_url&#39;: &lt;class &#39;arena.attributes.goto_url.GotoUrl&#39;&gt;, &#39;impulse&#39;: &lt;class &#39;arena.attributes.impulse.Impulse&#39;&gt;, &#39;jitsi_video&#39;: &lt;class &#39;arena.attributes.jitsi_video.JitsiVideo&#39;&gt;, &#39;landmark&#39;: &lt;class &#39;arena.attributes.landmark.Landmark&#39;&gt;, &#39;material&#39;: &lt;class &#39;arena.attributes.material.Material&#39;&gt;, &#39;material_extras&#39;: &lt;class &#39;arena.attributes.material_extras.MaterialExtras&#39;&gt;, &#39;modelUpdate&#39;: &lt;class &#39;arena.attributes.model_update.ModelUpdate&#39;&gt;, &#39;multisrc&#39;: &lt;class &#39;arena.attributes.multisrc.Multisrc&#39;&gt;, &#39;position&#39;: &lt;class &#39;arena.attributes.position.Position&#39;&gt;, &#39;remote_render&#39;: &lt;class &#39;arena.attributes.remote_render.RemoteRender&#39;&gt;, &#39;rotation&#39;: &lt;class &#39;arena.attributes.rotation.Rotation&#39;&gt;, &#39;scale&#39;: &lt;class &#39;arena.attributes.scale.Scale&#39;&gt;, &#39;shadow&#39;: &lt;class &#39;arena.attributes.shadow.Shadow&#39;&gt;, &#39;sound&#39;: &lt;class &#39;arena.attributes.sound.Sound&#39;&gt;, &#39;spe_particles&#39;: &lt;class &#39;arena.attributes.spe_particles.SpeParticles&#39;&gt;, &#39;static_body&#39;: &lt;class &#39;arena.attributes.static_body.StaticBody&#39;&gt;, &#39;textinput&#39;: &lt;class &#39;arena.attributes.textinput.Textinput&#39;&gt;, &#39;video_control&#39;: &lt;class &#39;arena.attributes.video_control.VideoControl&#39;&gt;} ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/translate.html",
    "relUrl": "/content/python-api/attributes/translate.html"
  },"937": {
    "doc": "arena.attributes.translate",
    "title": "arena.attributes.translate",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/translate.html",
    "relUrl": "/content/python-api/attributes/translate.html"
  },"938": {
    "doc": "arena.objects.triangle",
    "title": "\narena.objects.triangle    ",
    "content": "class Triangle(arena.objects.arena_object.Object): Triangle object class to manage its properties in the ARENA: Triangle Geometry. Parameters . | dict vertexA: vertex A Defaults to '{'x': 0, 'y': 0.5, 'z': 0}' (optional) | dict vertexB: vertex B Defaults to '{'x': -0.5, 'y': -0.5, 'z': 0}' (optional) | dict vertexC: vertex C Defaults to '{'x': 0.5, 'y': -0.5, 'z': 0}' (optional) | . Triangle(**kwargs) object_type = &#39;triangle&#39; Inherited Members . arena.objects.arena_object.Object type all_objects evt_handler update_handler animations delayed_prop_tasks update_attributes dispatch_animation remove_animation_at_index clear_animations clickable json_preprocess json_postprocess json get add remove exists arena.base_object.BaseObject json_encode ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/triangle.html",
    "relUrl": "/content/python-api/objects/triangle.html"
  },"939": {
    "doc": "arena.objects.triangle",
    "title": "arena.objects.triangle",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/triangle.html",
    "relUrl": "/content/python-api/objects/triangle.html"
  },"940": {
    "doc": "Triangle",
    "title": "Triangle",
    "content": "Triangle Geometry. All wire objects have a set of basic attributes {object_id, action, type, persist, data}. The data attribute defines the object-specific attributes . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/triangle.html#triangle",
    "relUrl": "/content/schemas/message/triangle.html#triangle"
  },"941": {
    "doc": "Triangle",
    "title": "Triangle Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | object_id | string |   | A uuid or otherwise unique identifier for this object. | Yes | . | persist | boolean | True | Persist this object in the database. | Yes | . | type | string; Must be: object | 'object' | AFrame 3D Object | Yes | . | action | string; One of: ['create', 'delete', 'update'] | 'create' | Message action create, update, delete. | Yes | . | ttl | integer |   | When applied to an entity, the entity will remove itself from DOM after the specified number of seconds. Update is allowed, which will reset the timer to start from that moment. | No | . | data | Triangle data |   | Triangle Data | Yes | . Triangle Data Attributes . | Attribute | Type | Default | Description | Required | . | object_type | string; Must be: triangle | triangle | 3D object type. | Yes | . | vertexA | vector3 | {'x': 0, 'y': 0.5, 'z': 0} | vertex A | Yes | . | vertexB | vector3 | {'x': -0.5, 'y': -0.5, 'z': 0} | vertex B | Yes | . | vertexC | vector3 | {'x': 0.5, 'y': -0.5, 'z': 0} | vertex C | Yes | . | parent | string |   | Parent’s object_id. Child objects inherit attributes of their parent, for example scale and translation. | No | . | position | position |   | 3D object position. | Yes | . | rotation | rotation |   | 3D object rotation in quaternion representation; Right-handed coordinate system. Euler degrees are deprecated in wire message format. | Yes | . | scale | scale |   | 3D object scale. | No | . | animation | animation |   | Animate and tween values. | No | . | armarker | armarker |   | A location marker (such as an AprilTag, a lightAnchor, or an UWB tag), used to anchor scenes, or scene objects, in the real world. | No | . | click-listener | click-listener |   | Object will listen for mouse events like clicks. | No | . | box-collision-listener | box-collision-listener |   | Listen for bounding-box collisions with user camera and hands. Must be applied to an object or model with geometric mesh. Collisions are determined by course bounding-box overlaps. | No | . | collision-listener | string |   | Name of the collision-listener, default can be empty string. Collisions trigger click events. | No | . | blip | blip |   | When the object is created or deleted, it will animate in/out of the scene instead of appearing/disappearing instantly. Must have a geometric mesh. | No | . | static-body | static-body |   | A fixed-position or animated object. Other objects may collide with static bodies, but static bodies themselves are unaffected by gravity and collisions. | No | . | dynamic-body | dynamic-body |   | A freely-moving object. Dynamic bodies have mass, collide with other objects, bounce or slow during collisions, and fall if gravity is enabled. | No | . | goto-landmark | goto-landmark |   | Teleports user to the landmark with the given name. Requires click-listener. | No | . | goto-url | goto-url |   | Load new URL when object is clicked. Requires click-listener. | No | . | hide-on-enter-ar | boolean; Must be: True | True | Hide object when entering AR. Remove component to not hide. | No | . | hide-on-enter-vr | boolean; Must be: True | True | Hide object when entering VR. Remove component to not hide. | No | . | show-on-enter-ar | boolean; Must be: True | True | Show object when entering AR. Hidden otherwise. | No | . | show-on-enter-vr | boolean; Must be: True | True | Show object when entering VR. Hidden otherwise. | No | . | impulse | impulse |   | Apply an impulse to an object to set it in motion. This happens in conjunction with an event. Requires click-listener and physics. | No | . | landmark | landmark |   | Define entities as a landmark; Landmarks appears in the landmark list and you can move (teleport) to them; You can define the behavior of the teleport: if you will be at a fixed or random distance, looking at the landmark, fixed offset or if it is constrained by a navmesh (when it exists). | No | . | material-extras | material-extras |   | Define extra material properties, namely texture encoding, whether to render the material’s color and render order. | No | . | shadow | shadow |   | The shadow component enables shadows for an entity and its children. Adding the shadow component alone is not enough to display shadows in your scene. We must have at least one light with castShadow: true enabled. | No | . | sound | sound |   | The sound component defines the entity as a source of sound or audio. The sound component can be positional and is thus affected by the component’s position. | No | . | textinput | textinput |   | Opens an HTML prompt when clicked. Sends text input as an event on MQTT. Requires click-listener. | No | . | url | string |   | Use File Store paths under ‘store/users/username’, see CDN and other storage options in the description above. | No | . | remote-render | remote-render |   | Whether or not an object should be remote rendered [Experimental]. | No | . | video-control | video-control |   | Adds a video to an entity and controls its playback. | No | . | attribution | attribution |   | Attribution Component. Saves attribution data in any entity. | No | . | spe-particles | spe-particles |   | GPU based particle systems in A-Frame. | No | . | look-at | string |   | The look-at component defines the behavior for an entity to dynamically rotate or face towards another entity or position. Use ‘#my-camera’ to face the user camera, otherwise can take either a vec3 position or a query selector to another entity. | No | . | buffer | boolean | True | Transform geometry into a BufferGeometry to reduce memory usage at the cost of being harder to manipulate (geometries only: box, circle, cone, …). | No | . | jitsi-video | jitsi-video |   | Apply a jitsi video source to the geometry. | No | . | material | material | {'color': '#7f7f7f'} | The material properties of the object’s surface. | No | . | multisrc | multisrc |   | Define multiple visual sources applied to an object. | No | . | screenshareable | boolean | True | Whether or not a user can screenshare on an object. | No | . | skipCache | boolean | False | Disable retrieving the shared geometry object from the cache. (geometries only: box, circle, cone, …). | No | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/triangle.html#triangle-attributes",
    "relUrl": "/content/schemas/message/triangle.html#triangle-attributes"
  },"942": {
    "doc": "Triangle",
    "title": "Triangle",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/triangle.html",
    "relUrl": "/content/schemas/message/triangle.html"
  },"943": {
    "doc": "Troubleshooting",
    "title": "Troubleshooting",
    "content": "Here are some common situations which can help when programming and collaborating in the ARENA. ",
    "url": "https://docs.arenaxr.org/content/troubleshooting.html",
    "relUrl": "/content/troubleshooting.html"
  },"944": {
    "doc": "Troubleshooting",
    "title": "Why can’t I hear you?",
    "content": ". | Don’t forget to make sure your computer speakers are not Muted or have your Volume set too low. | . ",
    "url": "https://docs.arenaxr.org/content/troubleshooting.html#why-cant-i-hear-you",
    "relUrl": "/content/troubleshooting.html#why-cant-i-hear-you"
  },"945": {
    "doc": "Troubleshooting",
    "title": "Can you hear/see me?",
    "content": ". | Audio/video setups vary a lot between web browsers so this can be common. | For Chrome, test your permissions and try different cameras/microphones: chrome://settings/content/camera and chrome://settings/content/microphone. | For Edge, in Windows Start &gt; Settings &gt; Privacy &gt; Camera, and toggle the switch. Try the Microphone setting here as well. | For Firefox, test your permissions about:preferences#privacy, scroll down to Permissions, then Camera/Microphone and try different cameras/microphones: | For Safari, navigate your menus to Menu &gt; Safari &gt; Preferences… &gt; Websites &gt; Camera/Microphones and try different cameras/microphones. | Since we use WebRTC, try your browser at a third-party WebRTC test site https://test.8x8.vc/. | . ",
    "url": "https://docs.arenaxr.org/content/troubleshooting.html#can-you-hearsee-me",
    "relUrl": "/content/troubleshooting.html#can-you-hearsee-me"
  },"946": {
    "doc": "Troubleshooting",
    "title": "Where is my Object?",
    "content": ". | Is the object’s position below the ground? The y position will be negative below the default visible floor. | Is the object’s scale too big/small? Models especially have wild differences in scale, try increasing/decreasing the order of magnitude of the scale. Try a scale of 10, 1, 0.1, or 0.01. | Does the scene name in the URL match the scene name/topic where the object was created? e.g. URL is https://arenaxr.org/[your username]/example and MQTT topic published to is realm/s/[your username]/example/some_object_1. | Does the object appear in the left column of the A-Frame Scene Inspector? | . ",
    "url": "https://docs.arenaxr.org/content/troubleshooting.html#where-is-my-object",
    "relUrl": "/content/troubleshooting.html#where-is-my-object"
  },"947": {
    "doc": "Troubleshooting",
    "title": "Python Library arena-py Errors",
    "content": "While using the ARENA Python library, You may encounter an error condition due to your network configuration. Some of these are detailed below with some troubleshooting steps. Python: MQTT connect error to arenaxr.org, port=8883 . If your internet connection uses a VPN or other firewall that may block port 8883, then the secure, encrypted TLS connection for ARENA MQTT will be prevented. To resolve: . | Switch to another VPN, WiFi access point, or network connection that allows port 8883. | Use a SSH terminal connection to another server you operate that allows port 8883. | . Python: Unable to get local issuer certificate . It seems some distributions of Python may not have any certificate roots installed for SSL. To resolve, some useful troubleshooting can be found online: . | https://stackoverflow.com/questions/52805115/certificate-verify-failed-unable-to-get-local-issuer-certificate | . ",
    "url": "https://docs.arenaxr.org/content/troubleshooting.html#python-library-arena-py-errors",
    "relUrl": "/content/troubleshooting.html#python-library-arena-py-errors"
  },"948": {
    "doc": "Troubleshooting",
    "title": "Web Browser Scene Errors",
    "content": "While visiting an ARENA scene in a web browser, you may encounter an error condition due to limited hardware, memory, or network capacity. Some of these are detailed below with some troubleshooting steps. Error: Network speed is too slow . Some elements of the scene may not have loaded if at all. You may see this error if the network speed of your current connection is too slow for the ARENA to operate. Most fixes involve switching to another network connection which may have improved bandwidth or latency. Steps to try: . | Switch to a different Wifi access point. | Switch from wireless network connection to wired (or vice versa). | Switch to another VPN or disable your VPN connection. | . Error: Conference stream failed . You may see other users moving in 3d, but unable to see/hear their video or audio. You may encounter this error if some ports are blocked by a VPN, firewall, or other network filter. ARENA’s video conferencing system is backed by Jitsi, and requires the opening of additional ports to function. Our conferencing system requires the following ports to be open: 80, 443, 3478, 5349, 10000. Steps to try: . | Switch to a different Wifi access point. | Switch to an alternate VPN channel or provider if possible. | Disable your VPN if one is in use. | . Error: Conference server connection failed . Other users may have stopped moving completely. You may see this error if the network connection to the conferencing server has been lost. Steps to try: . | Move your wireless computer/device closer to your access point. | Switch from wireless network connection to wired (or vice versa). | Switch to a different Wifi access point. | . Warning: Events Publish Behavior is too high . You may see this warning when using AR Builder (ARB) or other editor tools to edit the scene in 3d. It is a reminder that the scene’s scene-options object is set to publish mouse events for every client and object in the scene, instead of only those chosen per object. This can lead to unnecessarily high MQTT events publish rates for complex scenes with many users. | Scene owners, remember to restore scene options to {\"scene-options\": { \"clickableOnlyEvents\": true }}. | In ARB this can be done by toggling the edit button off. | . ",
    "url": "https://docs.arenaxr.org/content/troubleshooting.html#web-browser-scene-errors",
    "relUrl": "/content/troubleshooting.html#web-browser-scene-errors"
  },"949": {
    "doc": "Troubleshooting",
    "title": "I have a different problem, where can I get help?",
    "content": "We have a place for submitting issues and asking questions in most of our code repositories: . | ARENA Docs issues | ARENA Website/Webserver issues | ARENA Python issues | ARENA Unity issues | ATLAS Scene Locator issues | ARENA Persistence issues | ARENA Authentication issues | ARENA Deployment Docker issues | . ",
    "url": "https://docs.arenaxr.org/content/troubleshooting.html#i-have-a-different-problem-where-can-i-get-help",
    "relUrl": "/content/troubleshooting.html#i-have-a-different-problem-where-can-i-get-help"
  },"950": {
    "doc": "UI Elements",
    "title": "ARENA UI Elements",
    "content": "You can use several UI elements in the ARENA, including text and image panels, button panels, and popup prompts. ",
    "url": "https://docs.arenaxr.org/content/3d-content/ui.html#arena-ui-elements",
    "relUrl": "/content/3d-content/ui.html#arena-ui-elements"
  },"951": {
    "doc": "UI Elements",
    "title": "ARENAUI Card - a text and image panel",
    "content": "A card is a rectangular panel that can contain text and/or an image. It can be used to display information or act as a sign. Its layout will dynamic adjust according to the optional parameters that are provided: for instance, if no image is provided, then only text will be displayed. If only a title is provided, it will serve more as a label or sign. An optional close button may also added. See the full ARENAUI Card schema for more details. ",
    "url": "https://docs.arenaxr.org/content/3d-content/ui.html#arenaui-card---a-text-and-image-panel",
    "relUrl": "/content/3d-content/ui.html#arenaui-card---a-text-and-image-panel"
  },"952": {
    "doc": "UI Elements",
    "title": "ARENAUI Button Panel",
    "content": "A button panel is a horizontal or vertical panel that contains buttons. Each button can have a text or image label. When a button is clicked, a message is sent over pubsub with the buttonName and buttonIndex. See the full ARENAUI Button Panel schema for more details. ",
    "url": "https://docs.arenaxr.org/content/3d-content/ui.html#arenaui-button-panel",
    "relUrl": "/content/3d-content/ui.html#arenaui-button-panel"
  },"953": {
    "doc": "UI Elements",
    "title": "ARENAUI Prompt",
    "content": "Similar to a button panel, this prompt is intended to be used a quick confirmation popup. Its buttons may be customized and an additional text description can be included, similar to what one may see in traditional 2D web interfaces. See the full ARENAUI Prompt schema for more details. ",
    "url": "https://docs.arenaxr.org/content/3d-content/ui.html#arenaui-prompt",
    "relUrl": "/content/3d-content/ui.html#arenaui-prompt"
  },"954": {
    "doc": "UI Elements",
    "title": "UI Elements",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/3d-content/ui.html",
    "relUrl": "/content/3d-content/ui.html"
  },"955": {
    "doc": "Unity Export",
    "title": "Exporting from Unity",
    "content": "There are some limitations and things to keep in mind when exporting from Unity. A plugin like GLTF Exporter can be useful with the following guidance. | In order to optimize load times, reduce file sizes and increase frame rates, all meshes with same material should be combined into single mesh. | Meshes should be compressed by reducing floating point accuracy and decimating mesh polygon count. | Textures should be also be combined to single atlased “large” compressed textures as opposed to multiple single texture in either PNG or JPG. This reduces load time significantly and reduces the change of material application error in ARENA. | Normal maps are supported; however other more complex shaders are not supported. | Unity Lightmaps are not supported. It is possible to bake approximate lightmaps directly onto diffuse textures to create “fake” shadows. | Unity real time lights do not appear to be exported. Real time lights should be recreated in ARENA. | It is possible to export transparent materials. | It is possible to export animated models from Unity. Animated models in Unity should be set to “Legacy” mode with compressed keyframes. All animations must be contained and combined within the same model for animation export to work. Separated animation and model files do not work (Unity FBX convention is to separate mesh from animation files, so significant animation+mesh reprocessing may be required for proper animation export to GLTF.) | . ",
    "url": "https://docs.arenaxr.org/content/3d-content/unity.html#exporting-from-unity",
    "relUrl": "/content/3d-content/unity.html#exporting-from-unity"
  },"956": {
    "doc": "Unity Export",
    "title": "Unity Export",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/3d-content/unity.html",
    "relUrl": "/content/3d-content/unity.html"
  },"957": {
    "doc": "URDF Model",
    "title": "URDF Model",
    "content": "Load a URDF model. See guidance to store paths under ARENA File Store, CDN, or DropBox. All wire objects have a set of basic attributes {object_id, action, type, persist, data}. The data attribute defines the object-specific attributes . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/urdf-model.html#urdf-model",
    "relUrl": "/content/schemas/message/urdf-model.html#urdf-model"
  },"958": {
    "doc": "URDF Model",
    "title": "URDF Model Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | object_id | string |   | A uuid or otherwise unique identifier for this object. | Yes | . | persist | boolean | True | Persist this object in the database. | Yes | . | type | string; Must be: object | 'object' | AFrame 3D Object | Yes | . | action | string; One of: ['create', 'delete', 'update'] | 'create' | Message action create, update, delete. | Yes | . | ttl | integer |   | When applied to an entity, the entity will remove itself from DOM after the specified number of seconds. Update is allowed, which will reset the timer to start from that moment. | No | . | data | URDF Model data |   | URDF Model Data | Yes | . URDF Model Data Attributes . | Attribute | Type | Default | Description | Required | . | object_type | string; Must be: urdf-model | urdf-model | 3D object type. | Yes | . | url | string |   | Use File Store paths under ‘store/users/username’, see CDN and other storage options in the description above. | Yes | . | joints | string |   | Set joint values (in degrees) in the form ‘JointName1: ValueInDegrees1, JointName2: ValueInDegrees2, …’. | No | . | parent | string |   | Parent’s object_id. Child objects inherit attributes of their parent, for example scale and translation. | No | . | position | position |   | 3D object position. | No | . | rotation | rotation |   | 3D object rotation in quaternion representation; Right-handed coordinate system. Euler degrees are deprecated in wire message format. | No | . | scale | scale |   | 3D object scale. | No | . | animation | animation |   | Animate and tween values. | No | . | armarker | armarker |   | A location marker (such as an AprilTag, a lightAnchor, or an UWB tag), used to anchor scenes, or scene objects, in the real world. | No | . | click-listener | click-listener |   | Object will listen for mouse events like clicks. | No | . | box-collision-listener | box-collision-listener |   | Listen for bounding-box collisions with user camera and hands. Must be applied to an object or model with geometric mesh. Collisions are determined by course bounding-box overlaps. | No | . | collision-listener | string |   | Name of the collision-listener, default can be empty string. Collisions trigger click events. | No | . | blip | blip |   | When the object is created or deleted, it will animate in/out of the scene instead of appearing/disappearing instantly. Must have a geometric mesh. | No | . | static-body | static-body |   | A fixed-position or animated object. Other objects may collide with static bodies, but static bodies themselves are unaffected by gravity and collisions. | No | . | dynamic-body | dynamic-body |   | A freely-moving object. Dynamic bodies have mass, collide with other objects, bounce or slow during collisions, and fall if gravity is enabled. | No | . | goto-landmark | goto-landmark |   | Teleports user to the landmark with the given name. Requires click-listener. | No | . | goto-url | goto-url |   | Load new URL when object is clicked. Requires click-listener. | No | . | hide-on-enter-ar | boolean; Must be: True | True | Hide object when entering AR. Remove component to not hide. | No | . | hide-on-enter-vr | boolean; Must be: True | True | Hide object when entering VR. Remove component to not hide. | No | . | show-on-enter-ar | boolean; Must be: True | True | Show object when entering AR. Hidden otherwise. | No | . | show-on-enter-vr | boolean; Must be: True | True | Show object when entering VR. Hidden otherwise. | No | . | impulse | impulse |   | Apply an impulse to an object to set it in motion. This happens in conjunction with an event. Requires click-listener and physics. | No | . | landmark | landmark |   | Define entities as a landmark; Landmarks appears in the landmark list and you can move (teleport) to them; You can define the behavior of the teleport: if you will be at a fixed or random distance, looking at the landmark, fixed offset or if it is constrained by a navmesh (when it exists). | No | . | material-extras | material-extras |   | Define extra material properties, namely texture encoding, whether to render the material’s color and render order. | No | . | shadow | shadow |   | The shadow component enables shadows for an entity and its children. Adding the shadow component alone is not enough to display shadows in your scene. We must have at least one light with castShadow: true enabled. | No | . | sound | sound |   | The sound component defines the entity as a source of sound or audio. The sound component can be positional and is thus affected by the component’s position. | No | . | textinput | textinput |   | Opens an HTML prompt when clicked. Sends text input as an event on MQTT. Requires click-listener. | No | . | remote-render | remote-render |   | Whether or not an object should be remote rendered [Experimental]. | No | . | video-control | video-control |   | Adds a video to an entity and controls its playback. | No | . | attribution | attribution |   | Attribution Component. Saves attribution data in any entity. | No | . | spe-particles | spe-particles |   | GPU based particle systems in A-Frame. | No | . | look-at | string |   | The look-at component defines the behavior for an entity to dynamically rotate or face towards another entity or position. Use ‘#my-camera’ to face the user camera, otherwise can take either a vec3 position or a query selector to another entity. | No | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/urdf-model.html#urdf-model-attributes",
    "relUrl": "/content/schemas/message/urdf-model.html#urdf-model-attributes"
  },"959": {
    "doc": "URDF Model",
    "title": "URDF Model",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/urdf-model.html",
    "relUrl": "/content/schemas/message/urdf-model.html"
  },"960": {
    "doc": "arena.objects.urdf_model",
    "title": "\narena.objects.urdf_model    ",
    "content": "class UrdfModel(arena.objects.arena_object.Object): UrdfModel object class to manage its properties in the ARENA: Load a URDF model. See guidance to store paths under https://docs.arenaxr.org/content/interface/filestore.html ARENA File Store, CDN, or DropBox. Parameters . | str joints: Set joint values (in degrees) in the form 'JointName1: ValueInDegrees1, JointName2: ValueInDegrees2, ...'. (optional) | str url: Use File Store paths under 'store/users/username', see CDN and other storage options in the description above. (optional) | . UrdfModel(**kwargs) object_type = &#39;urdf-model&#39; Inherited Members . arena.objects.arena_object.Object type all_objects evt_handler update_handler animations delayed_prop_tasks update_attributes dispatch_animation remove_animation_at_index clear_animations clickable json_preprocess json_postprocess json get add remove exists arena.base_object.BaseObject json_encode ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/urdf_model.html",
    "relUrl": "/content/python-api/objects/urdf_model.html"
  },"961": {
    "doc": "arena.objects.urdf_model",
    "title": "arena.objects.urdf_model",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/urdf_model.html",
    "relUrl": "/content/python-api/objects/urdf_model.html"
  },"962": {
    "doc": "User Account",
    "title": "ARENA User Account Options",
    "content": "Authenticated users of the ARENA have a user account with which they can alter public access to any scenes they may create. ",
    "url": "https://docs.arenaxr.org/content/interface/user-account.html#arena-user-account-options",
    "relUrl": "/content/interface/user-account.html#arena-user-account-options"
  },"963": {
    "doc": "User Account",
    "title": "User Profile",
    "content": "Each authenticated user has a profile page to manage their user account options. Your profile page will show you a list of scenes that you have rights to edit. ",
    "url": "https://docs.arenaxr.org/content/interface/user-account.html#user-profile",
    "relUrl": "/content/interface/user-account.html#user-profile"
  },"964": {
    "doc": "User Account",
    "title": "User Roles",
    "content": "The first time a user is authenticated in the ARENA they have the User role by default. The Staff role may be applied by another Admin user. | Admin: Admin user, local username/password authenticated | Staff: Elevated/Admin Oauth authenticated user | User: Regular Oauth authenticated user | Anonymous: Unauthenticated user | . ",
    "url": "https://docs.arenaxr.org/content/interface/user-account.html#user-roles",
    "relUrl": "/content/interface/user-account.html#user-roles"
  },"965": {
    "doc": "User Account",
    "title": "Scene Permissions",
    "content": "Each scene has some options to manage permissions and access to the scene. Each scene you create will be published under your user namespace with the following rights by default. | Public Read: enabled | Public Write: disabled | Allow Anonymous: enabled | Editors: none | . Public Read . Disabling public read will prevent all other users from viewing your scene: except those who have the Admin or Staff roles. Public Write . This is disabled by default, preventing all other users from altering your scene: except those who have the Admin or Staff roles, and those users you whitelist as Editor in the scene. Warning . Enabling this denotes that all users may write to the scene and create, change, or delete content. Allow Anonymous . Disabling this will cause any Anonymous visitor to your scene to be denied access to view the scene or share the video conferencing features, allowing only authenticated users access to those resources. Editors . You can use this setting to add or remove other users you may whitelist who can create or alter elements of your scene. ",
    "url": "https://docs.arenaxr.org/content/interface/user-account.html#scene-permissions",
    "relUrl": "/content/interface/user-account.html#scene-permissions"
  },"966": {
    "doc": "User Account",
    "title": "Public Scenes",
    "content": "By default, scenes published under the public namespace are always considered Public Read in the ARENA. ",
    "url": "https://docs.arenaxr.org/content/interface/user-account.html#public-scenes",
    "relUrl": "/content/interface/user-account.html#public-scenes"
  },"967": {
    "doc": "User Account",
    "title": "ACL Default For New Users",
    "content": "We want all users to have the ability to view and move in scenes easily. For this, we use a default Viewer-Closed model: . | A user gets read access to all. | A user gets write access to personal objects (camera, hand controllers, avatar) only. | A user must apply for write access for other scene objects through the ACL website, awaiting scene owner’s permission. | . ",
    "url": "https://docs.arenaxr.org/content/interface/user-account.html#acl-default-for-new-users",
    "relUrl": "/content/interface/user-account.html#acl-default-for-new-users"
  },"968": {
    "doc": "User Account",
    "title": "Administrator Functions",
    "content": "Admin users have an additional function on their profile page. There is a Staff Users list which will be empty when the ARENA is first deployed. Here an Admin can set which authenticated users have the Staff user role. ",
    "url": "https://docs.arenaxr.org/content/interface/user-account.html#administrator-functions",
    "relUrl": "/content/interface/user-account.html#administrator-functions"
  },"969": {
    "doc": "User Account",
    "title": "User Account",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/interface/user-account.html",
    "relUrl": "/content/interface/user-account.html"
  },"970": {
    "doc": "First Time in the ARENA",
    "title": "Entering ARENA for the First Time",
    "content": "This walkthrough of the ARENA interface will show the main features of the ARENA when used in Virtual Reality (VR). ",
    "url": "https://docs.arenaxr.org/content/overview/user-guide.html#entering-arena-for-the-first-time",
    "relUrl": "/content/overview/user-guide.html#entering-arena-for-the-first-time"
  },"971": {
    "doc": "First Time in the ARENA",
    "title": "Before you Start",
    "content": "For the best ARENA performance, you need a couple of things: . | Chrome or Edge Web Browser (FireFox also works, but sometimes FireFox doesn’t send video) | No ad blockers (some blockers are okay, others cause issues) | Headphones highly recommended. They provide directional sound and stop echo. Please stay on mute when not speaking if you don’t have headphones. | A fast machine to handle all the processing and 3D graphics is also recommended | . ",
    "url": "https://docs.arenaxr.org/content/overview/user-guide.html#before-you-start",
    "relUrl": "/content/overview/user-guide.html#before-you-start"
  },"972": {
    "doc": "First Time in the ARENA",
    "title": "Opening a Scene",
    "content": "Let us have a look at the lobby scene: https://arenaxr.org/public/lobby. The link above will open in a new tab. Since ARENA is a collaborative, multi-user environment, you may see other people there. Say Hi! . note . ARENA uses the concept of scenes to separate content. In a Virtual Reality (VR) environment, you can imagine each scene as a separate room. See the ARENA Tutorial to learn more. ",
    "url": "https://docs.arenaxr.org/content/overview/user-guide.html#opening-a-scene",
    "relUrl": "/content/overview/user-guide.html#opening-a-scene"
  },"973": {
    "doc": "First Time in the ARENA",
    "title": "Signing In",
    "content": "When you first enter the ARENA, there will be a screen asking you to sign in. You can use your Google account, which will automatically set your name to the name used in your Google account (you can change this later). tip . You can also choose to sign in anonymously; you’ll have to enter a name to use in the ARENA. ARENA Username . If you choose to login using your Google account, you will be asked to signup and define your ARENA username: . This will create a namespace under which you can have your own scenes. For example, user1, will have his scenes under http://arenaxr.org/user1/. ",
    "url": "https://docs.arenaxr.org/content/overview/user-guide.html#signing-in",
    "relUrl": "/content/overview/user-guide.html#signing-in"
  },"974": {
    "doc": "First Time in the ARENA",
    "title": "Permissions",
    "content": "You’ll be asked to give location, microphone, and camera access to the ARENA site. If you do not select “yes”, you won’t be able to connect to the scene location ATLAS, use voice, video, or the face tracking avatar. ",
    "url": "https://docs.arenaxr.org/content/overview/user-guide.html#permissions",
    "relUrl": "/content/overview/user-guide.html#permissions"
  },"975": {
    "doc": "First Time in the ARENA",
    "title": "Moving Around",
    "content": "Once inside the ARENA, you should see the lobby scene. You might have to wait for all the scene to load until it looks something like this: . To move, use the arrow keys. More advanced movement can be done by a combination of ‘W’, ‘A’, ‘S’, ‘D’ (to go forward/back and stride) and the mouse (to look around/change direction). You can also mix and match any combination of these motions. Definitely try clicking and dragging with the mouse. ",
    "url": "https://docs.arenaxr.org/content/overview/user-guide.html#moving-around",
    "relUrl": "/content/overview/user-guide.html#moving-around"
  },"976": {
    "doc": "First Time in the ARENA",
    "title": "Buttons",
    "content": "The buttons around the screen give access to several options, such as: your sound and video settings, you display name, chat, or find other people and places. Note that everyone starts with audio and video off. | Button | Action | Description | . | | Settings | Expand/Collapse settings along the right. | . | | Microphone | Speak into the ARENA, or remain silent. | . | | Camera | Let your camera show you as a moving box with your camera image on it. | . | | A/V Options | Change your Audio/Video settings. | . | | Facial Avatar | Let your camera recognize your facial features, and you will appear an animated head matching your facial movement. | . | | Flight | Movement defaults to walking along the ground, this will enable you to fly up or even down through the ground. | . | | Movement Speed | Slow/Medium/Fast, defaults to Medium. | . | | Screenshare | Share your screen as a large panel in the ARENA. | . | | Sign Out | Exit the ARENA. | . | | Chat Messages | Open chat messaging. | . | | User List | Open list of present users. | . | | Landmarks | Open list of landmarks (when present). | . | | Health Checks | Errors and warnings, click for details and troubleshooting suggestions. | . | | Video Quality | Video conference quality metric. | . ",
    "url": "https://docs.arenaxr.org/content/overview/user-guide.html#buttons",
    "relUrl": "/content/overview/user-guide.html#buttons"
  },"977": {
    "doc": "First Time in the ARENA",
    "title": "Audio/Video Capabilities",
    "content": "The ARENA experience includes audio and video capabilities. Users can share their video and see other users as floating cubes. One interesting feature is that sound is spatial in the ARENA (sound will fade as users get further away and will come from the direction where the user is). ",
    "url": "https://docs.arenaxr.org/content/overview/user-guide.html#audiovideo-capabilities",
    "relUrl": "/content/overview/user-guide.html#audiovideo-capabilities"
  },"978": {
    "doc": "First Time in the ARENA",
    "title": "Chat, Find People and Places",
    "content": "You can send messages to other users, find users (and place yourself in front of them) and find places, such as meeting points and posters (and place yourself in front of them), using the buttons at the bottom of the screen. note . The landmarks button only appears in scenes that have landmarks. ",
    "url": "https://docs.arenaxr.org/content/overview/user-guide.html#chat-find-people-and-places",
    "relUrl": "/content/overview/user-guide.html#chat-find-people-and-places"
  },"979": {
    "doc": "First Time in the ARENA",
    "title": "Additional Settings",
    "content": "The settings menu is collapsed by default; clicking the arrow underneath the face tracking icon will expand the menu. When clicked, you will see additional icons, your name and authentication options in a pop up next to the icons. It shows the authenticator (Google or anonymous), the email used for Google authentication, and your display name. The display name can be changed here. It is initially set to the name from your Google account or the name chosen when signing in anonymously. If you click the X on the settings box and it disappears, you will need to collapse and re-open the icons to show the options again. goal . Enter any ARENA 3D scene and move around to get familiar with the controls. ",
    "url": "https://docs.arenaxr.org/content/overview/user-guide.html#additional-settings",
    "relUrl": "/content/overview/user-guide.html#additional-settings"
  },"980": {
    "doc": "First Time in the ARENA",
    "title": "First Time in the ARENA",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/overview/user-guide.html",
    "relUrl": "/content/overview/user-guide.html"
  },"981": {
    "doc": "User Presence",
    "title": "ARENA User Presence",
    "content": "Users in the ARENA are represented to each other in a 3d scene with an avatar. Your default user avatar looks like a static 3d floating head model with your chosen display name above the head, and a muted microphone icon. Wherever you choose to move or look within a scene is where other users will see your avatar move or look. ",
    "url": "https://docs.arenaxr.org/content/interface/user-presence.html#arena-user-presence",
    "relUrl": "/content/interface/user-presence.html#arena-user-presence"
  },"982": {
    "doc": "User Presence",
    "title": "Audio/Video Setup",
    "content": "Upon entering a scene you will see a panel for audio and video setup. Here you can Select Camera, Speakers, or Microphone to use, test your devices to make sure they are working, and adjust your display name. ",
    "url": "https://docs.arenaxr.org/content/interface/user-presence.html#audiovideo-setup",
    "relUrl": "/content/interface/user-presence.html#audiovideo-setup"
  },"983": {
    "doc": "User Presence",
    "title": "User Display Name",
    "content": "The display name you choose, will be displayed in random colored text above your user avatar. In an ARENA Scene, you can change your display text by clicking the last right-hand arrow “V” icon to show the Settings panel, which provides a Display Name input box you can change to what you wish. ",
    "url": "https://docs.arenaxr.org/content/interface/user-presence.html#user-display-name",
    "relUrl": "/content/interface/user-presence.html#user-display-name"
  },"984": {
    "doc": "User Presence",
    "title": "User Video",
    "content": "If you click the camera icon, you will begin to send video to other users. The video you are sending to other users will appear in the upper left corner of the screen. If your scene is enabled to use the facial recognition feature, you can click the recognition avatar icon and you will see the facial feature points recognized in the upper left corner of your screen. | User Avatar | Image | Camera | Video Sent | . | Static 3d head (default) | TBD | Off | None | . | Facial recognition 3d head | TBD | On | No video, only facial feature points | . | Video cube | TBD | On | Camera video | . | Black cube | TBD | On | Camera video error, only black frames | . Warning . Camera input is not available on all mobile device/browser combinations. ",
    "url": "https://docs.arenaxr.org/content/interface/user-presence.html#user-video",
    "relUrl": "/content/interface/user-presence.html#user-video"
  },"985": {
    "doc": "User Presence",
    "title": "User Audio",
    "content": "If you click the microphone icon, you will begin to send audio to other users. When you have your microphone turned off, other users will see a muted microphone icon over your avatar. Our audio support includes a number of features. Depending on the range between you and other users’ avatars, you may experience louder sounds the closer you are to them, depending which side of you they are speaking from, and if they are far enough away from you to cut off the audio completely. | User Audio | User Range | Microphone | Audio Sent | . | Muted Head Icon | all | Off | None | . | Directional Audio | 0-20m | On | Audio is in stereo by avatar pose | . | Spatial Audio | 0-20m | On | Audio fades with distance | . | Cut Off Audio | &gt; 20m | On | None | . ",
    "url": "https://docs.arenaxr.org/content/interface/user-presence.html#user-audio",
    "relUrl": "/content/interface/user-presence.html#user-audio"
  },"986": {
    "doc": "User Presence",
    "title": "User Pose",
    "content": "By default the ARENA shows your location as a 3d model of a head, with your nose at your position coordinates. The pose of a user is composed of the user’s position (location) and rotation (gaze) in the 3d world of the ARENA. Depending on the XR view and hardware you use, your pose may be determined by a number of differing sensors. | XR View | Rotation Sensor | Position Sensor | . | VR Desktop | Keyboard/Mouse | Keyboard | . | VR Phone/Tablet | Touchscreen | Touchscreen | . | VR Headset/Glasses (VR button) | Accelerometer | ——— | . | AR Phone/Tablet (AR button) | Accelerometer | Accelerometer/Camera | . ",
    "url": "https://docs.arenaxr.org/content/interface/user-presence.html#user-pose",
    "relUrl": "/content/interface/user-presence.html#user-pose"
  },"987": {
    "doc": "User Presence",
    "title": "Facial Recognition Avatar",
    "content": "Your ARENA scene may have the capability to use facial recognition to recognize your facial feature points from your camera and present a generic 3d head which will move its eyes, eyebrows, mouth and lips as you do. Only other users will see the 3d rendering of your avatar. ",
    "url": "https://docs.arenaxr.org/content/interface/user-presence.html#facial-recognition-avatar",
    "relUrl": "/content/interface/user-presence.html#facial-recognition-avatar"
  },"988": {
    "doc": "User Presence",
    "title": "Screen Sharing",
    "content": "When you click and accept the screenshare icon and popup, it will ask for the object name/ID of the object you want to screen share on (defaulted to an object with object_id: screenshare, which is dynamically created if it doesn’t exist already). | See our Screenshare Walkthrough for more detail. | . ",
    "url": "https://docs.arenaxr.org/content/interface/user-presence.html#screen-sharing",
    "relUrl": "/content/interface/user-presence.html#screen-sharing"
  },"989": {
    "doc": "User Presence",
    "title": "Vive (laser) controls",
    "content": "Out of Date . We have some support for VR Vive hand controls in the ARENA, but these instructions may be out of date. We’ve noticed the controllers don’t show up in the scene unless they both and EVERYTHING else for SteamVR are all working (headset, lighthouses). And sometimes you have to restart SteamVR for hand controllers to show up in the scene; even though SteamVR shows them as being working/on/available/etc. It’s possible to open VR mode in an ARENA scene and be missing the hand controls. By default we use A-Frame laser-controls which default to showing Valve Index controller 3D models (gray, circular), even if we are using (equivalent) Vive controllers (black, paddle shaped, not included in the list of controllers known to A-Frame). ",
    "url": "https://docs.arenaxr.org/content/interface/user-presence.html#vive-laser-controls",
    "relUrl": "/content/interface/user-presence.html#vive-laser-controls"
  },"990": {
    "doc": "User Presence",
    "title": "Camera Perspective",
    "content": "(from A-Frame documentation) . | The camera component defines from which perspective the user views the scene. The camera is commonly paired with control components that allow input devices to move and rotate the camera. | . | A camera should usually be positioned at the average height of human eye level (1.6 meters). When used with controls that receive rotation or position (e.g. from a VR device) this position will be overridden. | . &lt;a-entity camera look-controls position=\"0 1.6 0\"&gt;&lt;/a-entity&gt; . The above example puts the camera at a position in the scene, but sure enough, when we use a tablet with WebXR Viewer or a VR or AR headset, these values are overwritten. In fact, it turns out that from a desktop browser, at the start of our A-Frame session, regardless of the values set in the HTML above, the start position is set to (0, 1.6, 0). It was misleading that the HTML definition just happened to match. Our code sets it to (0,0,0) in the declaration. It gets more interesting: on a tablet or phone, the start position again gets overridden by (0,0,0) this time! . | When moving or rotating the camera relative to the scene, use a camera rig. By doing so, the camera’s height offset can be updated by room-scale devices, while still allowing the tracked area to be moved independently around the scene. | . &lt;a-entity id=\"rig\" position=\"25 10 0\"&gt; &lt;a-entity id=\"camera\" camera look-controls&gt;&lt;/a-entity&gt; &lt;/a-entity&gt; . ",
    "url": "https://docs.arenaxr.org/content/interface/user-presence.html#camera-perspective",
    "relUrl": "/content/interface/user-presence.html#camera-perspective"
  },"991": {
    "doc": "User Presence",
    "title": "User Presence",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/interface/user-presence.html",
    "relUrl": "/content/interface/user-presence.html"
  },"992": {
    "doc": "arena.utils",
    "title": "\narena.utils    ",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/python-api/utils.html",
    "relUrl": "/content/python-api/utils.html"
  },"993": {
    "doc": "arena.utils",
    "title": "arena.utils",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/utils.html",
    "relUrl": "/content/python-api/utils.html"
  },"994": {
    "doc": "arena.utils.utils",
    "title": "\narena.utils.utils    ",
    "content": "class Utils: @classmethod def tuple_to_string(cls, tup, sep=&#39; &#39;): Turns a tuple into a string . @classmethod def agran(cls, float_num): Reduces floating point numbers to ARENA granularity . @classmethod def dict_key_replace(cls, d, key, new_key): Repalces a key,val with a new key,val . @classmethod def quat_to_matrix3(cls, rotq): @classmethod def matrix3_to_quat(cls, rotm): @classmethod def pose_to_matrix4(cls, pos, rotq, scale=(1, 1, 1)): @classmethod def matrix4_to_pose(cls, mat): @classmethod def get_world_pose(cls, obj, scene): ",
    "url": "https://docs.arenaxr.org/content/python-api/utils/utils.html",
    "relUrl": "/content/python-api/utils/utils.html"
  },"995": {
    "doc": "arena.utils.utils",
    "title": "arena.utils.utils",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/utils/utils.html",
    "relUrl": "/content/python-api/utils/utils.html"
  },"996": {
    "doc": "UWB",
    "title": "UWB",
    "content": "UWB is a short-range radio technology widely used for indoor positioning. ARENA support for UWB is still mostly experimental and under development. Coming Soon . Stay tuned for more details… . ",
    "url": "https://docs.arenaxr.org/content/xr/uwb.html",
    "relUrl": "/content/xr/uwb.html"
  },"997": {
    "doc": "Vector2",
    "title": "Vector2",
    "content": "Vector2 . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/vector2.html#vector2",
    "relUrl": "/content/schemas/message/vector2.html#vector2"
  },"998": {
    "doc": "Vector2",
    "title": "Vector2 Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | x | number | 0 | x | Yes | . | y | number | 0 | y | Yes | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/vector2.html#vector2-attributes",
    "relUrl": "/content/schemas/message/vector2.html#vector2-attributes"
  },"999": {
    "doc": "Vector2",
    "title": "Vector2",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/vector2.html",
    "relUrl": "/content/schemas/message/vector2.html"
  },"1000": {
    "doc": "Vector3",
    "title": "Vector3",
    "content": "Vector3 . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/vector3.html#vector3",
    "relUrl": "/content/schemas/message/vector3.html#vector3"
  },"1001": {
    "doc": "Vector3",
    "title": "Vector3 Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | x | number | 0 | x | Yes | . | y | number | 0 | y | Yes | . | z | number | 0 | z | Yes | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/vector3.html#vector3-attributes",
    "relUrl": "/content/schemas/message/vector3.html#vector3-attributes"
  },"1002": {
    "doc": "Vector3",
    "title": "Vector3",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/vector3.html",
    "relUrl": "/content/schemas/message/vector3.html"
  },"1003": {
    "doc": "arena.version",
    "title": "\narena.version    ",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/python-api/version.html",
    "relUrl": "/content/python-api/version.html"
  },"1004": {
    "doc": "arena.version",
    "title": "arena.version",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/version.html",
    "relUrl": "/content/python-api/version.html"
  },"1005": {
    "doc": "Video",
    "title": "Video",
    "content": "Adds a video to an entity and controls its playback. ",
    "url": "https://docs.arenaxr.org/content/schemas/message/video-control.html#video",
    "relUrl": "/content/schemas/message/video-control.html#video"
  },"1006": {
    "doc": "Video",
    "title": "Video Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | frame_object | string |   | URL of a thumbnail image, e.g. ‘store/users/wiselab/images/conix-face-white.jpg’. | Yes | . | video_object | string |   | Name of object where to put the video, e.g. ‘square_vid6’. | Yes | . | video_path | string |   | URL of the video file, e.g. ‘store/users/wiselab/videos/kungfu.mp4’. | Yes | . | anyone_clicks | boolean | True | Responds to clicks from any user. | No | . | video_loop | boolean | True | Video automatically loops. | No | . | autoplay | boolean | False | Video starts playing automatically. | No | . | volume | number | 1 | Video sound volume. | No | . | cleanup | boolean | True | Automatically remove HTML5 video and img assets from DOM on object removal. | No | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/video-control.html#video-attributes",
    "relUrl": "/content/schemas/message/video-control.html#video-attributes"
  },"1007": {
    "doc": "Video",
    "title": "Video",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/video-control.html",
    "relUrl": "/content/schemas/message/video-control.html"
  },"1008": {
    "doc": "arena.attributes.video_control",
    "title": "\narena.attributes.video_control    ",
    "content": "class VideoControl(arena.attributes.attribute.Attribute): VideoControl attribute class to manage its properties in the ARENA: Adds a video to an entity and controls its playback. Usage: video_control=VideoControl(...) . Parameters . | bool anyone_clicks: Responds to clicks from any user. Defaults to 'True' (optional) | bool autoplay: Video starts playing automatically. (optional) | bool cleanup: Automatically remove HTML5 video and img assets from DOM on object removal. Defaults to 'True' (optional) | str frame_object: URL of a thumbnail image, e.g. 'store/users/wiselab/images/conix-face-white.jpg'. (optional) | bool video_loop: Video automatically loops. Defaults to 'True' (optional) | str video_object: Name of object where to put the video, e.g. 'square_vid6'. (optional) | str video_path: URL of the video file, e.g. 'store/users/wiselab/videos/kungfu.mp4'. (optional) | float volume: Video sound volume. Defaults to '1' (optional) | . VideoControl(**kwargs) Inherited Members . arena.base_object.BaseObject add json_encode json ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/video_control.html",
    "relUrl": "/content/python-api/attributes/video_control.html"
  },"1009": {
    "doc": "arena.attributes.video_control",
    "title": "arena.attributes.video_control",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/attributes/video_control.html",
    "relUrl": "/content/python-api/attributes/video_control.html"
  },"1010": {
    "doc": "Videosphere",
    "title": "Videosphere",
    "content": "Videosphere Geometry. All wire objects have a set of basic attributes {object_id, action, type, persist, data}. The data attribute defines the object-specific attributes . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/videosphere.html#videosphere",
    "relUrl": "/content/schemas/message/videosphere.html#videosphere"
  },"1011": {
    "doc": "Videosphere",
    "title": "Videosphere Attributes",
    "content": "| Attribute | Type | Default | Description | Required | . | object_id | string |   | A uuid or otherwise unique identifier for this object. | Yes | . | persist | boolean | True | Persist this object in the database. | Yes | . | type | string; Must be: object | 'object' | AFrame 3D Object | Yes | . | action | string; One of: ['create', 'delete', 'update'] | 'create' | Message action create, update, delete. | Yes | . | ttl | integer |   | When applied to an entity, the entity will remove itself from DOM after the specified number of seconds. Update is allowed, which will reset the timer to start from that moment. | No | . | data | Videosphere data |   | Videosphere Data | Yes | . Videosphere Data Attributes . | Attribute | Type | Default | Description | Required | . | object_type | string; Must be: videosphere | videosphere | 3D object type. | Yes | . | autoplay | boolean | True | Autoplay | No | . | crossOrigin | string | 'anonymous' | Cross Origin | No | . | loop | boolean | True | Loop | No | . | radius | number | 500 | Radius | Yes | . | segmentsHeight | integer | 32 | Segments Height | No | . | segmentsWidth | integer | 64 | Segments Width | No | . | src | string |   | URI, relative or full path of an image/video file. e.g. ‘store/users/wiselab/images/360falls.mp4’. | No | . | parent | string |   | Parent’s object_id. Child objects inherit attributes of their parent, for example scale and translation. | No | . | position | position |   | 3D object position. | Yes | . | rotation | rotation |   | 3D object rotation in quaternion representation; Right-handed coordinate system. Euler degrees are deprecated in wire message format. | Yes | . | scale | scale |   | 3D object scale. | No | . | buffer | boolean | True | Transform geometry into a BufferGeometry to reduce memory usage at the cost of being harder to manipulate (geometries only: box, circle, cone, …). | No | . | jitsi-video | jitsi-video |   | Apply a jitsi video source to the geometry. | No | . | material | material |   | The material properties of the object’s surface. | No | . | multisrc | multisrc |   | Define multiple visual sources applied to an object. | No | . | screenshareable | boolean | True | Whether or not a user can screenshare on an object. | No | . | skipCache | boolean | False | Disable retrieving the shared geometry object from the cache. (geometries only: box, circle, cone, …). | No | . ",
    "url": "https://docs.arenaxr.org/content/schemas/message/videosphere.html#videosphere-attributes",
    "relUrl": "/content/schemas/message/videosphere.html#videosphere-attributes"
  },"1012": {
    "doc": "Videosphere",
    "title": "Videosphere",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/schemas/message/videosphere.html",
    "relUrl": "/content/schemas/message/videosphere.html"
  },"1013": {
    "doc": "arena.objects.videosphere",
    "title": "\narena.objects.videosphere    ",
    "content": "class Videosphere(arena.objects.arena_object.Object): Videosphere object class to manage its properties in the ARENA: Videosphere Geometry. Parameters . | bool autoplay: Autoplay Defaults to 'True' (optional) | str crossOrigin: Cross Origin Defaults to 'anonymous' (optional) | bool loop: Loop Defaults to 'True' (optional) | float radius: Radius Defaults to '500' (optional) | int segmentsHeight: Segments Height Defaults to '32' (optional) | int segmentsWidth: Segments Width Defaults to '64' (optional) | str src: URI, relative or full path of an image/video file. e.g. 'store/users/wiselab/images/360falls.mp4'. (optional) | . Videosphere(**kwargs) object_type = &#39;videosphere&#39; Inherited Members . arena.objects.arena_object.Object type all_objects evt_handler update_handler animations delayed_prop_tasks update_attributes dispatch_animation remove_animation_at_index clear_animations clickable json_preprocess json_postprocess json get add remove exists arena.base_object.BaseObject json_encode ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/videosphere.html",
    "relUrl": "/content/python-api/objects/videosphere.html"
  },"1014": {
    "doc": "arena.objects.videosphere",
    "title": "arena.objects.videosphere",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/objects/videosphere.html",
    "relUrl": "/content/python-api/objects/videosphere.html"
  },"1015": {
    "doc": "arena.event_loop.worker",
    "title": "\narena.event_loop.worker    ",
    "content": "class Worker: Wrapper for async function for single ARENA tasks. Worker(event_loop, func, event=None, *args, **kwargs) event_loop func event args kwargs async def run(self): async def sleep(self, interval): @classmethod def print_traceback(cls, func_name): ",
    "url": "https://docs.arenaxr.org/content/python-api/event_loop/worker.html",
    "relUrl": "/content/python-api/event_loop/worker.html"
  },"1016": {
    "doc": "arena.event_loop.worker",
    "title": "arena.event_loop.worker",
    "content": "arena-py API v0.10.0 . ",
    "url": "https://docs.arenaxr.org/content/python-api/event_loop/worker.html",
    "relUrl": "/content/python-api/event_loop/worker.html"
  },"1017": {
    "doc": "miXed Reality",
    "title": "Quick XR Experience Example",
    "content": "ARENA has seamless support for a spectrum of experiences, from completely immersing the user in a digital world (Virtual Reality; VR) to enhancing the real world with interactive digital content (Augmented Reality; AR). A spectrum often identified as miXed Reality (XR). Try the following for a quick sample of AR using ARENA by opening a pre-made scene and anchoring it in the real world with an optical marker. For simplicity, here we suggest a pass-through AR experience using the back-facing camera of a phone or tablet to capture the world and display the mix of virtual and real contents on the screen (options using Android and iOS below). In the XR Section you can find more information about using ARENA for XR, including different types of anchors, and supported devices. ",
    "url": "https://docs.arenaxr.org/content/overview/xr.html#quick-xr-experience-example",
    "relUrl": "/content/overview/xr.html#quick-xr-experience-example"
  },"1018": {
    "doc": "miXed Reality",
    "title": "Requirements",
    "content": "We will use an AprilTag optical marker to anchor an ARENA scene in the real world. Detection of optical markers requires that the browser supports ARENA’s computer vision while in AR mode. For this quick test, we suggest Chrome Beta on Android or XR Browser on iOS. note . Check out the XR Requirements Section for details on the requirements of different types of anchors that can be used in ARENA and the browsers that support these. ",
    "url": "https://docs.arenaxr.org/content/overview/xr.html#requirements",
    "relUrl": "/content/overview/xr.html#requirements"
  },"1019": {
    "doc": "miXed Reality",
    "title": "Open an ARENA Scene in AR",
    "content": ". | Print out (or display on a screen1) an AprilTag with ID 0. It should look like the image above. | Then, open the scene by entering the following URL2 in the address bar of either Chrome Beta on Android or XR Browser on iOS: . https://arenaxr.org/public/artest?armode=true . | . note . See instructions on using a QR Code to quickly open the URL on XR Browser further down. Opening the URL should display the following sequence of screens. Click “Allow” for motion and camera access and “Enter” for AR mode. | | . | Provide access to sensors (1) | Enter AR mode confirmation | . Finally, point the device to the AprilTag, and scene’s origin should be anchored to it: . Open Scene From QR Code (XR Browser) . XR Browser supports loading a URL from a QR code: . i) Tap the address bar. The QR code scanner button will show up on the right. ii). XR Browser will open your phone camera for scanning QR codes after you grant it permission. iii) Position the following QR code to align it within the frame outlined by the four blue corners. XR Browser will automatically scan the QR code once it detects proper alignment. iv) After scanning (because the QR code is a web address), the page will open. goal . Experiment with viewing 3D content in XR, Mixed Reality. Footnotes . | For a quick test, you can also use an AprilTag on a screen. Note, however, that the ARENA location solver needs to know the size of the tag to accurately compute its location (this information comes from the ARMarker object in the scene, which, in this scene, is configured for an AprilTag of size 150x150 mm). &#8617; . | The URL includes an armode=true flag which tells ARENA to automatically enter AR by skipping some AV setup steps. If this flag is not present, the user must select the [ AR ] button in the lower right to switch into AR mode. &#8617; . | . ",
    "url": "https://docs.arenaxr.org/content/overview/xr.html#open-an-arena-scene-in-ar",
    "relUrl": "/content/overview/xr.html#open-an-arena-scene-in-ar"
  },"1020": {
    "doc": "miXed Reality",
    "title": "miXed Reality",
    "content": " ",
    "url": "https://docs.arenaxr.org/content/overview/xr.html",
    "relUrl": "/content/overview/xr.html"
  }
}
